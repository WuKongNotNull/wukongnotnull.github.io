{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "Mr.Hope",
  "home_page_url": "https://mrhope.site/",
  "feed_url": "https://mrhope.site/feed.json",
  "description": "Where there is light, there is hope.",
  "items": [
    {
      "title": "后端开发",
      "url": "https://mrhope.site/code/back-end/",
      "id": "https://mrhope.site/code/back-end/",
      "content_html": "<h2 id=\"后端入门\" tabindex=\"-1\"> 后端入门</h2>\n<h3 id=\"php\" tabindex=\"-1\"> PHP</h3>\n<p>PHP 是一种创建动态交互性站点的强有力的服务器端脚本语言，免费，并且使用非常广泛。PHP (全称 Hypertext Preprocessor，即超文本预处理器)是一种通用开源脚本语言。</p>\n<p>PHP 手册:</p>\n<ul>\n<li>\n<p><a href=\"http://www.w3school.com.cn/php/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></p>\n</li>\n<li>\n<p><a href=\"https://www.runoob.com/php/php-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></p>\n</li>\n</ul>\n<p>如果服务器访问数量不大的情况下，PHP 作为一种门槛低，开发方便的脚本语言，还是挺受到欢迎的。</p>\n<h3 id=\"asp\" tabindex=\"-1\"> ASP</h3>\n<p>ASP 文件可包含文本、HTML 标签和脚本。ASP 文件中的脚本可在服务器上执行。由于 ASP 在服务器上运行，浏览器无需支持客户端脚本就可以显示 ASP 文件!</p>\n<ul>\n<li>\n<p><a href=\"http://www.w3school.com.cn/asp/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></p>\n</li>\n<li>\n<p><a href=\"https://www.runoob.com/asp/asp-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></p>\n</li>\n</ul>\n<div>\n<p>提示</p>\n<p>更多详情有待日后补充</p>\n</div>\n",
      "date_published": "2019-09-10T00:00:00.000Z",
      "date_modified": "2022-10-10T05:08:58.000Z",
      "authors": [],
      "tags": [
        "后端"
      ]
    },
    {
      "title": "操作系统",
      "url": "https://mrhope.site/code/basic/os.html",
      "id": "https://mrhope.site/code/basic/os.html",
      "summary": "操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。\n",
      "content_html": "<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>\n\n<p>操作系统会控制其他程序运行，管理系统资源，提供最基本的计算功能，如管理及配置内存、决定系统资源供需的优先次序等，同时还提供一些基本的服务程序，例如:</p>\n<ol>\n<li>\n<p>文件系统</p>\n<p>提供计算机存储信息的结构，信息存储在文件中，文件主要存储在计算机的内部硬盘里，在目录的分层结构中组织文件。文件系统为操作系统提供了组织管理数据的方式。</p>\n</li>\n<li>\n<p>设备驱动程序</p>\n<p>提供连接计算机的每个硬件设备的接口，设备驱动器使程序能够写入设备，而不需要了解执行每个硬件的细节。简单来说，就是让您能吃到鸡蛋，但不用养一只鸡。</p>\n</li>\n<li>\n<p>用户接口</p>\n<p>操作系统需要为用户提供一种运行程序和访问文件系统的方法。如常用的 Windows 图形界面，可以理解为一种用户与操作系统交互的方式；智能手机的 Android 或 iOS 系统，也是一种操作系统的交互方式。</p>\n</li>\n<li>\n<p>系统服务程序</p>\n<p>当计算机启动时，会自启动许多系统服务程序，执行安装文件系统、启动网络服务、运行预定任务等操作。</p>\n</li>\n</ol>\n<p>打个比方，操作系统就好像是一个政府，其它软件都会被它管控；操作系统在给其他软件提供各种便利的同时，还会约束其他软件不能为所欲为。</p>\n<p><img src=\"@source/code/basic/assets/OS.gif\" alt=\"操作系统结构示意图\"></p>\n<p>目前流行的服务器和 PC 端操作系统有 Linux、Windows、UNIX 等，手机操作系统有 Android、iOS，嵌入式操作系统有 Windows CE、PalmOS、eCos、uClinux 等。</p>\n",
      "date_published": "2019-12-26T00:00:00.000Z",
      "date_modified": "2022-10-10T05:08:58.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "高级合并",
      "url": "https://mrhope.site/software/git/merge.html",
      "id": "https://mrhope.site/software/git/merge.html",
      "content_html": "<h2 id=\"squash-merge\" tabindex=\"-1\"> Squash merge</h2>\n<p>通过使用 <code>--squash</code> 选项，你可以在合并中将多个 commit 合并为一个。</p>\n<p>也就是对于以下的例子</p>\n<i>Content not supported</i><p><code>git merge feature</code> 得到的结果为:</p>\n<i>Content not supported</i><p>而如果 <code>feature</code> 分支意在实现一个完成的特性，两个 commit 只是工作进度实际上并不重要的时候，我们可以通过 <code>git merge --squash feature</code> 得到:</p>\n<i>Content not supported</i><h2 id=\"cherry-pick\" tabindex=\"-1\"> Cherry pick</h2>\n<p>有些时候，我们可能需要提取其他分支的某个 commit，这个时候我们可以用 cherry pick 进行操作。</p>\n<i>Content not supported</i><p>在这种情况下，我们可以回到 main 分支，执行 <code>git cherry-pick &lt;commit id&gt;</code> 来挑拣某个提交，当然，你可以一并在命令中提交挑拣多个 commit。</p>\n<i>Content not supported</i><ul>\n<li><code>git cherry-pick &lt;commit id 1&gt; &lt;commit id 2&gt;</code> 表示挑拣 commit id 1 和 commit id 2</li>\n<li><code>git cherry-pick &lt;commit id 1&gt;...&lt;commit id 2&gt;</code> 表示挑拣 commit id 1 与 commit id 2 之间 (包括两者) 的所有提交</li>\n<li><code>git cherry-pick &lt;branch&gt;</code> 表示挑拣该分支最新的提交</li>\n</ul>\n",
      "date_published": "2022-09-07T17:18:06.000Z",
      "date_modified": "2022-09-07T17:18:06.000Z",
      "authors": [],
      "tags": [
        "Git"
      ]
    },
    {
      "title": "模块",
      "url": "https://mrhope.site/code/node-js/cjs.html",
      "id": "https://mrhope.site/code/node-js/cjs.html",
      "summary": "在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。\n为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 .js 文件就称之为一个模块(module)。\n使用模块有什么好处?\n最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。\n使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。\n",
      "content_html": "<p>在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。</p>\n<p>为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在 Node.js 环境中，一个 <code>.js</code> 文件就称之为一个模块(module)。</p>\n<p>使用模块有什么好处?</p>\n<p>最大的好处是大大提高了代码的可维护性。其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。我们在编写程序的时候，也经常引用其他模块，包括 Node.js 内置的模块和来自第三方的模块。</p>\n<p>使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。</p>\n\n<p>在上一节，我们编写了一个 hello.js 文件，这个 hello.js 文件就是一个模块，模块的名字就是文件名(去掉.js 后缀)，所以 hello.js 文件就是名为 hello 的模块。</p>\n<p>我们把 hello.js 改造一下，创建一个函数，这样我们就可以在其他地方调用这个函数:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>const</span> s <span>=</span> <span>\"Hello\"</span><span>;</span>\n\n<span>function</span> <span>greet</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>s <span>+</span> <span>\", \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> greet<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>函数 <code>greet()</code> 是我们在 hello 模块中定义的，您可能注意到最后一行是一个奇怪的赋值语句，它的意思是，把函数 <code>greet</code> 作为模块的输出暴露出去，这样其他模块就可以使用 <code>greet</code> 函数了。</p>\n<p>问题是其他模块怎么使用 hello 模块的这个 <code>greet</code> 函数呢? 我们再编写一个 <code>main.js</code> 文件，调用 <code>hello</code> 模块的 <code>greet</code> 函数:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>// 引入hello模块:</span>\n<span>const</span> greet <span>=</span> <span>require</span><span>(</span><span>\"./hello\"</span><span>)</span><span>;</span>\n\n<span>const</span> s <span>=</span> <span>\"Michael\"</span><span>;</span>\n\n<span>greet</span><span>(</span>s<span>)</span><span>;</span> <span>// Hello, Michael!</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>注意到引入 <code>hello</code> 模块用 Node.js 提供的 <code>require</code> 函数:</p>\n<div><pre><code><span>const</span> greet <span>=</span> <span>require</span><span>(</span><span>\"./hello\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>引入的模块作为变量保存在 <code>greet</code> 变量中，那 greet 变量到底是什么东西? 其实变量 <code>greet</code> 就是在 <code>hello.js</code> 中我们用 <code>module.exports = greet;</code> 输出的 <code>greet</code> 函数。所以，<code>main.js</code> 就成功地引用了 <code>hello.js</code> 模块中定义的 <code>greet()</code> 函数，接下来就可以直接使用它了。</p>\n<p>在使用 <code>require()</code> 引入模块的时候，请注意模块的相对路径。因为 main.js 和 hello.js 位于同一个目录，所以我们用了当前目录.:</p>\n<div><pre><code><span>const</span> greet <span>=</span> <span>require</span><span>(</span><span>\"./hello\"</span><span>)</span><span>;</span> <span>// 不要忘了写相对目录!</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>如果只写模块名:</p>\n<div><pre><code><span>const</span> greet <span>=</span> <span>require</span><span>(</span><span>\"hello\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>则 Node.js 会依次在内置模块、全局模块和当前模块下查找 hello.js，您很可能会得到一个错误:</p>\n<div><pre><code>module<span>.</span>js\n    <span>throw</span> err<span>;</span>\n          <span>^</span>\n<span>Error</span><span>:</span> Cannot find module <span>'hello'</span>\n    at Function<span>.</span>Module<span>.</span>_resolveFilename\n    at Function<span>.</span>Module<span>.</span>_load\n    <span>...</span>\n    at Function<span>.</span>Module<span>.</span>_load\n    at Function<span>.</span>Module<span>.</span>runMain\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>遇到这个错误，您要检查:</p>\n<ul>\n<li>模块名是否写对了；</li>\n<li>模块文件是否存在；</li>\n<li>相对路径是否写对了。</li>\n</ul>\n<h2 id=\"commonjs-规范\" tabindex=\"-1\"> CommonJS 规范</h2>\n<p>这种模块加载机制被称为 <code>CommonJS</code> 规范。在这个规范下，每个 <code>.js</code> 文件都是一个模块，它们内部各自使用的变量名和函数名都互不冲突，例如，<code>hello.js</code> 和 <code>main.js</code> 都申明了全局变量 <code>const s = 'xxx'</code>，但互不影响。</p>\n<p>一个模块想要对外暴露变量(函数也是变量)，可以用 <code>module.exports = variable;</code>，一个模块要引用其他模块暴露的变量，用 <code>const ref = require('module_name');</code> 就拿到了引用模块的变量。</p>\n<h2 id=\"总结\" tabindex=\"-1\"> 总结</h2>\n<p>要在模块中对外输出变量，用:</p>\n<div><pre><code>module<span>.</span>exports <span>=</span> variable<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>输出的变量可以是任意对象、函数、数组等等。</p>\n<p>要引入其他模块输出的对象，用:</p>\n<div><pre><code><span>const</span> foo <span>=</span> <span>require</span><span>(</span><span>\"other_module\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>引入的对象具体是什么，取决于引入模块输出的对象。</p>\n<h2 id=\"深入了解模块原理\" tabindex=\"-1\"> 深入了解模块原理</h2>\n<p>如果您想详细地了解<strong>CommonJS</strong>的模块实现原理，请继续往下阅读。如果不想了解，请结束阅读。</p>\n<p>当我们编写 JavaScript 代码时，我们可以申明全局变量:</p>\n<div><pre><code><span>const</span> s <span>=</span> <span>\"global\"</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>在浏览器中，大量使用全局变量可不好。如果您在 <code>a.js</code> 中使用了全局变量 s，那么，在 <code>b.js</code> 中也使用全局变量 s，将造成冲突，<code>b.js</code> 中对 s 赋值会改变 <code>a.js</code> 的运行逻辑。</p>\n<p>也就是说，JavaScript 语言本身并没有一种模块机制来保证不同模块可以使用相同的变量名。</p>\n<p>那 Node.js 是如何实现这一点的?</p>\n<p>其实要实现“模块”这个功能，并不需要语法层面的支持。Node.js 也并不会增加任何 JavaScript 语法。实现“模块”功能的奥妙就在于 JavaScript 是一种函数式编程语言，它支持闭包。如果我们把一段 JavaScript 代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。</p>\n<p>请注意我们编写的 <code>hello.js</code> 代码是这样的:</p>\n<div><pre><code><span>const</span> s <span>=</span> <span>\"Hello\"</span><span>;</span>\n<span>const</span> name <span>=</span> <span>\"world\"</span><span>;</span>\n\nconsole<span>.</span><span>log</span><span>(</span>s <span>+</span> <span>\" \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>Node.js 加载了 hello.js 后，它可以把代码包装一下，变成这样执行:</p>\n<div><pre><code><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>// 读取的hello.js代码:</span>\n  <span>const</span> s <span>=</span> <span>\"Hello\"</span><span>;</span>\n  <span>const</span> name <span>=</span> <span>\"world\"</span><span>;</span>\n\n  console<span>.</span><span>log</span><span>(</span>s <span>+</span> <span>\" \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n  <span>// hello.js代码结束</span>\n<span>}</span><span>)</span><span>(</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样一来，原来的全局变量 <code>s</code> 现在变成了匿名函数内部的局部变量。如果 Node.js 继续加载其他模块，这些模块中定义的“全局”变量 <code>s</code> 也互不干扰。</p>\n<p>所以，Node.js 利用 JavaScript 的函数式编程的特性，轻而易举地实现了模块的隔离。</p>\n<p>但是，模块的输出 <code>module.exports</code> 怎么实现?</p>\n<p>这个也很容易实现，Node.js 可以先准备一个对象 <code>module</code>:</p>\n<div><pre><code><span>// 准备module对象:</span>\n<span>const</span> module <span>=</span> <span>{</span>\n  <span>id</span><span>:</span> <span>\"hello\"</span><span>,</span>\n  <span>exports</span><span>:</span> <span>{</span><span>}</span><span>,</span>\n<span>}</span><span>;</span>\n<span>const</span> <span>load</span> <span>=</span> <span>function</span> <span>(</span><span>module</span><span>)</span> <span>{</span>\n  <span>// 读取的hello.js代码:</span>\n  <span>function</span> <span>greet</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span><span>\"Hello, \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n  <span>}</span>\n\n  module<span>.</span>exports <span>=</span> greet<span>;</span>\n  <span>// hello.js代码结束</span>\n  <span>return</span> module<span>.</span>exports<span>;</span>\n<span>}</span><span>;</span>\n<span>const</span> exported <span>=</span> <span>load</span><span>(</span>module<span>)</span><span>;</span>\n<span>// 保存module:</span>\n<span>save</span><span>(</span>module<span>,</span> exported<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可见，变量 module 是 Node.js 在加载 js 文件前准备的一个变量，并将其传入加载函数，我们在 <code>hello.js</code> 中可以直接使用变量 <code>module</code> 原因就在于它实际上是函数的一个参数:</p>\n<div><pre><code>module<span>.</span>exports <span>=</span> greet<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>通过把参数 <code>module</code> 传递给 <code>load()</code> 函数，<code>hello.js</code> 就顺利地把一个变量传递给了 Node.js 执行环境，Node.js 会把 module 变量保存到某个地方。</p>\n<p>由于 Node.js 保存了所有导入的 module，当我们用 <code>require()</code> 获取 module 时，Node.js 找到对应的 module，把这个 module 的 <code>exports</code> 变量返回，这样，另一个模块就顺利拿到了模块的输出:</p>\n<div><pre><code><span>const</span> greet <span>=</span> <span>require</span><span>(</span><span>\"./hello\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>以上是 Node.js 实现 JavaScript 模块的一个简单的原理介绍。</p>\n<h2 id=\"module-exports-vs-exports\" tabindex=\"-1\"> module.exports vs exports</h2>\n<p>很多时候，您会看到，在 Node.js 环境中，有两种方法可以在一个模块中输出变量:</p>\n<p>方法一: 对 module.exports 赋值:</p>\n<div><pre><code><span>// hello.js</span>\n\n<span>function</span> <span>hello</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"Hello, world!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>greet</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"Hello, \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\nmodule<span>.</span>exports <span>=</span> <span>{</span>\n  <span>hello</span><span>:</span> hello<span>,</span>\n  <span>greet</span><span>:</span> greet<span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>方法二: 直接使用 exports:</p>\n<div><pre><code><span>// hello.js</span>\n\n<span>function</span> <span>hello</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"Hello, world!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>greet</span><span>(</span><span>name</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"Hello, \"</span> <span>+</span> name <span>+</span> <span>\"!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\n<span>function</span> <span>hello</span><span>(</span><span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span><span>\"Hello, world!\"</span><span>)</span><span>;</span>\n<span>}</span>\n\nexports<span>.</span>hello <span>=</span> hello<span>;</span>\nexports<span>.</span>greet <span>=</span> greet<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>但是您不可以直接对 exports 赋值:</p>\n<div><pre><code><span>// 代码可以执行，但是模块并没有输出任何变量:</span>\nexports <span>=</span> <span>{</span>\n  <span>hello</span><span>:</span> hello<span>,</span>\n  <span>greet</span><span>:</span> greet<span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>如果您对上面的写法感到十分困惑，不要着急，我们来分析 Node.js 的加载机制:</p>\n<p>首先，Node.js 会把整个待加载的 hello.js 文件放入一个包装函数 load 中执行。在执行这个 load()函数前，Node.js 准备好了 module 变量:</p>\n<div><pre><code><span>const</span> module <span>=</span> <span>{</span>\n  <span>id</span><span>:</span> <span>\"hello\"</span><span>,</span>\n  <span>exports</span><span>:</span> <span>{</span><span>}</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p><code>load()</code> 函数最终返回 <code>module.exports</code>:</p>\n<div><pre><code><span>const</span> <span>load</span> <span>=</span> <span>function</span> <span>(</span><span>exports<span>,</span> module</span><span>)</span> <span>{</span>\n    <span>// hello.js的文件内容</span>\n    <span>...</span>\n    <span>// load函数返回:</span>\n    <span>return</span> module<span>.</span>exports<span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> exported <span>=</span> <span>load</span><span>(</span>module<span>.</span>exports<span>,</span> module<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>也就是说，默认情况下，Node.js 准备的 <code>exports</code> 变量和 <code>module.exports</code> 变量实际上是同一个变量，并且初始化为空对象 <code>{}</code>，于是，我们可以写:</p>\n<div><pre><code>exports<span>.</span><span>foo</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"foo\"</span><span>;</span>\n<span>}</span><span>;</span>\nexports<span>.</span><span>bar</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"bar\"</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>也可以写:</p>\n<div><pre><code>module<span>.</span>exports<span>.</span><span>foo</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"foo\"</span><span>;</span>\n<span>}</span><span>;</span>\nmodule<span>.</span>exports<span>.</span><span>bar</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"bar\"</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>换句话说，Node.js 默认给您准备了一个空对象 <code>{}</code>，这样您可以直接往里面加东西。</p>\n<p>但是，如果我们要输出的是一个函数或数组，那么，只能给 <code>module.exports</code> 赋值:</p>\n<div><pre><code>module<span>.</span><span>exports</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"foo\"</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>给 <code>exports</code> 赋值是无效的，因为赋值后，<code>module.exports</code> 仍然是空对象 <code>{}</code>。</p>\n<h2 id=\"结论\" tabindex=\"-1\"> 结论</h2>\n<p>如果要输出一个键值对象 <code>{}</code>，可以利用 <code>exports</code> 这个已存在的空对象 <code>{}</code>，并继续在上面添加新的键值；</p>\n<p>如果要输出一个函数或数组，必须直接对 <code>module.exports</code> 对象赋值。</p>\n<p>所以我们可以得出结论: 直接对 <code>module.export</code>s 赋值，可以应对任何情况:</p>\n<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>\n  <span>foo</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>\"foo\"</span><span>;</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>或者:</p>\n<div><pre><code>module<span>.</span><span>exports</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"foo\"</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>最终，我们强烈建议使用 <code>module.exports = xxx</code> 的方式来输出模块变量，这样，您只需要记忆一种方法。</p>\n",
      "date_published": "2022-06-14T04:47:46.000Z",
      "date_modified": "2022-06-14T04:47:46.000Z",
      "authors": [],
      "tags": [
        "Node.js"
      ]
    },
    {
      "title": "API",
      "url": "https://mrhope.site/code/mini-app/guide/service/api/",
      "id": "https://mrhope.site/code/mini-app/guide/service/api/",
      "summary": "小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。详细介绍请参考 API 文档。 Content not supported\n",
      "content_html": "<p>小程序开发框架提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。详细介绍请参考 <a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/\" target=\"_blank\" rel=\"noopener noreferrer\">API 文档</a>。 <i>Content not supported</i></p>\n\n<p>通常，在小程序 API 有以下几种类型:</p>\n<h2 id=\"事件监听-api\" tabindex=\"-1\"> 事件监听 API</h2>\n<p>我们约定，以 on 开头的 API 用来监听某个事件是否触发，如: <code>wx.onSocketOpen</code>, <code>wx.onCompassChange</code> 等。</p>\n<p>这类 API 接受一个回调函数作为参数，当事件触发时会调用这个回调函数，并将相关数据以参数形式传入。</p>\n<div><pre><code>wx<span>.</span><span>onCompassChange</span><span>(</span><span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>res<span>.</span>direction<span>)</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h2 id=\"同步-api\" tabindex=\"-1\"> 同步 API</h2>\n<p>我们约定，以 <code>Sync</code> 结尾的 API 都是同步 API， 如 <code>wx.setStorageSync</code>，<code>wx.getSystemInfoSync</code> 等。此外，也有一些其他的同步 API，如 <code>wx.createWorker</code>, <code>wx.getBackgroundAudioManager</code> 等，详情参见 API 文档中的说明。</p>\n<p>同步 API 的执行结果可以通过函数返回值直接获取，如果执行出错会抛出异常。</p>\n<div><pre><code><span>try</span> <span>{</span>\n  wx<span>.</span><span>setStorageSync</span><span>(</span><span>\"key\"</span><span>,</span> <span>\"value\"</span><span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>\n  console<span>.</span><span>error</span><span>(</span>e<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"异步-api\" tabindex=\"-1\"> 异步 API</h2>\n<p>大多数 API 都是异步 API，如 <code>wx.request</code>，<code>wx.login</code> 等。这类 API 接口通常都接受一个 <code>Object</code> 类型的参数，这个参数都支持按需指定以下字段来接收接口调用结果:</p>\n<h3 id=\"object-参数说明\" tabindex=\"-1\"> Object 参数说明</h3>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>类型</th>\n<th>必填</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>success</td>\n<td>function</td>\n<td>否</td>\n<td>接口调用成功的回调函数</td>\n</tr>\n<tr>\n<td>fail</td>\n<td>function</td>\n<td>否</td>\n<td>接口调用失败的回调函数</td>\n</tr>\n<tr>\n<td>complete</td>\n<td>function</td>\n<td>否</td>\n<td>接口调用结束的回调函数(调用成功、失败都会执行)</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>Any</td>\n<td>-</td>\n<td>接口定义的其他参数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"回调函数的参数\" tabindex=\"-1\"> 回调函数的参数</h3>\n<p><code>success</code>, <code>fail</code>, <code>complete</code> 函数调用时会传入一个 <code>Object</code> 类型参数，包含以下字段:</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>errMsg</td>\n<td>string</td>\n<td>错误信息，如果调用成功返回 <code>${apiName}:ok</code></td>\n</tr>\n<tr>\n<td>errCode</td>\n<td>number</td>\n<td>错误码，仅部分 API 支持，具体含义请参考对应 API 文档，成功时为 0。</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>Any</td>\n<td>接口返回的其他数据</td>\n</tr>\n</tbody>\n</table>\n<p>异步 API 的执行结果需要通过 <code>Object</code> 类型的参数中传入的对应回调函数获取。部分异步 API 也会有返回值，可以用来实现更丰富的功能，如 <code>wx.request</code>, <code>wx.connectSocke</code>t` 等。</p>\n<div><pre><code>wx<span>.</span><span>login</span><span>(</span><span>{</span>\n  <span>success</span><span>:</span> <span>(</span><span>res</span><span>)</span> <span>=></span> <span>{</span>\n    console<span>.</span><span>log</span><span>(</span>res<span>.</span>code<span>)</span><span>;</span>\n  <span>}</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>注意</p>\n<p>异步函数会在异步动作进行完之后，触发对应设置好的回调函数，所以此时的函数执行已经脱离了正常 js 的执行上下文。</p>\n<p>如果对上面的话不理解，请务必查阅<strong>什么是同步/异步函数</strong>。</p>\n</div>\n<h2 id=\"常见-api\" tabindex=\"-1\"> 常见 API</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/route.html\">路由</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/storage.html\">数据缓存</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/interact.html\">交互</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/network.html\">网络</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/system.html\">系统信息</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-05-04T19:02:05.000Z",
      "date_modified": "2022-06-14T04:47:46.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "启动另一个 activity",
      "url": "https://mrhope.site/code/Android/get-started/activity.html",
      "id": "https://mrhope.site/code/Android/get-started/activity.html",
      "summary": "在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。\n",
      "content_html": "<p>在本课中，您将向 MainActivity 添加一些代码，以便在用户点按 Send 按钮时启动一个显示消息的新 activity。</p>\n\n<h2 id=\"响应-send-按钮\" tabindex=\"-1\"> 响应“Send”按钮</h2>\n<p>您可按照以下步骤，向 MainActivity 类添加一个在用户点按 Send 按钮时调用的方法：</p>\n<ol>\n<li>\n<p>在 app &gt; java &gt; com.example.myfirstapp &gt; MainActivity 文件中，添加以下 sendMessage() 方法桩：</p>\n<CodeTabs id=\"15\" :data='[{\"title\":\"Kotlin\"},{\"title\":\"Java\"}]' tab-id=\"anrdoid\">\n\n<template #tab0=\"{ title, value, isActive }\">\n<div><pre><code><span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>\n        <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>\n    <span>}</span>\n\n    <span>/** Called when the user taps the Send button */</span>\n    <span>fun</span> <span>sendMessage</span><span>(</span>view<span>:</span> View<span>)</span> <span>{</span>\n        <span>// Do something in response to button</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n<template #tab1=\"{ title, value, isActive }\">\n<div><pre><code><span>public</span> <span>class</span> <span>MainActivity</span> <span>extends</span> <span>AppCompatActivity</span> <span>{</span>\n    <span>@Override</span>\n    <span>protected</span> <span>void</span> <span>onCreate</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span><span>;</span>\n        <span>setContentView</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>activity_main<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/** Called when the user taps the Send button */</span>\n    <span>public</span> <span>void</span> <span>sendMessage</span><span>(</span><span>View</span> view<span>)</span> <span>{</span>\n        <span>// Do something in response to button</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n</CodeTabs>\n<p>您可能会看到一条错误，因为 Android Studio 无法解析用作方法参数的 View 类。若要清除错误，请点击 View 声明，将光标置于其上，然后按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Enter</code>）进行快速修复。如果出现一个菜单，请选择 Import class。</p>\n</li>\n<li>\n<p>返回到 activity_main.xml 文件，并从该按钮调用此方法:</p>\n<ol>\n<li>选择布局编辑器中的相应按钮。</li>\n<li>在 Attributes 窗口中，找到 onClick 属性，并从其下拉列表中选择 <code>sendMessage [MainActivity]</code>。</li>\n</ol>\n<p>现在，当用户点按该按钮时，系统将调用 <code>sendMessage()</code> 方法。</p>\n<p>请注意此方法中提供的详细信息。系统需要这些信息来识别此方法是否与 android:onClick 属性兼容。具体来说，此方法具有以下特性：</p>\n<ol>\n<li>公开。</li>\n<li>返回值为空，或在 Kotlin 中为隐式 Unit。</li>\n<li>View 是唯一的参数。这是您在第 1 步结束时点击的 View 对象。</li>\n</ol>\n</li>\n<li>\n<p>接下来，填写此方法，以读取文本字段的内容，并将该文本传递给另一个 activity。</p>\n</li>\n</ol>\n<h2 id=\"构建一个-intent\" tabindex=\"-1\"> 构建一个 intent</h2>\n<p><code>Intent</code> 是在相互独立的组件（如两个 activity）之间提供运行时绑定功能的对象。Intent 表示应用执行某项操作的意图。您可以使用 intent 执行多种任务，但在本课中，您的 intent 将用于启动另一个 activity。</p>\n<p>在 MainActivity 中，添加 EXTRA_MESSAGE 常量和 sendMessage() 代码，如下所示：</p>\n<CodeTabs id=\"82\" :data='[{\"title\":\"Kotlin\"},{\"title\":\"Java\"}]' tab-id=\"anrdoid\">\n\n<template #tab0=\"{ title, value, isActive }\">\n<div><pre><code><span>const</span> <span>val</span> EXTRA_MESSAGE <span>=</span> <span><span>\"com.example.myfirstapp.MESSAGE\"</span></span>\n\n<span>class</span> MainActivity <span>:</span> <span>AppCompatActivity</span><span>(</span><span>)</span> <span>{</span>\n    <span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>\n        <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_main<span>)</span>\n    <span>}</span>\n\n    <span>/** Called when the user taps the Send button */</span>\n    <span>fun</span> <span>sendMessage</span><span>(</span>view<span>:</span> View<span>)</span> <span>{</span>\n        <span>val</span> editText <span>=</span> findViewById<span>&lt;</span>EditText<span>></span><span>(</span>R<span>.</span>id<span>.</span>editTextTextPersonName<span>)</span>\n        <span>val</span> message <span>=</span> editText<span>.</span>text<span>.</span><span>toString</span><span>(</span><span>)</span>\n        <span>val</span> intent <span>=</span> <span>Intent</span><span>(</span><span>this</span><span>,</span> DisplayMessageActivity<span>::</span><span>class</span><span>.</span>java<span>)</span><span>.</span><span>apply</span> <span>{</span>\n            <span>putExtra</span><span>(</span>EXTRA_MESSAGE<span>,</span> message<span>)</span>\n        <span>}</span>\n        <span>startActivity</span><span>(</span>intent<span>)</span>\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n<template #tab1=\"{ title, value, isActive }\">\n<div><pre><code><span>public</span> <span>class</span> <span>MainActivity</span> <span>extends</span> <span>AppCompatActivity</span> <span>{</span>\n    <span>public</span> <span>static</span> <span>final</span> <span>String</span> <span>EXTRA_MESSAGE</span> <span>=</span> <span>\"com.example.myfirstapp.MESSAGE\"</span><span>;</span>\n    <span>@Override</span>\n    <span>protected</span> <span>void</span> <span>onCreate</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n        <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span><span>;</span>\n        <span>setContentView</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>activity_main<span>)</span><span>;</span>\n    <span>}</span>\n\n    <span>/** Called when the user taps the Send button */</span>\n    <span>public</span> <span>void</span> <span>sendMessage</span><span>(</span><span>View</span> view<span>)</span> <span>{</span>\n        <span>Intent</span> intent <span>=</span> <span>new</span> <span>Intent</span><span>(</span><span>this</span><span>,</span> <span>DisplayMessageActivity</span><span>.</span><span>class</span><span>)</span><span>;</span>\n        <span>EditText</span> editText <span>=</span> <span>(</span><span>EditText</span><span>)</span> <span>findViewById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>editTextTextPersonName<span>)</span><span>;</span>\n        <span>String</span> message <span>=</span> editText<span>.</span><span>getText</span><span>(</span><span>)</span><span>.</span><span>toString</span><span>(</span><span>)</span><span>;</span>\n        intent<span>.</span><span>putExtra</span><span>(</span><span>EXTRA_MESSAGE</span><span>,</span> message<span>)</span><span>;</span>\n        <span>startActivity</span><span>(</span>intent<span>)</span><span>;</span>\n    <span>}</span>\n<span>}</span>\n\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n</CodeTabs>\n<p>预计 Android Studio 会再次遇到 Cannot resolve symbol 错误。如需清除这些错误，请按 Alt+Enter（在 Mac 上则按 Option+Return）。您最后应导入以下内容：</p>\n<CodeTabs id=\"93\" :data='[{\"title\":\"Kotlin\"},{\"title\":\"Java\"}]' tab-id=\"anrdoid\">\n\n<template #tab0=\"{ title, value, isActive }\">\n<div><pre><code><span>import</span> androidx<span>.</span>appcompat<span>.</span>app<span>.</span>AppCompatActivity\n<span>import</span> android<span>.</span>content<span>.</span>Intent\n<span>import</span> android<span>.</span>os<span>.</span>Bundle\n<span>import</span> android<span>.</span>view<span>.</span>View\n<span>import</span> android<span>.</span>widget<span>.</span>EditText\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></template>\n<template #tab1=\"{ title, value, isActive }\">\n<div><pre><code><span>import</span> <span><span>androidx<span>.</span>appcompat<span>.</span>app<span>.</span></span><span>AppCompatActivity</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>content<span>.</span></span><span>Intent</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>os<span>.</span></span><span>Bundle</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>view<span>.</span></span><span>View</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>widget<span>.</span></span><span>EditText</span></span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div></template>\n</CodeTabs>\n<p>DisplayMessageActivity 仍有错误，但没有关系。您将在下一部分中修复该错误。</p>\n<p>sendMessage() 将发生以下情况：</p>\n<ul>\n<li>\n<p>Intent 构造函数会获取两个参数：Context 和 Class。</p>\n<p>首先使用 Context 参数，因为 Activity 类是 Context 的子类。</p>\n<p>在本例中，系统将 Intent, 传递到的应用组件的 Class 参数是要启动的 activity。</p>\n</li>\n<li>\n<p>putExtra() 方法将 EditText 的值添加到 intent。Intent 能够以称为“extra”的键值对形式携带数据类型。</p>\n<p>您的键是一个公共常量 EXTRA_MESSAGE，因为下一个 activity 将使用该键检索文本值。为 intent extra 定义键时，最好使用应用的软件包名称作为前缀。这样可以确保这些键是独一无二的，这在您的应用需要与其他应用进行交互时会很重要。</p>\n</li>\n<li>\n<p>startActivity() 方法将启动一个由 Intent 指定的 DisplayMessageActivity 实例。接下来，您需要创建该类。</p>\n</li>\n</ul>\n<div>\n<p>提示</p>\n<p>导航架构组件允许您使用导航编辑器将一个 activity 与另一个 activity 相关联。建立这种关联后，您可以利用 API 在用户触发关联的操作（例如，用户点击某个按钮时）时启动第二个 activity。如需了解详情，请参阅导航。</p>\n</div>\n<h2 id=\"创建第二个-activity\" tabindex=\"-1\"> 创建第二个 activity</h2>\n<p>若要创建第二个 activity，请按以下步骤操作：</p>\n<ol>\n<li>在 Project 窗口中，右键点击 app 文件夹，然后依次选择 New &gt; Activity &gt; Empty Activity。</li>\n<li>在 Configure Activity 窗口中，输入“DisplayMessageActivity”作为 Activity Name。将所有其他属性保留为默认设置，然后点击 Finish。</li>\n</ol>\n<p>Android Studio 会自动执行下列三项操作：</p>\n<ol>\n<li>创建 DisplayMessageActivity 文件。</li>\n<li>创建 DisplayMessageActivity 文件对应的布局文件 activity_display_message.xml。</li>\n<li>在 AndroidManifest.xml 中添加所需的 <code>&lt;activity&gt;</code> 元素。</li>\n</ol>\n<p>如果您运行应用并点按第一个 activity 上的按钮，将启动第二个 activity，但它为空。这是因为第二个 activity 使用模板提供的空布局。</p>\n<h2 id=\"添加文本视图\" tabindex=\"-1\"> 添加文本视图</h2>\n<p>新 activity 包含一个空白布局文件。请按以下步骤操作，在显示消息的位置添加一个文本视图：</p>\n<ol>\n<li>打开 app &gt; res &gt; layout &gt; activity_display_message.xml 文件。</li>\n<li>点击工具栏中的 Enable Autoconnection to Parent 。系统将启用 Autoconnect。参见图 1。</li>\n<li>在 Palette 面板中，点击 Text，将 TextView 拖动到布局中，然后将其放置在靠近布局顶部中心的位置，使其贴靠到出现的垂直线上。Autoconnect 将添加左侧和右侧约束条件，以便将该视图放置在水平中心位置。</li>\n<li>再创建一个从文本视图顶部到布局顶部的约束条件，使该视图如图 1 中所示。</li>\n</ol>\n<p>或者，您可以对文本样式进行一些调整，方法是在 Attributes 窗口的 Common Attributes 面板中展开 textAppearance，然后更改 textSize 和 textColor 等属性。</p>\n<h2 id=\"显示消息\" tabindex=\"-1\"> 显示消息</h2>\n<p>在此步骤中，您将修改第二个 activity 以显示第一个 activity 传递的消息。</p>\n<ol>\n<li>\n<p>在 DisplayMessageActivity 中，将以下代码添加到 <code>onCreate()</code> 方法中：</p>\n<CodeTabs id=\"221\" :data='[{\"title\":\"Kotlin\"},{\"title\":\"Java\"}]' tab-id=\"anrdoid\">\n\n<template #tab0=\"{ title, value, isActive }\">\n<div><pre><code><span>override</span> <span>fun</span> <span>onCreate</span><span>(</span>savedInstanceState<span>:</span> Bundle<span>?</span><span>)</span> <span>{</span>\n    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span>\n    <span>setContentView</span><span>(</span>R<span>.</span>layout<span>.</span>activity_display_message<span>)</span>\n\n    <span>// Get the Intent that started this activity and extract the string</span>\n    <span>val</span> message <span>=</span> intent<span>.</span><span>getStringExtra</span><span>(</span>EXTRA_MESSAGE<span>)</span>\n\n    <span>// Capture the layout's TextView and set the string as its text</span>\n    <span>val</span> textView <span>=</span> findViewById<span>&lt;</span>TextView<span>></span><span>(</span>R<span>.</span>id<span>.</span>textView<span>)</span><span>.</span><span>apply</span> <span>{</span>\n        text <span>=</span> message\n    <span>}</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n<template #tab1=\"{ title, value, isActive }\">\n<div><pre><code><span>@Override</span>\n<span>protected</span> <span>void</span> <span>onCreate</span><span>(</span><span>Bundle</span> savedInstanceState<span>)</span> <span>{</span>\n    <span>super</span><span>.</span><span>onCreate</span><span>(</span>savedInstanceState<span>)</span><span>;</span>\n    <span>setContentView</span><span>(</span><span>R</span><span>.</span>layout<span>.</span>activity_display_message<span>)</span><span>;</span>\n\n    <span>// Get the Intent that started this activity and extract the string</span>\n    <span>Intent</span> intent <span>=</span> <span>getIntent</span><span>(</span><span>)</span><span>;</span>\n    <span>String</span> message <span>=</span> intent<span>.</span><span>getStringExtra</span><span>(</span><span>MainActivity</span><span>.</span><span>EXTRA_MESSAGE</span><span>)</span><span>;</span>\n\n    <span>// Capture the layout's TextView and set the string as its text</span>\n    <span>TextView</span> textView <span>=</span> <span>findViewById</span><span>(</span><span>R</span><span>.</span>id<span>.</span>textView<span>)</span><span>;</span>\n    textView<span>.</span><span>setText</span><span>(</span>message<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>\n</CodeTabs>\n</li>\n<li>\n<p>按 <code>Alt + Enter</code>（在 Mac 上则按 <code>Option + Return</code>）导入其他所需的类：</p>\n<CodeTabs id=\"234\" :data='[{\"title\":\"Kotlin\"},{\"title\":\"Java\"}]' tab-id=\"anrdoid\">\n\n<template #tab0=\"{ title, value, isActive }\">\n<div><pre><code><span>import</span> androidx<span>.</span>appcompat<span>.</span>app<span>.</span>AppCompatActivity\n<span>import</span> android<span>.</span>content<span>.</span>Intent\n<span>import</span> android<span>.</span>os<span>.</span>Bundle\n<span>import</span> android<span>.</span>widget<span>.</span>TextView\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></template>\n<template #tab1=\"{ title, value, isActive }\">\n<div><pre><code><span>import</span> <span><span>androidx<span>.</span>appcompat<span>.</span>app<span>.</span></span><span>AppCompatActivity</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>content<span>.</span></span><span>Intent</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>os<span>.</span></span><span>Bundle</span></span><span>;</span>\n<span>import</span> <span><span>android<span>.</span>widget<span>.</span></span><span>TextView</span></span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div></template>\n</CodeTabs>\n</li>\n</ol>\n<h2 id=\"添加向上导航功能\" tabindex=\"-1\"> 添加向上导航功能</h2>\n<p>在您的应用中，不是主入口点的每个屏幕（所有不是主屏幕的屏幕）都必须提供导航功能，以便将用户引导至应用层次结构中的逻辑父级屏幕。为此，请在应用栏中添加向上按钮。</p>\n<p>若要添加向上按钮，您需要在 <code>AndroidManifest.xml</code> 文件中声明哪个 activity 是逻辑父级。打开 app &gt; manifests &gt; AndroidManifest.xml 文件，找到 DisplayMessageActivity 的 <code>&lt;activity&gt;</code> 标记，然后将其替换为以下代码：</p>\n<div><pre><code><span><span><span>&lt;</span>activity</span> <span><span>android:</span>name</span><span><span>=</span><span>\"</span>.DisplayMessageActivity<span>\"</span></span>\n          <span><span>android:</span>parentActivityName</span><span><span>=</span><span>\"</span>.MainActivity<span>\"</span></span><span>></span></span>\n    <span>&lt;!-- The meta-data tag is required if you support API level 15 and lower --></span>\n    <span><span><span>&lt;</span>meta-data</span>\n        <span><span>android:</span>name</span><span><span>=</span><span>\"</span>android.support.PARENT_ACTIVITY<span>\"</span></span>\n        <span><span>android:</span>value</span><span><span>=</span><span>\"</span>.MainActivity<span>\"</span></span> <span>/></span></span>\n<span><span><span>&lt;/</span>activity</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>Android 系统现在会自动向应用栏添加向上按钮。</p>\n<h2 id=\"运行应用\" tabindex=\"-1\"> 运行应用</h2>\n<p>点击工具栏中的 Apply Changes 以运行应用。当应用打开后，在文本字段中输入一条消息，点按 Send 即会看到该消息显示在第二个 activity 中。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2022-05-28T16:24:21.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "创建项目",
      "url": "https://mrhope.site/code/Android/get-started/create.html",
      "id": "https://mrhope.site/code/Android/get-started/create.html",
      "content_html": "<p>本课将介绍如何使用 Android Studio 创建新的 Android 项目，并介绍该项目中的一些文件。</p>\n<p>如需创建新的 Android 项目，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>安装最新版 Android Studio。</p>\n</li>\n<li>\n<p>在 Welcome to Android Studio 窗口中，点击 Create New Project。</p>\n<p>如果您已打开一个项目，请依次选择 File &gt; New &gt; New Project。</p>\n</li>\n<li>\n<p>在 Select a Project Template 窗口中，选择 Empty Activity，然后点击 Next。</p>\n</li>\n<li>\n<p>在 Configure your project 窗口中，完成以下操作：</p>\n<ul>\n<li>\n<p>在 Name 字段中输入“My First App”。</p>\n</li>\n<li>\n<p>在 Package name 字段中输入“com.example.myfirstapp”。</p>\n</li>\n<li>\n<p>如果您想将项目放在其他文件夹中，请更改其 Save 位置。</p>\n</li>\n<li>\n<p>从 Language 下拉菜单中选择 Java 或 Kotlin。</p>\n</li>\n<li>\n<p>在 Minimum SDK 字段中选择您希望应用支持的最低 Android 版本。</p>\n</li>\n</ul>\n<div>\n<p>提示</p>\n<p>点击 Help me choose 链接可打开 Android Platform/API Version Distribution 对话框。此对话框会提供有关各 Android 版本在设备间的分布情况的信息。您需要权衡的主要因素是，您想支持的 Android 设备所占的百分比，以及在这些设备所搭载的各个不同版本上维护应用所需的工作量。例如，如果您选择让应用与多个不同 Android 版本兼容，那么维护最旧版本与最新版本之间的兼容性所需的工作量就会增大。</p>\n</div>\n<ul>\n<li>\n<p>如果您的应用需要旧版库支持，请选中 Use legacy android.support libraries 复选框。</p>\n</li>\n<li>\n<p>其他选项保持原样。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>点击 Finish。</p>\n</li>\n</ol>\n<p>经过一段时间的处理后，Android Studio 主窗口会出现。</p>\n<p>下面花一点时间了解一下最重要的文件。</p>\n<p>首先，确保已打开 Project 窗口（依次选择 View &gt; Tool Windows &gt; Project），并从该窗口顶部的下拉列表中选择 Android 视图。随后，您可以看到以下文件：</p>\n<ul>\n<li>\n<p>app &gt; java &gt; com.example.myfirstapp &gt; MainActivity</p>\n<p>这是主 activity。它是应用的入口点。当您构建和运行应用时，系统会启动此 Activity 的实例并加载其布局。</p>\n</li>\n<li>\n<p>app &gt; res &gt; layout &gt; activity_main.xml</p>\n<p>此 XML 文件定义了 activity 界面 (UI) 的布局。它包含一个 TextView 元素，其中具有“Hello, World!”文本</p>\n</li>\n<li>\n<p>app &gt; manifests &gt; AndroidManifest.xml</p>\n<p>清单文件描述了应用的基本特性并定义了每个应用组件。</p>\n</li>\n<li>\n<p>Gradle Scripts &gt; build.gradle</p>\n<p>有两个使用此名称的文件：一个针对项目“Project: My First App”，另一个针对应用模块“Module: My_First_App.app”。每个模块均有自己的 build.gradle 文件，但此项目当前仅有一个模块。使用每个模块的 build.gradle 文件控制 Gradle 插件构建应用的方式。如需详细了解此文件，请参阅配置 build。</p>\n</li>\n</ul>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2022-04-01T16:05:53.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "构建简单的界面",
      "url": "https://mrhope.site/code/Android/get-started/interface.html",
      "id": "https://mrhope.site/code/Android/get-started/interface.html",
      "summary": "在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。\n",
      "content_html": "<p>在本节课中，您将学习如何使用 Android Studio 布局编辑器创建包含一个文本框和一个按钮的布局。这将为下一课打下基础，下节课将学习如何在点按该按钮时让应用将文本框的内容发送到其他 activity。</p>\n\n<p>Android 应用的界面 (UI) 以布局和微件的层次结构形式构建而成。布局是 ViewGroup 对象，即控制其子视图在屏幕上的放置方式的容器。微件是 View 对象，即按钮和文本框等界面组件。</p>\n<p><img src=\"@source/code/Android/get-started/assets/viewgroup.png\" alt=\"ViewGroup\"></p>\n<p>Android 提供了 ViewGroup 和 View 类的 XML 词汇表，因此界面的大部分内容都在 XML 文件中定义。不过，本节课将向您介绍如何使用 Android Studio 的布局编辑器创建布局，而不是教您编写 XML 代码。布局编辑器会在您拖放视图构建布局时为您编写 XML 代码。</p>\n<h2 id=\"打开布局编辑器\" tabindex=\"-1\"> 打开布局编辑器</h2>\n<p>首先，请按照以下步骤设置工作区：</p>\n<ol>\n<li>在 Project 窗口中，依次打开 app &gt; res &gt; layout &gt; activity_main.xml。</li>\n<li>若要给布局编辑器留出空间，请隐藏 Project 窗口。为此，请依次选择 View &gt; Tool Windows &gt; Project，或直接点击 Android Studio 屏幕左侧的 Project。</li>\n<li>如果您的编辑器显示 XML 源代码，请点击窗口右上角的 Design 标签页。</li>\n<li>点击 (Select Design Surface)，然后选择 Blueprint。</li>\n<li>点击布局编辑器工具栏中的 (View Options)，并确保选中 Show All Constraints。</li>\n<li>确保 Autoconnect 处于关闭状态。当 Autoconnect 处于关闭状态时，工具栏中的提示会显示 (Enable Autoconnection to Parent)。</li>\n<li>点击工具栏中的 (Default Margins)，然后选择 16。如果需要，您可以稍后调整每个视图的外边距。</li>\n<li>点击工具栏中的 (Device for Preview)，然后选择 5.5, 1440 × 2560, 560 dpi (Pixel XL)。</li>\n</ol>\n<p>您的布局编辑器现在如下图所示。</p>\n<p><img src=\"@source/code/Android/get-started/assets/layout-editor.png\" alt=\"布局编辑器\"></p>\n<p>左下方的 Component Tree 面板显示布局的视图层次结构。在本例中，根视图是 ConstraintLayout，它仅包含一个 TextView 对象。</p>\n<p>ConstraintLayout 是一种布局，它根据同级视图和父布局的约束条件定义每个视图的位置。这样一来，使用扁平视图层次结构既可以创建简单布局，又可以创建复杂布局。这种布局无需嵌套布局。嵌套布局是布局内的布局（如图 2 所示），会增加绘制界面所需的时间。</p>\n<p>例如，您可以声明以下布局，如下图所示：</p>\n<ul>\n<li>视图 A 距离父布局顶部 16 dp。</li>\n<li>视图 A 距离父布局左侧 16 dp。</li>\n<li>视图 B 距离视图 A 右侧 16 dp。</li>\n<li>视图 B 与视图 A 顶部对齐。</li>\n</ul>\n<p><img src=\"@source/code/Android/get-started/assets/constraint-example.png\" alt=\"布局示例\"></p>\n<h2 id=\"添加文本框\" tabindex=\"-1\"> 添加文本框</h2>\n<p>请按照下面的步骤添加文本框：</p>\n<ol>\n<li>首先，您需要移除布局中已有的内容。在 Component Tree 面板中点击 TextView，然后按 Delete 键。</li>\n<li>在 Palette 面板中，点击 Text 以显示可用的文本控件。</li>\n<li>将 Plain Text 拖动到设计编辑器中，并将其放在靠近布局顶部的位置。这是一个接受纯文本输入的 EditText 微件。</li>\n<li>点击设计编辑器中的视图。现在，您可以在每个角上看到调整视图大小的正方形手柄，并在每个边上看到圆形约束锚点。为了更好地控制，您可能需要放大编辑器。为此，请使用布局编辑器工具栏中的 Zoom 按钮。</li>\n<li>点击并按住顶边上的锚点，将其向上拖动，直至其贴靠到布局顶部，然后将其释放。这是一个约束条件：它会将视图约束在已设置的默认外边距内。在本例中，您将其设置为距离布局顶部 16 dp。</li>\n<li>使用相同的过程创建一个从视图左侧到布局左侧的约束条件。</li>\n</ol>\n<h2 id=\"添加按钮\" tabindex=\"-1\"> 添加按钮</h2>\n<ol>\n<li>在 Palette 面板中，点击 Buttons。</li>\n<li>将 Button 微件拖到设计编辑器中，并将其放在靠近右侧的位置。</li>\n<li>创建一个从按钮左侧到文本框右侧的约束条件。</li>\n<li>如需按水平对齐约束视图，请创建一个文本基线之间的约束条件。为此，请右键点击按钮，然后选择 Show Baseline 在布局编辑器中显示基准操作。基线锚点显示在按钮内部。点击并按住此锚点，然后将其拖动到相邻文本框中显示的基线锚点上。</li>\n</ol>\n<div>\n<p>提示</p>\n<p>您还可以根据顶边或底边实现水平对齐。但按钮的图片周围有内边距，因此如果以这种方式对齐，那么它们看上去是没有对齐的。</p>\n</div>\n<h2 id=\"更改界面字符串\" tabindex=\"-1\"> 更改界面字符串</h2>\n<p>若要预览界面，请点击工具栏中的 (Select Design Surface)，然后选择 Design。请注意，文本输入和按钮标签应设置为默认值。</p>\n<p>若要更改界面字符串，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>打开 Project 窗口，然后打开 app &gt; res &gt; values &gt; strings.xml。</p>\n<p>这是一个字符串资源文件，您可在此文件中指定所有界面字符串。您可以利用该文件在一个位置管理所有界面字符串，使字符串的查找、更新和本地化变得更加容易。</p>\n</li>\n<li>\n<p>点击窗口顶部的 Open editor。此时将打开 Translations Editor，它提供了一个可以添加和修改默认字符串的简单界面。它还有助于让所有已翻译的字符串井然有序。</p>\n</li>\n<li>\n<p>点击 (Add Key) 可以创建一个新字符串作为文本框的“提示文本”。此时会打开如图 7 所示的窗口。</p>\n<p>在 Add Key 对话框中，完成以下步骤：</p>\n<ul>\n<li>在 Key 字段中输入“edit_message”。</li>\n<li>在 Default Value 字段中输入“Enter a message”。</li>\n<li>点击 OK。</li>\n</ul>\n</li>\n<li>\n<p>再添加一个名为“button_send”且值为“Send”的键。</p>\n</li>\n</ol>\n<p>现在，您可以为每个视图设置这些字符串。若要返回布局文件，请点击标签页栏中的 activity_main.xml。然后，添加字符串，如下所示：</p>\n<ol>\n<li>点击布局中的文本框。如果右侧还未显示 Attributes 窗口，请点击右侧边栏上的 Attributes。</li>\n<li>找到 text 属性（当前设为“Name”）并删除相应的值。</li>\n<li>找到 hint 属性，然后点击文本框右侧的 (Pick a Resource)。在显示的对话框中，双击列表中的 edit_message。</li>\n<li>点击布局中的按钮，找到其 text 属性（当前设为“Button”）。然后点击 (Pick a Resource)，并选择 button_send。</li>\n</ol>\n<h2 id=\"让文本框大小可灵活调整\" tabindex=\"-1\"> 让文本框大小可灵活调整</h2>\n<p>若要创建一个适应不同屏幕尺寸的布局，您需要让文本框拉伸以填充去除按钮和外边距后剩余的所有水平空间。</p>\n<p>继续操作之前，请点击工具栏中的 (Select Design Surface)，然后选择 Blueprint。</p>\n<p>若要让文本框大小可灵活调整，请按以下步骤操作：</p>\n<ol>\n<li>\n<p>选择两个视图。若要执行此操作，请点击一个视图，在按住 Shift 键的同时点击另一个视图，然后右键点击任一视图并依次选择 Chains &gt; Create Horizontal Chain。布局随即显示出来，如图 8 所示。</p>\n<div>\n<p>相关信息</p>\n<p>链是两个或多个视图之间的双向约束条件，可让您采用一致的方式安排链接的视图。</p>\n</div>\n</li>\n<li>\n<p>选择按钮并打开 Attributes 窗口。然后使用 Constraint Widget 将右外边距设为 16 dp。\n点击文本框以查看其属性。然后，点击宽度指示器两次，确保将其设置为锯齿状线 (Match Constraints)，如图 9 中的标注 1 所示。</p>\n</li>\n<li>\n<p>“Match constraints”表示宽度将延长以符合水平约束条件和外边距的定义。因此，文本框将拉伸以填充去除按钮和所有外边距后剩余的水平空间。</p>\n</li>\n</ol>\n<h2 id=\"运行应用\" tabindex=\"-1\"> 运行应用</h2>\n<p>如果已在上一课中将您的应用安装到设备上，只需点击工具栏中的 (Apply Changes)，即可使用新布局更新应用。或者点击 Run 'app' 以安装并运行应用。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2022-04-01T16:05:53.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "基础知识",
      "url": "https://mrhope.site/code/Android/get-started/intro.html",
      "id": "https://mrhope.site/code/Android/get-started/intro.html",
      "summary": "本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。\n开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应不同的设备。\n",
      "content_html": "<p>本部分介绍如何构建简单的 Android 应用。首先，您将了解如何通过 Android Studio 创建“Hello, World!”项目并运行它。然后，您将为应用创建一个新界面，该界面会接受用户输入，并切换到应用中的一个新屏幕以显示用户输入内容。</p>\n<p>开始之前，您需要了解有关 Android 应用的两个基本概念：它们如何提供多个入口点，以及它们如何适应不同的设备。</p>\n\n<h2 id=\"应用提供多个入口点\" tabindex=\"-1\"> 应用提供多个入口点</h2>\n<p>Android 应用都是将各种可单独调用的组件加以组合构建而成。例如，activity 是提供界面 (UI) 的一种应用组件。</p>\n<p>“主”activity 在用户点按您的应用图标时启动。您还可以将用户从其他位置（例如，从通知中，甚至从其他应用中）引导至某个 activity。</p>\n<p>其他组件（如 WorkManager）可使应用能够在没有界面的情况下执行后台任务。</p>\n<p>构建您的首个应用后，请参阅 [应用基础知识][] 来详细了解其他应用组件。</p>\n<h2 id=\"应用可适应不同的设备\" tabindex=\"-1\"> 应用可适应不同的设备</h2>\n<p>Android 允许您为不同的设备提供不同的资源。例如，您可以针对不同的屏幕尺寸创建不同的布局。系统会根据当前设备的屏幕尺寸确定要使用的布局。</p>\n<p>如果应用的任何功能需要使用特定的硬件（例如摄像头），您可以在运行时查询该设备是否具有该硬件，如果没有，则停用相应的功能。您可以指定应用需要使用特定的硬件，这样，Google Play 就不会允许在没有这些硬件的设备上安装应用。</p>\n<p>构建您的首个应用后，请参阅 [设备兼容性概览][] 来详细了解设备配置。</p>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2022-04-01T16:05:53.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "运行应用",
      "url": "https://mrhope.site/code/Android/get-started/run.html",
      "id": "https://mrhope.site/code/Android/get-started/run.html",
      "content_html": "<h2 id=\"在真实设备上运行\" tabindex=\"-1\"> 在真实设备上运行</h2>\n<p>按照以下步骤设置设备：</p>\n<ol>\n<li>\n<p>使用一根 USB 线将设备连接到开发机器。如果您是在 Windows 上开发的，则可能需要为设备安装合适的 USB 驱动程序。</p>\n</li>\n<li>\n<p>执行以下步骤，在开发者选项窗口中启用 USB 调试：</p>\n<ol>\n<li>\n<p>打开设置应用。</p>\n</li>\n<li>\n<p>如果您的设备使用 Android v8.0 或更高版本，请选择系统。否则，请继续执行下一步。</p>\n</li>\n<li>\n<p>滚动到底部，然后选择关于手机。</p>\n</li>\n<li>\n<p>滚动到底部，然后点按版本号七次。</p>\n</li>\n<li>\n<p>返回上一屏幕，滚动到底部，然后点按开发者选项。</p>\n</li>\n<li>\n<p>在开发者选项窗口中，向下滚动以查找并启用 USB 调试。</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>按照以下步骤操作，在设备上运行应用：</p>\n<ol>\n<li>\n<p>在 Android Studio 中，从工具栏中的运行/调试配置下拉菜单中选择您的应用。</p>\n</li>\n<li>\n<p>在工具栏中，从目标设备下拉菜单中选择要用来运行应用的设备。</p>\n</li>\n<li>\n<p>点击 Run 。</p>\n<p>Android Studio 会在已连接的设备上安装您的应用并启动它。您现在会看到设备上的应用中显示了“Hello, World!”。</p>\n</li>\n</ol>\n<h2 id=\"在模拟器上运行\" tabindex=\"-1\"> 在模拟器上运行</h2>\n<p>按照以下步骤操作，在模拟器上运行应用：</p>\n<ol>\n<li>\n<p>在 Android Studio 中创建一个 Android 虚拟设备 (AVD)，模拟器可以使用该设备安装和运行您的应用。</p>\n</li>\n<li>\n<p>在工具栏中，从运行/调试配置下拉菜单中选择您的应用。</p>\n</li>\n<li>\n<p>从目标设备下拉菜单中，选择要用来运行应用的 AVD。</p>\n</li>\n<li>\n<p>点击 Run 图标 。</p>\n<p>Android Studio 会在 AVD 上安装应用并启动模拟器。您现在会看到应用中显示了“Hello, World!”。</p>\n</li>\n</ol>\n",
      "date_published": "2022-04-01T00:00:00.000Z",
      "date_modified": "2022-04-01T16:05:53.000Z",
      "authors": [],
      "tags": [
        "Android",
        "快速上手"
      ]
    },
    {
      "title": "Angular",
      "url": "https://mrhope.site/code/angular/",
      "id": "https://mrhope.site/code/angular/",
      "summary": "Angular 是 Google 官方在 2016 年 9 月出品的一款框架。\n框架强制 Typescript，更倾向于大型项目。\n",
      "content_html": "<p>Angular 是 Google 官方在 2016 年 9 月出品的一款框架。</p>\n<p>框架强制 Typescript，更倾向于大型项目。</p>\n\n<div>\n<p>Angular 的优点</p>\n<ol>\n<li>零配置 CLI，享受到 webpack 每次升级的好处，但是不用关心任何 webpack config</li>\n<li>官方提供所有的必须组件(http、router、animation、ssr、e2e 等等)，在 2000+ 内部应用测试之后才会发布，基本零 bug，并且保证在未来很多年内一直保证兼容升级</li>\n<li>提供官方的应用市场和 low code 生成工具，一行命令就可以生成 Dashboard 和各种页面</li>\n<li>框架 100% 由 TypeScript 开发，并且生态内的所有三方库都是(只能用) TypeScript 开发</li>\n<li>内置 RxJS，并且从 View 的操作到 Http 全部都是 Reactive 的，可以随意组合</li>\n<li>每次升级只要运行一行命令就会帮您修复所有的可能的不兼容问题</li>\n<li>通过 Template 隔绝底层的 Compiler 升级成本，Compiler 迭代了三代，性能不断提升，bundle size 不断减少，但是用户代码一行不用改</li>\n</ol>\n</div>\n<p>Angular 写起来其实是有诸多限制的，但是对企业的大型项目来说，这些限制与规范会带来多人协同开发和后期维护上的简便。</p>\n<p>如果您在前端框架上追求的更多是: 升级稳定、标准统一、长期维护成本低、协作方便，不需要频繁重构，Angular 的使用感受应该还是相当不错的，这也是为什么目前大量企业用户会选择 Angular 的原因。</p>\n<h2 id=\"相关链接\" tabindex=\"-1\"> 相关链接</h2>\n<ul>\n<li><a href=\"https://angular.io/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n<li><a href=\"https://angular.cn/docs\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n</ul>\n",
      "date_published": "2020-05-06T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "前端"
      ]
    },
    {
      "title": "MySQL",
      "url": "https://mrhope.site/software/mysql/",
      "id": "https://mrhope.site/software/mysql/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li><a href=\"/software/mysql/intro.html\">介绍</a></li>\n<li><a href=\"/software/mysql/compare.html\">5.7 版本与 8 的比较</a></li>\n</ul>\n",
      "date_published": "2022-02-12T05:50:30.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [
        {
          "name": "李欣桐"
        }
      ],
      "tags": []
    },
    {
      "title": "AJAX",
      "url": "https://mrhope.site/code/website/jQuery/ajax.html",
      "id": "https://mrhope.site/code/website/jQuery/ajax.html",
      "summary": "\n章节过时\n目前，一套代码已经可以在多个浏览器上运行良好了，所以 jQuery 的意义并不大。在 Node.js 中，我们使用 axios 来进行请求。\n\n",
      "content_html": "<div>\n<p>章节过时</p>\n<p>目前，一套代码已经可以在多个浏览器上运行良好了，所以 jQuery 的意义并不大。在 Node.js 中，我们使用 <a href=\"/code/node-js/package/axois.html\">axios</a> 来进行请求。</p>\n</div>\n\n<p>用 JavaScript 写 Ajax 前面已经介绍过了，主要问题就是不同浏览器需要写不同代码，并且状态和错误处理写起来很麻烦。</p>\n<p>用 jQuery 的相关对象来处理 AJAX，不但不需要考虑浏览器问题，代码也能大大简化。</p>\n<h2 id=\"ajax\" tabindex=\"-1\"> Ajax</h2>\n<p>jQuery 在全局对象 jQuery (也就是 <code>$</code>) 绑定了 <code>ajax()</code> 函数，可以处理 Ajax 请求。<code>ajax(url, settings)</code> 函数需要接收一个 URL 和一个可选的 settings 对象，常用的选项如下:</p>\n<ul>\n<li>\n<p>async: 是否异步执行 Ajax 请求，默认为 <code>true</code>；</p>\n</li>\n<li>\n<p>method: 发送的 Method，缺省为 <code>'GET'</code>，可指定为 <code>'POST'</code> 、<code>'PUT'</code> 等；</p>\n</li>\n<li>\n<p>contentType: 发送 POST 请求的格式，默认值为 <code>'application/x-www-form-urlencoded; charset=UTF-8'</code>，也可以指定为 <code>text/plain</code>、<code>application/json</code>；</p>\n</li>\n<li>\n<p>data: 发送的数据，可以是字符串、数组或 object。如果是 <code>GET</code> 请求，data 将被转换成 <code>query</code> 附加到 URL 上，如果是 <code>POST</code> 请求，根据 <code>contentType</code> 把 <code>data</code> 序列化成合适的格式；</p>\n</li>\n<li>\n<p>headers: 发送的额外的 HTTP 头，必须是一个 object；</p>\n</li>\n<li>\n<p>dataType: 接收的数据格式，可以指定为 <code>'html'</code>、<code>'xml'</code>、<code>'json'</code>、<code>'text'</code> 等，缺省情况下根据响应的 <code>Content-Type</code> 猜测。</p>\n</li>\n</ul>\n<p>下面的例子发送一个 <code>GET</code> 请求，并返回一个 JSON 格式的数据:</p>\n<div><pre><code><span>const</span> jqxhr <span>=</span> $<span>.</span><span>ajax</span><span>(</span><span>\"/api/categories\"</span><span>,</span> <span>{</span>\n  <span>dataType</span><span>:</span> <span>\"json\"</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n<span>// 请求已经发送了</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>不过，如何用回调函数处理返回的数据和出错时的响应呢?</p>\n<p>还记得 Promise 对象吗? jQuery 的 <code>jqXHR</code> 对象类似一个 Promise 对象，我们可以用链式写法来处理各种回调:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>function</span> <span>ajaxLog</span><span>(</span><span>s</span><span>)</span> <span>{</span>\n  <span>const</span> txt <span>=</span> <span>$</span><span>(</span><span>\"#test-response-text\"</span><span>)</span><span>;</span>\n  txt<span>.</span><span>val</span><span>(</span>txt<span>.</span><span>val</span><span>(</span><span>)</span> <span>+</span> <span>\"\\n\"</span> <span>+</span> s<span>)</span><span>;</span>\n<span>}</span>\n\n<span>$</span><span>(</span><span>\"#test-response-text\"</span><span>)</span><span>.</span><span>val</span><span>(</span><span>\"\"</span><span>)</span><span>;</span>\n\n<span>const</span> jqxhr <span>=</span> $<span>.</span><span>ajax</span><span>(</span><span>\"/api/categories\"</span><span>,</span> <span>{</span>\n  <span>dataType</span><span>:</span> <span>\"json\"</span><span>,</span>\n<span>}</span><span>)</span>\n  <span>.</span><span>done</span><span>(</span><span>function</span> <span>(</span><span>data</span><span>)</span> <span>{</span>\n    <span>ajaxLog</span><span>(</span><span>\"成功, 收到的数据: \"</span> <span>+</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>)</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span>\n  <span>.</span><span>fail</span><span>(</span><span>function</span> <span>(</span><span>xhr<span>,</span> status</span><span>)</span> <span>{</span>\n    <span>ajaxLog</span><span>(</span><span>\"失败: \"</span> <span>+</span> xhr<span>.</span>status <span>+</span> <span>\", 原因: \"</span> <span>+</span> status<span>)</span><span>;</span>\n  <span>}</span><span>)</span>\n  <span>.</span><span>always</span><span>(</span><span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>ajaxLog</span><span>(</span><span>\"请求完成: 无论成功或失败都会调用\"</span><span>)</span><span>;</span>\n  <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"get\" tabindex=\"-1\"> get</h2>\n<p>对常用的 Ajax 操作，jQuery 提供了一些辅助方法。由于 GET 请求最常见，所以 jQuery 提供了 <code>get()</code> 方法，可以这么写:</p>\n<div><pre><code><span>const</span> jqxhr <span>=</span> $<span>.</span><span>get</span><span>(</span><span>\"/path/to/resource\"</span><span>,</span> <span>{</span>\n  <span>name</span><span>:</span> <span>\"Bob Lee\"</span><span>,</span>\n  <span>check</span><span>:</span> <span>1</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>第二个参数如果是 object，jQuery 自动把它变成 <code>query string</code> 然后加到 URL 后面，实际的 URL 是:</p>\n<p><code>/path/to/resource?name=Bob%20Lee&amp;check=1</code></p>\n<p>这样我们就不用关心如何用 URL 编码并构造一个 <code>query string</code> 了。</p>\n<h2 id=\"post\" tabindex=\"-1\"> post</h2>\n<p><code>post()</code> 和 <code>get()</code> 类似，但是传入的第二个参数默认被序列化为 <code>application/x-www-form-urlencoded</code>:</p>\n<div><pre><code><span>const</span> jqxhr <span>=</span> $<span>.</span><span>post</span><span>(</span><span>\"/path/to/resource\"</span><span>,</span> <span>{</span>\n  <span>name</span><span>:</span> <span>\"Bob Lee\"</span><span>,</span>\n  <span>check</span><span>:</span> <span>1</span><span>,</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>实际构造的数据 <code>name=Bob%20Lee&amp;check=1</code> 作为 POST 的 body 被发送。</p>\n<h2 id=\"getjson\" tabindex=\"-1\"> getJSON</h2>\n<p>由于 JSON 用得越来越普遍，所以 jQuery 也提供了 <code>getJSON()</code> 方法来快速通过 GET 获取一个 JSON 对象:</p>\n<div><pre><code><span>const</span> jqxhr <span>=</span> $<span>.</span><span>getJSON</span><span>(</span><span>\"/path/to/resource\"</span><span>,</span> <span>{</span>\n  <span>name</span><span>:</span> <span>\"Bob Lee\"</span><span>,</span>\n  <span>check</span><span>:</span> <span>1</span><span>,</span>\n<span>}</span><span>)</span><span>.</span><span>done</span><span>(</span><span>function</span> <span>(</span><span>data</span><span>)</span> <span>{</span>\n  <span>// data已经被解析为JSON对象了</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"安全限制\" tabindex=\"-1\"> 安全限制</h2>\n<p>jQuery 的 Ajax 完全封装的是 JavaScript 的 Ajax 操作，所以它的安全限制和前面讲的用 JavaScript 写 Ajax 完全一样。</p>\n<p>如果需要使用 JSONP，可以在 <code>ajax()</code> 中设置 <code>jsonp: 'callback'</code>，让 jQuery 实现 JSONP 跨域加载数据。</p>\n<p>关于跨域的设置请参考浏览器 Ajax 一节中 CORS 的设置。</p>\n",
      "date_published": "2019-11-05T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "jQuery"
      ]
    },
    {
      "title": "修改 DOM 结构",
      "url": "https://mrhope.site/code/website/jQuery/modify-dom.html",
      "id": "https://mrhope.site/code/website/jQuery/modify-dom.html",
      "summary": "\n章节过时\n而且目前浏览器 API 已经基本统一，除非兼容旧版本 IE，否则无需针对不同浏览器写不同的代码。\n\n",
      "content_html": "<div>\n<p>章节过时</p>\n<p>而且目前浏览器 API 已经基本统一，除非兼容旧版本 IE，否则无需针对不同浏览器写不同的代码。</p>\n</div>\n\n<p>直接使用浏览器提供的 API 对 DOM 结构进行修改，不但代码复杂，而且要针对浏览器写不同的代码。</p>\n<p>有了 jQuery，我们就专注于操作 jQuery 对象本身，底层的 DOM 操作由 jQuery 完成就可以了，这样一来，修改 DOM 也大大简化了。</p>\n<h2 id=\"添加-dom\" tabindex=\"-1\"> 添加 DOM</h2>\n<p>要添加新的 DOM 节点，除了通过 jQuery 的 <code>html()</code> 这种暴力方法外，还可以用 <code>append()</code> 方法，例如:</p>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>test-div<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>ul</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>JavaScript<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Python<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n    <span><span><span>&lt;</span>li</span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Swift<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;/</span>ul</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如何向列表新增一个语言? 首先要拿到 <code>&lt;ul&gt;</code> 节点:</p>\n<div><pre><code><span>const</span> ul <span>=</span> <span>$</span><span>(</span><span>\"#test-div>ul\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>然后，调用 <code>append()</code> 传入 HTML 片段:</p>\n<div><pre><code>ul<span>.</span><span>append</span><span>(</span><span>\"&lt;li>&lt;span>Haskell&lt;/span>&lt;/li>\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>除了接受字符串，<code>append()</code> 还可以传入原始的 DOM 对象，jQuery 对象和函数对象:</p>\n<div><pre><code><span>// 创建DOM对象:</span>\n<span>const</span> ps <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>\"li\"</span><span>)</span><span>;</span>\nps<span>.</span>innerHTML <span>=</span> <span>\"&lt;span>Pascal&lt;/span>\"</span><span>;</span>\n<span>// 添加DOM对象:</span>\nul<span>.</span><span>append</span><span>(</span>ps<span>)</span><span>;</span>\n\n<span>// 添加jQuery对象:</span>\nul<span>.</span><span>append</span><span>(</span><span>$</span><span>(</span><span>\"#scheme\"</span><span>)</span><span>)</span><span>;</span>\n\n<span>// 添加函数对象:</span>\nul<span>.</span><span>append</span><span>(</span><span>function</span> <span>(</span><span>index<span>,</span> html</span><span>)</span> <span>{</span>\n  <span>return</span> <span>\"&lt;li>&lt;span>Language - \"</span> <span>+</span> index <span>+</span> <span>\"&lt;/span>&lt;/li>\"</span><span>;</span>\n<span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>传入函数时，要求返回一个字符串、DOM 对象或者 jQuery 对象。因为 jQuery 的 <code>append()</code> 可能作用于一组 DOM 节点，只有传入函数才能针对每个 DOM 生成不同的子节点。</p>\n<p><code>append()</code> 把 DOM 添加到最后，<code>prepend()</code> 则把 DOM 添加到最前。</p>\n<p>另外注意，如果要添加的 DOM 节点已经存在于 HTML 文档中，它会首先从文档移除，然后再添加，也就是说，用 <code>append()</code>，您可以移动一个 DOM 节点。</p>\n<p>如果要把新节点插入到指定位置，例如，JavaScript 和 Python 之间，那么，可以先定位到 JavaScript，然后用 <code>after()</code> 方法:</p>\n<div><pre><code><span>const</span> js <span>=</span> <span>$</span><span>(</span><span>\"#test-div>ul>li:first-child\"</span><span>)</span><span>;</span>\njs<span>.</span><span>after</span><span>(</span><span>\"&lt;li>&lt;span>Lua&lt;/span>&lt;/li>\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>也就是说，同级节点可以用 <code>after()</code> 或者 <code>before()</code> 方法。</p>\n<h2 id=\"删除节点\" tabindex=\"-1\"> 删除节点</h2>\n<p>要删除 DOM 节点，拿到 jQuery 对象后直接调用 <code>remove()</code> 方法就可以了。如果 jQuery 对象包含若干 DOM 节点，实际上可以一次删除多个 DOM 节点:</p>\n<div><pre><code><span>const</span> li <span>=</span> <span>$</span><span>(</span><span>\"#test-div>ul>li\"</span><span>)</span><span>;</span>\nli<span>.</span><span>remove</span><span>(</span><span>)</span><span>;</span> <span>// 所有&lt;li>全被删除</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div>",
      "date_published": "2019-11-03T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "jQuery"
      ]
    },
    {
      "title": "操作 DOM",
      "url": "https://mrhope.site/code/website/jQuery/operate-dom.html",
      "id": "https://mrhope.site/code/website/jQuery/operate-dom.html",
      "summary": "\n章节过时\n目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。\n\n",
      "content_html": "<div>\n<p>章节过时</p>\n<p>目前，新型的框架大多遵循 MVVM 逻辑，及把逻辑层的数据绑定到视图层去显示。这种思路下，无需也不应操作 DOM。</p>\n</div>\n\n<p>jQuery 的选择器很强大，用起来又简单又灵活，但是搞了这么久，我拿到了 jQuery 对象，到底要干什么?</p>\n<p>答案当然是操作对应的 DOM 节点啦!</p>\n<p>回顾一下修改 DOM 的 CSS、文本、设置 HTML 有多么麻烦，而且有的浏览器只有 innerHTML，有的浏览器支持 innerText，有了 jQuery 对象，不需要考虑浏览器差异了，全部统一操作!</p>\n<h2 id=\"修改-text-和-html\" tabindex=\"-1\"> 修改 Text 和 HTML</h2>\n<p>jQuery 对象的 <code>text()</code> 和 <code>html()</code> 方法分别获取节点的文本和原始 HTML 文本，例如，如下的 HTML 结构:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>ul</span> <span>id</span><span><span>=</span><span>\"</span>test-ul<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>js<span>\"</span></span><span>></span></span>JavaScript<span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>name</span><span><span>=</span><span>\"</span>book<span>\"</span></span><span>></span></span>Java <span title=\"&amp;\">&amp;amp;</span> JavaScript<span><span><span>&lt;/</span>li</span><span>></span></span>\n<span><span><span>&lt;/</span>ul</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>分别获取文本和 HTML:</p>\n<div><pre><code><span>$</span><span>(</span><span>\"#test-ul li[name=book]\"</span><span>)</span><span>.</span><span>text</span><span>(</span><span>)</span><span>;</span> <span>// 'Java &amp; JavaScript'</span>\n<span>$</span><span>(</span><span>\"#test-ul li[name=book]\"</span><span>)</span><span>.</span><span>html</span><span>(</span><span>)</span><span>;</span> <span>// 'Java &amp;amp; JavaScript'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>如何设置文本或 HTML ? jQuery 的 API 设计非常巧妙: 无参数调用 <code>text()</code> 是获取文本，传入参数就变成设置文本，HTML 也是类似操作，自己动手试试:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n<span>const</span> j1 <span>=</span> <span>$</span><span>(</span><span>\"#test-ul li.js\"</span><span>)</span><span>;</span>\n<span>const</span> j2 <span>=</span> <span>$</span><span>(</span><span>\"#test-ul li[name=book]\"</span><span>)</span><span>;</span>\n\nj1<span>.</span><span>html</span><span>(</span><span>'&lt;span style=\"color: red\">JavaScript&lt;/span>'</span><span>)</span><span>;</span>\nj2<span>.</span><span>text</span><span>(</span><span>\"JavaScript &amp; ECMAScript\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>JavaScript\nJava &amp; JavaScript\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>一个 jQuery 对象可以包含 0 个或任意个 DOM 对象，它的方法实际上会作用在对应的每个 DOM 节点上。在上面的例子中试试:</p>\n<div><pre><code><span>$</span><span>(</span><span>\"#test-ul li\"</span><span>)</span><span>.</span><span>text</span><span>(</span><span>\"JS\"</span><span>)</span><span>;</span> <span>// 是不是两个节点都变成了JS?</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>所以 jQuery 对象的另一个好处是我们可以执行一个操作，作用在对应的一组 DOM 节点上。即使选择器没有返回任何 DOM 节点，调用 jQuery 对象的方法仍然不会报错:</p>\n<div><pre><code><span>// 如果不存在 id 为 not-exist 的节点:</span>\n<span>$</span><span>(</span><span>\"#not-exist\"</span><span>)</span><span>.</span><span>text</span><span>(</span><span>\"Hello\"</span><span>)</span><span>;</span> <span>// 代码不报错，没有节点被设置为'Hello'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>这意味着 jQuery 帮您免去了许多 if 语句。</p>\n<h2 id=\"修改-css\" tabindex=\"-1\"> 修改 CSS</h2>\n<p>jQuery 对象有“批量操作”的特点，这用于修改 CSS 实在是太方便了。考虑下面的 HTML 结构:</p>\n<div><pre><code><span>&lt;!-- HTML 结构 --></span>\n<span><span><span>&lt;</span>ul</span> <span>id</span><span><span>=</span><span>\"</span>test-css<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>lang dy<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>JavaScript<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>lang<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Java<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>lang dy<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Python<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>lang<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Swift<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n  <span><span><span>&lt;</span>li</span> <span>class</span><span><span>=</span><span>\"</span>lang dy<span>\"</span></span><span>></span></span><span><span><span>&lt;</span>span</span><span>></span></span>Scheme<span><span><span>&lt;/</span>span</span><span>></span></span><span><span><span>&lt;/</span>li</span><span>></span></span>\n<span><span><span>&lt;/</span>ul</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>要高亮显示动态语言，调用 jQuery 对象的 <code>css('name', 'value')</code> 方法，我们用一行语句实现:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>$</span><span>(</span><span>\"#test-css li.dy>span\"</span><span>)</span>\n  <span>.</span><span>css</span><span>(</span><span>\"background-color\"</span><span>,</span> <span>\"#ffd351\"</span><span>)</span>\n  <span>.</span><span>css</span><span>(</span><span>\"color\"</span><span>,</span> <span>\"red\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>JavaScript\nJava\nPython\nSwift\nScheme\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>注意，jQuery 对象的所有方法都返回一个 jQuery 对象(可能是新的也可能是自身)，这样我们可以进行链式调用，非常方便。</p>\n<p>jQuery 对象的 <code>css()</code> 方法可以这么用:</p>\n<div><pre><code><span>const</span> div <span>=</span> <span>$</span><span>(</span><span>\"#test-div\"</span><span>)</span><span>;</span>\ndiv<span>.</span><span>css</span><span>(</span><span>\"color\"</span><span>)</span><span>;</span> <span>// '#000033', 获取CSS属性</span>\ndiv<span>.</span><span>css</span><span>(</span><span>\"color\"</span><span>,</span> <span>\"#336699\"</span><span>)</span><span>;</span> <span>// 设置CSS属性</span>\ndiv<span>.</span><span>css</span><span>(</span><span>\"color\"</span><span>,</span> <span>\"\"</span><span>)</span><span>;</span> <span>// 清除CSS属性</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>为了和 JavaScript 保持一致，CSS 属性可以用 <code>'background-color'</code> 和 <code>'backgroundColor'</code> 两种格式。</p>\n<p><code>css()</code> 方法将作用于 DOM 节点的 style 属性，具有最高优先级。如果要修改 class 属性，可以用 jQuery 提供的下列方法:</p>\n<div><pre><code><span>const</span> div <span>=</span> <span>$</span><span>(</span><span>\"#test-div\"</span><span>)</span><span>;</span>\ndiv<span>.</span><span>hasClass</span><span>(</span><span>\"highlight\"</span><span>)</span><span>;</span> <span>// false， class是否包含highlight</span>\ndiv<span>.</span><span>addClass</span><span>(</span><span>\"highlight\"</span><span>)</span><span>;</span> <span>// 添加highlight这个class</span>\ndiv<span>.</span><span>removeClass</span><span>(</span><span>\"highlight\"</span><span>)</span><span>;</span> <span>// 删除highlight这个class</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h2 id=\"显示和隐藏-dom\" tabindex=\"-1\"> 显示和隐藏 DOM</h2>\n<p>要隐藏一个 DOM，我们可以设置 CSS 的 <code>display</code> 属性为 <code>none</code>，利用 <code>css()</code> 方法就可以实现。不过，要显示这个 DOM 就需要恢复原有的 <code>display</code> 属性，这就得先记下来原有的 <code>display</code> 属性到底是 <code>block</code> 还是 <code>inline</code> 还是别的值。</p>\n<p>考虑到显示和隐藏 DOM 元素使用非常普遍，jQuery 直接提供 <code>show()</code> 和 <code>hide()</code> 方法，我们不用关心它是如何修改 display 属性的，总之它能正常工作:</p>\n<div><pre><code><span>const</span> a <span>=</span> <span>$</span><span>(</span><span>\"a[target=_blank]\"</span><span>)</span><span>;</span>\na<span>.</span><span>hide</span><span>(</span><span>)</span><span>;</span> <span>// 隐藏</span>\na<span>.</span><span>show</span><span>(</span><span>)</span><span>;</span> <span>// 显示</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>注意，隐藏 DOM 节点并未改变 DOM 树的结构，它只影响 DOM 节点的显示。这和删除 DOM 节点是不同的。</p>\n<h2 id=\"获取-dom-信息\" tabindex=\"-1\"> 获取 DOM 信息</h2>\n<p>利用 jQuery 对象的若干方法，我们直接可以获取 DOM 的高宽等信息，而无需针对不同浏览器编写特定代码:</p>\n<div><pre><code><span>// 浏览器可视窗口大小:</span>\n<span>$</span><span>(</span>window<span>)</span><span>.</span><span>width</span><span>(</span><span>)</span><span>;</span> <span>// 800</span>\n<span>$</span><span>(</span>window<span>)</span><span>.</span><span>height</span><span>(</span><span>)</span><span>;</span> <span>// 600</span>\n\n<span>// HTML 文档大小:</span>\n<span>$</span><span>(</span>document<span>)</span><span>.</span><span>width</span><span>(</span><span>)</span><span>;</span> <span>// 800</span>\n<span>$</span><span>(</span>document<span>)</span><span>.</span><span>height</span><span>(</span><span>)</span><span>;</span> <span>// 3500</span>\n\n<span>// 某个 div 的大小:</span>\n<span>const</span> div <span>=</span> <span>$</span><span>(</span><span>\"#test-div\"</span><span>)</span><span>;</span>\ndiv<span>.</span><span>width</span><span>(</span><span>)</span><span>;</span> <span>// 600</span>\ndiv<span>.</span><span>height</span><span>(</span><span>)</span><span>;</span> <span>// 300</span>\ndiv<span>.</span><span>width</span><span>(</span><span>400</span><span>)</span><span>;</span> <span>// 设置 CSS 属性 width: 400px，是否生效要看 CSS 是否有效</span>\ndiv<span>.</span><span>height</span><span>(</span><span>\"200px\"</span><span>)</span><span>;</span> <span>// 设置 CSS 属性 height: 200px，是否生效要看 CSS 是否有效</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>attr()</code> 和 <code>removeAttr()</code> 方法用于操作 DOM 节点的属性:</p>\n<div><pre><code><span>// &lt;div id=\"test-div\" name=\"Test\" start=\"1\">...&lt;/div></span>\n<span>const</span> div <span>=</span> <span>$</span><span>(</span><span>\"#test-div\"</span><span>)</span><span>;</span>\ndiv<span>.</span><span>attr</span><span>(</span><span>\"data\"</span><span>)</span><span>;</span> <span>// undefined, 属性不存在</span>\ndiv<span>.</span><span>attr</span><span>(</span><span>\"name\"</span><span>)</span><span>;</span> <span>// 'Test'</span>\ndiv<span>.</span><span>attr</span><span>(</span><span>\"name\"</span><span>,</span> <span>\"Hello\"</span><span>)</span><span>;</span> <span>// div 的 name 属性变为 'Hello'</span>\ndiv<span>.</span><span>removeAttr</span><span>(</span><span>\"name\"</span><span>)</span><span>;</span> <span>// 删除 name 属性</span>\ndiv<span>.</span><span>attr</span><span>(</span><span>\"name\"</span><span>)</span><span>;</span> <span>// undefined</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>prop()</code> 方法和 <code>attr()</code> 类似，但是 HTML5 规定有一种属性在 DOM 节点中可以没有值，只有出现与不出现两种，例如:</p>\n<div><pre><code><span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>test-radio<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>radio<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>test<span>\"</span></span> <span>checked</span> <span>value</span><span><span>=</span><span>\"</span>1<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>等价于:</p>\n<div><pre><code><span><span><span>&lt;</span>input</span> <span>id</span><span><span>=</span><span>\"</span>test-radio<span>\"</span></span> <span>type</span><span><span>=</span><span>\"</span>radio<span>\"</span></span> <span>name</span><span><span>=</span><span>\"</span>test<span>\"</span></span> <span>checked</span><span><span>=</span><span>\"</span>checked<span>\"</span></span> <span>value</span><span><span>=</span><span>\"</span>1<span>\"</span></span> <span>/></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><code>attr()</code> 和 <code>prop()</code> 对于属性 <code>checked</code> 处理有所不同:</p>\n<div><pre><code><span>const</span> radio <span>=</span> <span>$</span><span>(</span><span>\"#test-radio\"</span><span>)</span><span>;</span>\nradio<span>.</span><span>attr</span><span>(</span><span>\"checked\"</span><span>)</span><span>;</span> <span>// 'checked'</span>\nradio<span>.</span><span>prop</span><span>(</span><span>\"checked\"</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p><code>prop()</code> 返回值更合理一些。不过，用 <code>is()</code> 方法判断更好:</p>\n<div><pre><code><span>const</span> radio <span>=</span> <span>$</span><span>(</span><span>\"#test-radio\"</span><span>)</span><span>;</span>\nradio<span>.</span><span>is</span><span>(</span><span>\":checked\"</span><span>)</span><span>;</span> <span>// true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>类似的属性还有 <code>selected</code>，处理时最好用 <code>is(':selected')</code>。</p>\n<h2 id=\"操作表单\" tabindex=\"-1\"> 操作表单</h2>\n<p>对于表单元素，jQuery 对象统一提供 <code>val()</code> 方法获取和设置对应的 <code>value</code> 属性:</p>\n<div><pre><code><span>/*\n    &lt;input id=\"test-input\" name=\"email\" value=\"\">\n    &lt;select id=\"test-select\" name=\"city\">\n        &lt;option value=\"BJ\" selected>Beijing&lt;/option>\n        &lt;option value=\"SH\">Shanghai&lt;/option>\n        &lt;option value=\"SZ\">Shenzhen&lt;/option>\n    &lt;/select>\n    &lt;textarea id=\"test-textarea\">Hello&lt;/textarea>\n*/</span>\n<span>const</span> input <span>=</span> <span>$</span><span>(</span><span>\"#test-input\"</span><span>)</span><span>,</span>\n  select <span>=</span> <span>$</span><span>(</span><span>\"#test-select\"</span><span>)</span><span>,</span>\n  textarea <span>=</span> <span>$</span><span>(</span><span>\"#test-textarea\"</span><span>)</span><span>;</span>\n\ninput<span>.</span><span>val</span><span>(</span><span>)</span><span>;</span> <span>// 'test'</span>\ninput<span>.</span><span>val</span><span>(</span><span>\"abc@example.com\"</span><span>)</span><span>;</span> <span>// 文本框的内容已变为 abc@example.com</span>\n\nselect<span>.</span><span>val</span><span>(</span><span>)</span><span>;</span> <span>// 'BJ'</span>\nselect<span>.</span><span>val</span><span>(</span><span>\"SH\"</span><span>)</span><span>;</span> <span>// 选择框已变为 Shanghai</span>\n\ntextarea<span>.</span><span>val</span><span>(</span><span>)</span><span>;</span> <span>// 'Hello'</span>\ntextarea<span>.</span><span>val</span><span>(</span><span>\"Hi\"</span><span>)</span><span>;</span> <span>// 文本区域已更新为 'Hi'</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可见，一个 <code>val()</code> 就统一了各种输入框的取值和赋值的问题。</p>\n",
      "date_published": "2019-11-03T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "jQuery"
      ]
    },
    {
      "title": "AJAX",
      "url": "https://mrhope.site/code/language/js/browser/ajax.html",
      "id": "https://mrhope.site/code/language/js/browser/ajax.html",
      "summary": "Ajax 不是 JavaScript 的规范，它只是一个哥们“发明”的缩写: Asynchronous JavaScript and XML，意思就是用 JavaScript 执行异步网络请求。\n",
      "content_html": "<p>Ajax 不是 JavaScript 的规范，它只是一个哥们“发明”的缩写: Asynchronous JavaScript and XML，意思就是用 JavaScript 执行异步网络请求。</p>\n\n<p>如果仔细观察一个 Form 的提交，您就会发现，一旦用户点击 “Submit” 按钮，表单开始提交，浏览器就会刷新页面，然后在新页面里告诉您操作是成功了还是失败了。如果不幸由于网络太慢或者其他原因，就会得到一个 404 页面。</p>\n<p>这就是 Web 的运作原理: 一次 HTTP 请求对应一个页面。</p>\n<p>如果要让用户留在当前页面中，同时发出新的 HTTP 请求，就必须用 JavaScript 发送这个新请求，接收到数据后，再用 JavaScript 更新页面，这样一来，用户就感觉自己仍然停留在当前页面，但是数据却可以不断地更新。</p>\n<p>最早大规模使用 Ajax 的就是 Gmail，Gmail 的页面在首次加载后，剩下的所有数据都依赖于 Ajax 来更新。</p>\n<p>用 JavaScript 写一个完整的 Ajax 代码并不复杂，但是需要注意: Ajax 请求是异步执行的，也就是说，要通过回调函数获得响应。</p>\n<p>在现代浏览器上写 Ajax 主要依靠 XMLHttpRequest 对象:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>const</span> <span>success</span> <span>=</span> <span>(</span><span>text</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> textarea <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#test-response-text\"</span><span>)</span><span>;</span>\n  textarea<span>.</span>value <span>=</span> text<span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> <span>fail</span> <span>=</span> <span>(</span><span>code</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> textarea <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#test-response-text\"</span><span>)</span><span>;</span>\n  textarea<span>.</span>value <span>=</span> <span><span>`</span><span>Error code: </span><span><span>${</span>code<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> request <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span> <span>// 新建XMLHttpRequest对象</span>\n\nrequest<span>.</span><span>onreadystatechange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// 状态发生变化时，函数被回调</span>\n  <span>if</span> <span>(</span>request<span>.</span>readyState <span>===</span> <span>4</span><span>)</span> <span>{</span>\n    <span>// 成功完成</span>\n    <span>// 判断响应结果:</span>\n    <span>if</span> <span>(</span>request<span>.</span>status <span>===</span> <span>200</span><span>)</span>\n      <span>// 成功，通过responseText拿到响应的文本:</span>\n      <span>return</span> <span>success</span><span>(</span>request<span>.</span>responseText<span>)</span><span>;</span>\n    <span>// 失败，根据响应码判断失败原因:</span>\n    <span>else</span> <span>return</span> <span>fail</span><span>(</span>request<span>.</span>status<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>// HTTP请求还在继续...</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n<span>// 发送请求:</span>\nrequest<span>.</span><span>open</span><span>(</span><span>\"GET\"</span><span>,</span> <span>\"/api/categories\"</span><span>)</span><span>;</span>\nrequest<span>.</span><span>send</span><span>(</span><span>)</span><span>;</span>\n\n<span>alert</span><span>(</span><span>\"请求已发送，请等待响应...\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>对于低版本的 IE，需要换一个 ActiveXObject 对象:</p>\n<div><pre><code><span>\"use strict\"</span><span>;</span>\n\n<span>const</span> <span>success</span> <span>=</span> <span>(</span><span>text</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> textarea <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#test-ie-response-text\"</span><span>)</span><span>;</span>\n  textarea<span>.</span>value <span>=</span> text<span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> <span>fail</span> <span>=</span> <span>(</span><span>code</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> textarea <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#test-ie-response-text\"</span><span>)</span><span>;</span>\n  textarea<span>.</span>value <span>=</span> <span><span>`</span><span>Error code: </span><span><span>${</span>code<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span><span>;</span>\n\n<span>const</span> request <span>=</span> <span>new</span> <span>ActiveXObject</span><span>(</span><span>\"Microsoft.XMLHTTP\"</span><span>)</span><span>;</span> <span>// 新建Microsoft.XMLHTTP对象</span>\n\nrequest<span>.</span><span>onreadystatechange</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>// 状态发生变化时，函数被回调</span>\n  <span>if</span> <span>(</span>request<span>.</span>readyState <span>===</span> <span>4</span><span>)</span> <span>{</span>\n    <span>// 成功完成</span>\n    <span>// 判断响应结果:</span>\n    <span>if</span> <span>(</span>request<span>.</span>status <span>===</span> <span>200</span><span>)</span>\n      <span>// 成功，通过responseText拿到响应的文本:</span>\n      <span>return</span> <span>success</span><span>(</span>request<span>.</span>responseText<span>)</span><span>;</span>\n    <span>// 失败，根据响应码判断失败原因:</span>\n    <span>else</span> <span>return</span> <span>fail</span><span>(</span>request<span>.</span>status<span>)</span><span>;</span>\n  <span>}</span> <span>else</span> <span>{</span>\n    <span>// HTTP请求还在继续...</span>\n  <span>}</span>\n<span>}</span><span>;</span>\n\n<span>// 发送请求:</span>\nrequest<span>.</span><span>open</span><span>(</span><span>\"GET\"</span><span>,</span> <span>\"/api/categories\"</span><span>)</span><span>;</span>\nrequest<span>.</span><span>send</span><span>(</span><span>)</span><span>;</span>\n\n<span>alert</span><span>(</span><span>\"请求已发送，请等待响应...\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如果您想把标准写法和 IE 写法混在一起，可以这么写:</p>\n<div><pre><code><span>const</span> request<span>;</span>\n\n<span>if</span> <span>(</span>window<span>.</span>XMLHttpRequest<span>)</span> request <span>=</span> <span>new</span> <span>XMLHttpRequest</span><span>(</span><span>)</span><span>;</span>\n<span>else</span> request <span>=</span> <span>new</span> <span>ActiveXObject</span><span>(</span><span>\"Microsoft.XMLHTTP\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>通过检测 <code>window</code> 对象是否有 <code>XMLHttpRequest</code> 属性来确定浏览器是否支持标准的 <code>XMLHttpRequest</code>。注意，不要根据浏览器的 <code>navigator.userAgent</code> 来检测浏览器是否支持某个 JavaScript 特性，一是因为这个字符串本身可以伪造，二是通过 IE 版本判断 JavaScript 特性将非常复杂。</p>\n<p>当创建了 <code>XMLHttpRequest</code> 对象后，要先设置 <code>onreadystatechange</code> 的回调函数。在回调函数中，通常我们只需通过 <code>readyState === 4</code> 判断请求是否完成，如果已完成，再根据 <code>status === 200</code> 判断是否是一个成功的响应。</p>\n<p><code>XMLHttpRequest</code> 对象的 <code>open()</code> 方法有 3 个参数，第一个参数指定是 GET 还是 POST，第二个参数指定 URL 地址，第三个参数指定是否使用异步，默认是 <code>true</code>，所以不用写。</p>\n<div>\n<p>警告</p>\n<p>千万不要把第三个参数指定为 <code>false</code>，否则浏览器将停止响应，直到 Ajax 请求完成。如果这个请求耗时 10 秒，那么 10 秒内您会发现浏览器处于“假死”状态。</p>\n</div>\n<p>最后调用 <code>send()</code> 方法才真正发送请求。GET 请求不需要参数，POST 请求需要把 body 部分以字符串或者 <code>FormData</code> 对象传进去。</p>\n<h2 id=\"安全限制\" tabindex=\"-1\"> 安全限制</h2>\n<p>上面代码的 URL 使用的是相对路径。如果您把它改为 <code>'https://www.sina.com.cn/'</code>，再运行，肯定报错。在 Chrome 的控制台里，还可以看到错误信息。</p>\n<p>这是因为浏览器的同源策略导致的。默认情况下，JavaScript 在发送 Ajax 请求时，URL 的域名必须和当前页面完全一致。</p>\n<p>完全一致的意思是，域名要相同 (www.example.com 和 example.com 不同)，协议要相同 (HTTP 和 HTTPS 不同)，端口号要相同(默认是 <code>:80</code> 端口，它和 <code>:8080</code> 就不同)。有的浏览器口子松一点，允许端口不同，大多数浏览器都会严格遵守这个限制。</p>\n<p>那是不是用 JavaScript 无法请求外域(就是其他网站)的 URL 了呢? 方法还是有的，大概有这么几种:</p>\n<p>一是通过 Flash 插件发送 HTTP 请求，这种方式可以绕过浏览器的安全限制，但必须安装 Flash，并且跟 Flash 交互。不过 Flash 用起来麻烦，而且现在用得也越来越少了。</p>\n<p>二是通过在同源域名下架设一个代理服务器来转发，JavaScript 负责把请求发送到代理服务器 <code>/proxy?url=https://www.sina.com.cn</code></p>\n<p>代理服务器再把结果返回，这样就遵守了浏览器的同源策略。这种方式麻烦之处在于需要服务器端额外做开发。</p>\n<p>第三种方式称为 JSONP，它有个限制，只能用 GET 请求，并且要求返回 JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用 JavaScript 资源:</p>\n<div><pre><code><span><span><span>&lt;</span>html</span><span>></span></span>\n  <span><span><span>&lt;</span>head</span><span>></span></span>\n    <span><span><span>&lt;</span>script</span> <span>src</span><span><span>=</span><span>\"</span>https://example.com/abc.js<span>\"</span></span><span>></span></span><span></span><span><span><span>&lt;/</span>script</span><span>></span></span>\n    ...\n  <span><span><span>&lt;/</span>head</span><span>></span></span>\n  <span><span><span>&lt;</span>body</span><span>></span></span>\n    ...\n  <span><span><span>&lt;/</span>body</span><span>></span></span>\n<span><span><span>&lt;/</span>html</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>JSONP 通常以函数调用的形式返回，例如，返回 JavaScript 内容如下:</p>\n<div><pre><code><span>foo</span><span>(</span><span>\"data\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>这样一来，我们如果在页面中先准备好 <code>foo()</code> 函数，然后给页面动态加一个 <code>&lt;script&gt;</code> 节点，相当于动态读取外域的 JavaScript 资源，最后就等着接收回调了。</p>\n<p>以 163 的股票查询 URL 为例，对于 <code>URL: https://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice</code>，您将得到如下返回:</p>\n<div><pre><code><span>refreshPrice</span><span>(</span><span>{</span><span>\"0000001\"</span><span>:</span><span>{</span><span>\"code\"</span><span>:</span> <span>\"0000001\"</span><span>,</span> <span>...</span> <span>}</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>因此我们需要首先在页面中准备好回调函数:</p>\n<div><pre><code><span>const</span> <span>refreshPrice</span> <span>=</span> <span>(</span><span>data</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> p <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#test-jsonp\"</span><span>)</span><span>;</span>\n\n  p<span>.</span>innerHTML <span>=</span> <span><span>`</span><span>当前价格: </span><span><span>${</span>data<span>[</span><span>\"0000001\"</span><span>]</span><span>.</span>name<span>}</span></span><span>: </span><span><span>${</span>data<span>[</span><span>\"0000001\"</span><span>]</span><span>.</span>price<span>}</span></span><span>；</span><span><span>${</span>data<span>[</span><span>\"1399001\"</span><span>]</span><span>.</span>name<span>}</span></span><span>: </span><span><span>${</span>data<span>[</span><span>\"1399001\"</span><span>]</span><span>.</span>price<span>}</span></span><span>`</span></span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>最后用 <code>getPrice()</code> 函数触发:</p>\n<div><pre><code><span>const</span> <span>getPrice</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>\n  <span>const</span> js <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>\"script\"</span><span>)</span><span>;</span>\n  <span>const</span> head <span>=</span> document<span>.</span><span>getElementsByTagName</span><span>(</span><span>\"head\"</span><span>)</span><span>[</span><span>0</span><span>]</span><span>;</span>\n\n  js<span>.</span>src <span>=</span>\n    <span>\"https://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice\"</span><span>;</span>\n  head<span>.</span><span>appendChild</span><span>(</span>js<span>)</span><span>;</span>\n<span>}</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>就完成了跨域加载数据。</p>\n<h2 id=\"cors\" tabindex=\"-1\"> CORS</h2>\n<p>如果浏览器支持 HTML5，那么就可以一劳永逸地使用新的跨域策略: <strong>CORS</strong> 了。</p>\n<p>CORS 全称 <code>Cross-Origin Resource Sharing</code>，是 HTML5 规范定义的如何跨域访问资源。</p>\n<p>了解 CORS 前，我们先搞明白概念:</p>\n<p><strong>Origin</strong> 表示本域，也就是浏览器当前页面的域。当 JavaScript 向外域 (如 sina.com) 发起请求后，浏览器收到响应后，首先检查 <code>Access-Control-Allow-Origin</code> 是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript 将无法获取到响应的任何数据。</p>\n<p>用一个图来表示就是:</p>\n<p><img src=\"@source/code/language/js/assets/js-cors.png\" alt=\"js-cors\"></p>\n<p>假设本域是 <code>my.com</code>，外域是 <code>sina.com</code>，只要响应头 <code>Access-Control-Allow-Origin</code> 为 <code>https://my.com</code>，或者是 <code>*</code>，本次请求就可以成功。</p>\n<p>可见，跨域能否成功，取决于对方服务器是否愿意给您设置一个正确的 <code>Access-Control-Allow-Origin</code>，决定权始终在对方手中。</p>\n<p>上面这种跨域请求，称之为“简单请求”。简单请求包括 <code>GET</code>、<code>HEAD</code> 和 <code>POST</code> ( POST 的 <code>Content-Type</code> 类型\n仅限 <code>application/x-www-form-urlencoded、multipart/form-data和text/plain</code>)，并且不能出现任何自定义头(例如，X-Custom: 12345)，通常能满足 90% 的需求。</p>\n<p>无论您是否需要用 JavaScript 通过 CORS 跨域请求资源，您都要了解 CORS 的原理。最新的浏览器全面支持 HTML5。在引用外域资源时，除了 JavaScript 和 CSS 外，都要验证 CORS。例如，当您引用了某个第三方 CDN 上的字体文件时:</p>\n<div><pre><code><span>/* CSS */</span>\n<span><span>@font-face</span></span> <span>{</span>\n  <span>font-family</span><span>:</span> <span>\"FontAwesome\"</span><span>;</span>\n  <span>src</span><span>:</span> <span><span>url</span><span>(</span><span>\"https://cdn.com/fonts/fontawesome.ttf\"</span><span>)</span></span> <span>format</span><span>(</span><span>\"truetype\"</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>如果该 CDN 服务商未正确设置 <code>Access-Control-Allow-Origin</code>，那么浏览器无法加载字体资源。</p>\n<p>对于 PUT、DELETE 以及其他类型如 <code>application/json</code> 的 POST 请求，在发送 Ajax 请求之前，浏览器会先发送一个 <code>OPTIONS</code> 请求(称为 preflighted 请求)到这个 URL 上，询问目标服务器是否接受:</p>\n<div><pre><code><span><span>OPTIONS</span> <span>/path/to/resource</span> <span>HTTP/1.1</span></span>\n<span><span>Host</span><span>:</span> <span>bar.com</span></span>\n<span><span>Origin</span><span>:</span> <span>https://my.com</span></span>\n<span><span>Access-Control-Request-Method</span><span>:</span> <span>POST</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>服务器必须响应并明确指出允许的 Method:</p>\n<div><pre><code><span><span>HTTP/1.1</span> <span>200</span> <span>OK</span></span>\n<span><span>Access-Control-Allow-Origin</span><span>:</span> <span>https://my.com</span></span>\n<span><span>Access-Control-Allow-Methods</span><span>:</span> <span>POST, GET, PUT, OPTIONS</span></span>\n<span><span>Access-Control-Max-Age</span><span>:</span> <span>86400</span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>浏览器确认服务器响应的 <code>Access-Control-Allow-Methods</code> 头确实包含将要发送的 Ajax 请求的 Method，才会继续发送 AJAX，否则，抛出一个错误。</p>\n<p>由于以 POST、PUT 方式传送 JSON 格式的数据在 REST 中很常见，所以要跨域正确处理 POST 和 PUT 请求，服务器端必须正确响应 OPTIONS 请求。</p>\n<p>需要深入了解 CORS 的童鞋请移步 <a href=\"https://www.w3.org/TR/cors/\" target=\"_blank\" rel=\"noopener noreferrer\">W3C 文档</a>。</p>\n",
      "date_published": "2019-10-18T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "操作 DOM",
      "url": "https://mrhope.site/code/language/js/browser/dom.html",
      "id": "https://mrhope.site/code/language/js/browser/dom.html",
      "summary": "由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。\n始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:\n\n\n更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；\n\n\n遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；\n\n\n添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；\n\n\n删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。\n\n\n",
      "content_html": "<p>由于 HTML 文档被浏览器解析后就是一棵 DOM 树，要改变 HTML 的结构，就需要通过 JavaScript 来操作 DOM。</p>\n<p>始终记住 DOM 是一个树形结构。操作一个 DOM 节点实际上就是这么几个操作:</p>\n<ul>\n<li>\n<p>更新: 更新该 DOM 节点的内容，相当于更新了该 DOM 节点表示的 HTML 的内容；</p>\n</li>\n<li>\n<p>遍历: 遍历该 DOM 节点下的子节点，以便进行进一步操作；</p>\n</li>\n<li>\n<p>添加: 在该 DOM 节点下新增一个子节点，相当于动态增加了一个 HTML 节点；</p>\n</li>\n<li>\n<p>删除: 将该节点从 HTML 中删除，相当于删掉了该 DOM 节点的内容以及它包含的所有子节点。</p>\n</li>\n</ul>\n\n<p>在操作一个 DOM 节点前，我们需要通过各种方式先拿到这个 DOM 节点。最常用的方法是使用 <code>querySelector()</code> 和 <code>querySelectorAll()</code>。</p>\n<p>使用这个 API 需要了解 CSS selector 语法，然后使用条件来获取节点，十分方便:</p>\n<div><pre><code><span>// 通过 querySelector 获取 ID 为 q1 的节点:</span>\n<span>const</span> q1 <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#q1\"</span><span>)</span><span>;</span>\n\n<span>// 通过 querySelectorAll 获取 q1 节点内的符合条件的所有节点:</span>\n<span>const</span> ps <span>=</span> q1<span>.</span><span>querySelectorAll</span><span>(</span><span>\"div.highlighted > p\"</span><span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>注意</p>\n<p>低版本的 IE &lt; 8 不支持 <code>querySelector</code> 和 <code>querySelectorAll</code>。IE8 仅有限支持。</p>\n<p>在历史上，使用的方法是 <code>document.getElementById()</code> 和 <code>document.getElementsByTagName()</code>，以及 CSS 选择器 <code>document.getElementsByClassName()</code>。</p>\n<p>由于 ID 在 HTML 文档中是唯一的，所以 <code>document.getElementById()</code> 可以直接定位唯一的一个 DOM 节点。<code>document.getElementsByTagName()</code> 和 <code>document.getElementsByClassName()</code> 总是返回一组 DOM 节点。要精确地选择 DOM，可以先定位父节点，再从父节点开始选择，以缩小范围。</p>\n<p>例如:</p>\n<div><pre><code><span>// 返回ID为 'test' 的节点:</span>\n<span>const</span> test <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>\"test\"</span><span>)</span><span>;</span>\n\n<span>// 先定位ID为'test-table'的节点，再返回其内部所有tr节点:</span>\n<span>const</span> trs <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>\"test-table\"</span><span>)</span><span>.</span><span>getElementsByTagName</span><span>(</span><span>\"tr\"</span><span>)</span><span>;</span>\n\n<span>// 先定位ID为'test-div'的节点，再返回其内部所有class包含red的节点:</span>\n<span>const</span> reds <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>\"test-div\"</span><span>)</span><span>.</span><span>getElementsByClassName</span><span>(</span><span>\"red\"</span><span>)</span><span>;</span>\n\n<span>// 获取节点 test 下的所有直属子节点:</span>\n<span>const</span> cs <span>=</span> test<span>.</span>children<span>;</span>\n\n<span>// 获取节点 test 下第一个、最后一个子节点:</span>\n<span>const</span> first <span>=</span> test<span>.</span>firstElementChild<span>;</span>\n<span>const</span> last <span>=</span> test<span>.</span>lastElementChild<span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></div>\n<p>严格地讲，我们这里的 DOM 节点是指 <code>Element</code>，但是 DOM 节点实际上是 <code>Node</code>，在 HTML 中，<code>Node</code> 包括 <code>Element</code>、<code>Comment</code>、<code>CDATA_SECTION</code> 等很多种，以及根节点 <code>Document</code> 类型，但是，绝大多数时候我们只关心 <code>Element</code>，也就是实际控制页面结构的 <code>Node</code>，其他类型的 <code>Node</code> 忽略即可。根节点 Document 已经自动绑定为全局变量 <code>document</code>。</p>\n<h2 id=\"更新-dom\" tabindex=\"-1\"> 更新 DOM</h2>\n<p>拿到一个 DOM 节点后，我们可以对它进行更新。</p>\n<p>可以直接修改节点的文本，方法有两种:</p>\n<p>一种是修改 <code>innerHTML</code> 属性，这个方式非常强大，不但可以修改一个 DOM 节点的文本内容，还可以直接通过 HTML 片段修改 DOM 节点内部的子树:</p>\n<div><pre><code><span>// 获取&lt;p id=\"p-id\">...&lt;/p></span>\n<span>const</span> p <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#p-id\"</span><span>)</span><span>;</span>\n<span>// 设置文本为abc:</span>\np<span>.</span>innerHTML <span>=</span> <span>\"ABC\"</span><span>;</span> <span>// &lt;p id=\"p-id\">ABC&lt;/p></span>\n<span>// 设置HTML:</span>\np<span>.</span>innerHTML <span>=</span> <span>'ABC &lt;span style=\"color:red\">RED&lt;/span> XYZ'</span><span>;</span>\n<span>// &lt;p>...&lt;/p>的内部结构已修改</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>用 <code>innerHTML</code> 时要注意，是否需要写入 HTML。如果写入的字符串是通过网络拿到了，要注意对字符编码来避免 XSS 攻击。</p>\n<p>第二种是修改 <code>innerText</code> 或 <code>textContent</code> 属性，这样可以自动对字符串进行 HTML 编码，保证无法设置任何 HTML 标签:</p>\n<div><pre><code><span>// 获取&lt;p id=\"p-id\">...&lt;/p></span>\n<span>const</span> p <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#p-id\"</span><span>)</span><span>;</span>\n<span>// 设置文本:</span>\np<span>.</span>innerText <span>=</span> <span>'&lt;script>alert(\"Hi\")&lt;/script>'</span><span>;</span>\n<span>// HTML被自动编码，无法设置一个&lt;script>节点:</span>\n<span>// &lt;p id=\"p-id\">&amp;lt;script&amp;gt;alert(\"Hi\")&amp;lt;/script&amp;gt;&lt;/p></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>两者的区别在于读取属性时，<code>innerText</code> 不返回隐藏元素的文本，而 <code>textContent</code> 返回所有文本。</p>\n<div>\n<p>注意</p>\n<p>IE &lt; 9 不支持 <code>textContent</code>。</p>\n</div>\n<p>修改 CSS 也是经常需要的操作。DOM 节点的 style 属性对应所有的 CSS，可以直接获取或设置。因为 CSS 允许 <code>font-size</code> 这样的名称，但它并非 JavaScript 有效的属性名，所以需要在 JavaScript 中改写为驼峰式命名 <code>fontSize</code>:</p>\n<div><pre><code><span>// 获取&lt;p id=\"p-id\">...&lt;/p></span>\n<span>const</span> p <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#p-id\"</span><span>)</span><span>;</span>\n<span>// 设置CSS:</span>\np<span>.</span>style<span>.</span>color <span>=</span> <span>\"#ff0000\"</span><span>;</span>\np<span>.</span>style<span>.</span>fontSize <span>=</span> <span>\"20px\"</span><span>;</span>\np<span>.</span>style<span>.</span>paddingTop <span>=</span> <span>\"2em\"</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"插入-dom\" tabindex=\"-1\"> 插入 DOM</h2>\n<p>当我们获得了某个 DOM 节点，想在这个 DOM 节点内插入新的 DOM，应该如何做?</p>\n<p>如果这个 DOM 节点是空的，例如，<code>&lt;div&gt;&lt;/div&gt;</code>，那么，直接使用 <code>innerHTML = '&lt;span&gt;child&lt;/span&gt;'</code> 就可以修改 DOM 节点的内容，相当于“插入”了新的 DOM 节点。</p>\n<p>如果这个 DOM 节点不是空的，那就不能这么做，因为 <code>innerHTML</code> 会直接替换掉原来的所有子节点。</p>\n<p>有两个办法可以插入新的节点。一个是使用 <code>appendChild</code>，把一个子节点添加到父节点的最后一个子节点。例如:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>js<span>\"</span></span><span>></span></span>JavaScript<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>list<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>java<span>\"</span></span><span>></span></span>Java<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>python<span>\"</span></span><span>></span></span>Python<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>scheme<span>\"</span></span><span>></span></span>Scheme<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>把 <code>&lt;p id=&quot;js&quot;&gt;JavaScript&lt;/p&gt;</code> 添加到 <code>&lt;div id=&quot;list&quot;&gt;</code> 的最后一项:</p>\n<div><pre><code><span>const</span> js <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#js\"</span><span>)</span><span>;</span>\n<span>const</span> list <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#list\"</span><span>)</span><span>;</span>\n\nlist<span>.</span><span>appendChild</span><span>(</span>js<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>现在，HTML 结构变成了这样:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>list<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>java<span>\"</span></span><span>></span></span>Java<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>python<span>\"</span></span><span>></span></span>Python<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>scheme<span>\"</span></span><span>></span></span>Scheme<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>js<span>\"</span></span><span>></span></span>JavaScript<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>因为我们插入的 js 节点已经存在于当前的文档树，因此这个节点首先会从原先的位置删除，再插入到新的位置。</p>\n<p>更多的时候我们会从零创建一个新的节点，然后插入到指定位置:</p>\n<div><pre><code><span>const</span> list <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#list\"</span><span>)</span><span>;</span>\n<span>const</span> haskell <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>\"p\"</span><span>)</span><span>;</span>\n\nhaskell<span>.</span>id <span>=</span> <span>\"haskell\"</span><span>;</span>\nhaskell<span>.</span>innerText <span>=</span> <span>\"Haskell\"</span><span>;</span>\nlist<span>.</span><span>appendChild</span><span>(</span>haskell<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>这样我们就动态添加了一个新的节点:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>list<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>java<span>\"</span></span><span>></span></span>Java<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>python<span>\"</span></span><span>></span></span>Python<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>scheme<span>\"</span></span><span>></span></span>Scheme<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>haskell<span>\"</span></span><span>></span></span>Haskell<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>动态创建一个节点然后添加到 DOM 树中，可以实现很多功能。举个例子，下面的代码动态创建了一个 <code>&lt;style&gt;</code> 节点，然后把它添加到 <code>&lt;head&gt;</code> 节点的末尾，这样就动态地给文档添加了新的 CSS 定义:</p>\n<div><pre><code><span>const</span> d <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>\"style\"</span><span>)</span><span>;</span>\n\nd<span>.</span><span>setAttribute</span><span>(</span><span>\"type\"</span><span>,</span> <span>\"text/css\"</span><span>)</span><span>;</span>\nd<span>.</span>innerHTML <span>=</span> <span>\"p { color: red }\"</span><span>;</span>\ndocument<span>.</span><span>getElementsByTagName</span><span>(</span><span>\"head\"</span><span>)</span><span>[</span><span>0</span><span>]</span><span>.</span><span>appendChild</span><span>(</span>d<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>可以在 Chrome 的控制台执行上述代码，观察页面样式的变化。</p>\n<h3 id=\"insertbefore\" tabindex=\"-1\"> insertBefore</h3>\n<p>如果我们要把子节点插入到指定的位置怎么办? 可以使用 <code>parentElement.insertBefore(newElement, referenceElement);</code>，子节点会插入到 <code>referenceElement</code> 之前。</p>\n<p>还是以上面的 HTML 为例，假定我们要把 <code>Haskell</code> 插入到 <code>Python</code> 之前:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>list<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>java<span>\"</span></span><span>></span></span>Java<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>python<span>\"</span></span><span>></span></span>Python<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>scheme<span>\"</span></span><span>></span></span>Scheme<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以这么写:</p>\n<div><pre><code><span>const</span> list <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#list\"</span><span>)</span><span>;</span>\n<span>const</span> ref <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#python\"</span><span>)</span><span>;</span>\n<span>const</span> haskell <span>=</span> document<span>.</span><span>createElement</span><span>(</span><span>\"p\"</span><span>)</span><span>;</span>\n\nhaskell<span>.</span>id <span>=</span> <span>\"haskell\"</span><span>;</span>\nhaskell<span>.</span>innerText <span>=</span> <span>\"Haskell\"</span><span>;</span>\nlist<span>.</span><span>insertBefore</span><span>(</span>haskell<span>,</span> ref<span>)</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>新的 HTML 结构如下:</p>\n<div><pre><code><span>&lt;!-- HTML结构 --></span>\n<span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>list<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>java<span>\"</span></span><span>></span></span>Java<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>haskell<span>\"</span></span><span>></span></span>Haskell<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>python<span>\"</span></span><span>></span></span>Python<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span> <span>id</span><span><span>=</span><span>\"</span>scheme<span>\"</span></span><span>></span></span>Scheme<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可见，使用 <code>insertBefore</code> 重点是要拿到一个“参考子节点”的引用。很多时候，需要循环一个父节点的所有子节点，可以通过迭代 <code>children</code> 属性实现:</p>\n<div><pre><code><span>let</span> c<span>;</span>\n<span>const</span> list <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#list\"</span><span>)</span><span>;</span>\n\n<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> list<span>.</span>children<span>.</span>length<span>;</span> i<span>++</span><span>)</span> c <span>=</span> list<span>.</span>children<span>[</span>i<span>]</span><span>;</span> <span>// 拿到第i个子节点</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><h2 id=\"删除-dom\" tabindex=\"-1\"> 删除 DOM</h2>\n<p>删除一个 DOM 节点就比插入要容易得多。</p>\n<p>要删除一个节点，首先要获得该节点本身以及它的父节点，然后，调用父节点的 <code>removeChild</code> 把自己删掉:</p>\n<div><pre><code><span>// 拿到待删除节点:</span>\n<span>const</span> self <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#to-be-removed\"</span><span>)</span><span>;</span>\n<span>// 拿到父节点:</span>\n<span>const</span> parent <span>=</span> self<span>.</span>parentElement<span>;</span>\n<span>// 删除:</span>\n<span>const</span> removed <span>=</span> parent<span>.</span><span>removeChild</span><span>(</span>self<span>)</span><span>;</span>\n\nremoved <span>===</span> self<span>;</span> <span>// true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div>\n<p>注意</p>\n<p>删除后的节点虽然不在文档树中了，但其实它还在内存中，可以随时再次被添加到别的位置。</p>\n</div>\n<p>当您遍历一个父节点的子节点并进行删除操作时，要注意，<code>children</code> 属性是一个只读属性，并且它在子节点变化时会实时更新。</p>\n<p>例如，对于如下 HTML 结构:</p>\n<div><pre><code><span><span><span>&lt;</span>div</span> <span>id</span><span><span>=</span><span>\"</span>parent<span>\"</span></span><span>></span></span>\n  <span><span><span>&lt;</span>p</span><span>></span></span>First<span><span><span>&lt;/</span>p</span><span>></span></span>\n  <span><span><span>&lt;</span>p</span><span>></span></span>Second<span><span><span>&lt;/</span>p</span><span>></span></span>\n<span><span><span>&lt;/</span>div</span><span>></span></span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>当我们用如下代码删除子节点时:</p>\n<div><pre><code><span>const</span> parent <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>\"#parent\"</span><span>)</span><span>;</span>\n\nparent<span>.</span><span>removeChild</span><span>(</span>parent<span>.</span>children<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>\nparent<span>.</span><span>removeChild</span><span>(</span>parent<span>.</span>children<span>[</span><span>1</span><span>]</span><span>)</span><span>;</span> <span>// &lt;-- 浏览器报错</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>浏览器报错: <code>parent.children[1]</code> 不是一个有效的节点。原因就在于，当 <code>&lt;p&gt;First&lt;/p&gt;</code> 节点被删除后，<code>parent.children</code> 的节点数量已经从 <code>2</code> 变为了 <code>1</code>，索引 <code>[1]</code> 已经不存在了。</p>\n<p>因此，删除多个节点时，要注意 <code>children</code> 属性时刻都在变化。</p>\n",
      "date_published": "2019-10-16T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "Mr.Hope 介绍",
      "url": "https://mrhope.site/about/",
      "id": "https://mrhope.site/about/",
      "content_html": "<i>Content not supported</i>",
      "image": "https://mrhope.site/logo.svg",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-04-03T17:06:01.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "代码笔记",
      "url": "https://mrhope.site/code/",
      "id": "https://mrhope.site/code/",
      "summary": "此处是 Mr.Hope 存放的一些代码笔记。\n",
      "content_html": "<p>此处是 Mr.Hope 存放的一些代码笔记。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<h3 id=\"基础\" tabindex=\"-1\"> 基础</h3>\n<ul>\n<li>\n<p><a href=\"/code/basic/\">基础知识</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/\">Windows 基础</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/\">GitHub 介绍</a></p>\n</li>\n</ul>\n<h3 id=\"前端开发\" tabindex=\"-1\"> 前端开发</h3>\n<ul>\n<li>\n<p><a href=\"/code/website/\">网站相关</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/\">Vue 相关</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/\">小程序教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/\">Node.js</a></p>\n</li>\n</ul>\n<h3 id=\"代码学习\" tabindex=\"-1\"> 代码学习</h3>\n<ul>\n<li>\n<p><a href=\"/code/language/\">代码学习</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/learning.html\">如何学习一门语言</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/\">JavaScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/\">TypeScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/\">Python 教程</a> (编写中...)</p>\n</li>\n<li>\n<p><a href=\"/code/language/markdown/\">Markdown 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/yaml/\">YAML 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/json/\">JSON 教程</a></p>\n</li>\n</ul>\n<h3 id=\"app\" tabindex=\"-1\"> APP</h3>\n<ul>\n<li><a href=\"/code/Android/\">Android 开发</a></li>\n</ul>\n<h3 id=\"后端开发\" tabindex=\"-1\"> 后端开发</h3>\n<ul>\n<li><a href=\"/code/back-end/\">后端开发</a></li>\n</ul>\n<h3 id=\"代码学习网站\" tabindex=\"-1\"> 代码学习网站</h3>\n<h3 id=\"优质网站\" tabindex=\"-1\"> 优质网站</h3>\n<ul>\n<li>\n<p><a href=\"https://wangdoc.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网道</a></p>\n</li>\n<li>\n<p><a href=\"https://www.liaoxuefeng.com/\" target=\"_blank\" rel=\"noopener noreferrer\">廖雪峰的网站</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/\" target=\"_blank\" rel=\"noopener noreferrer\">MDN</a></p>\n<div>\n<p>相关信息</p>\n<p>MDN 的中文文档翻译很差，大多都是机翻，十分建议直接阅读英文文档。</p>\n</div>\n</li>\n</ul>\n<h3 id=\"杂牌网站\" tabindex=\"-1\"> 杂牌网站</h3>\n<ul>\n<li>\n<p><a href=\"https://www.runoob.com/\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"https://www.w3cschool.cn\" target=\"_blank\" rel=\"noopener noreferrer\">w3cschool</a> <i>Content not supported</i> <i>Content not supported</i> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"http://www.w3school.com.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">w3school</a> <i>Content not supported</i></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-10-10T05:08:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "UI 设计",
      "url": "https://mrhope.site/design/",
      "id": "https://mrhope.site/design/",
      "summary": "本文列出了一些 UI 设计相关的资源。\n",
      "content_html": "<p>本文列出了一些 UI 设计相关的资源。</p>\n\n<h2 id=\"相关教程\" tabindex=\"-1\"> 相关教程</h2>\n<ul>\n<li>\n<p><a href=\"/design/icon/\">图标设计教程</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/\">导航设计教程</a></p>\n</li>\n</ul>\n<h2 id=\"配色\" tabindex=\"-1\"> 配色</h2>\n<ul>\n<li>\n<p><a href=\"http://www.ruanyifeng.com/blog/2019/03/coloring-scheme.html\" target=\"_blank\" rel=\"noopener noreferrer\">阮一峰 - 配色方案</a></p>\n</li>\n<li>\n<p><a href=\"https://webgradients.com/\" target=\"_blank\" rel=\"noopener noreferrer\">网页背景渐变色</a></p>\n</li>\n</ul>\n<h2 id=\"设计\" tabindex=\"-1\"> 设计</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.apple.com/design/tips/\" target=\"_blank\" rel=\"noopener noreferrer\">Apple 设计原则</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.apple.com/design/\" target=\"_blank\" rel=\"noopener noreferrer\">Apple 设计</a></p>\n</li>\n<li>\n<p><a href=\"/design/APP.html\">App 组件设计规范</a></p>\n</li>\n</ul>\n<h2 id=\"网站组件\" tabindex=\"-1\"> 网站组件</h2>\n<ul>\n<li>\n<p><a href=\"https://ant.design/index-cn\" target=\"_blank\" rel=\"noopener noreferrer\">Ant Design</a></p>\n</li>\n<li>\n<p><a href=\"https://weui.io/\" target=\"_blank\" rel=\"noopener noreferrer\">WeUI</a></p>\n</li>\n</ul>\n<h2 id=\"小程序组件库\" tabindex=\"-1\"> 小程序组件库</h2>\n<ul>\n<li>\n<p><a href=\"https://youzan.github.io/vant-weapp/\" target=\"_blank\" rel=\"noopener noreferrer\">Vant</a></p>\n</li>\n<li>\n<p><a href=\"https://www.color-ui.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Color UI</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-24T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "设计"
      ]
    },
    {
      "title": "硬件相关",
      "url": "https://mrhope.site/hardware/",
      "id": "https://mrhope.site/hardware/",
      "summary": " 硬件相关\n这里是一些常见的硬件相关的问题总结，供访客查阅。\n",
      "content_html": "<h1 id=\"硬件相关\" tabindex=\"-1\"> 硬件相关</h1>\n<p>这里是一些常见的硬件相关的问题总结，供访客查阅。</p>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Linux",
      "url": "https://mrhope.site/linux/",
      "id": "https://mrhope.site/linux/",
      "content_html": "<h2 id=\"linux-教程\" tabindex=\"-1\"> Linux 教程</h2>\n<ul>\n<li>\n<p><a href=\"/linux/intro/\">Linux 介绍</a></p>\n<ul>\n<li>\n<p><a href=\"/linux/intro/intro.html\">Linux 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/history.html\">Linux 历史</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/language.html\">Linux 编写语言</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/advantage.html\">Linux 优势</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/desktop.html\">Linux 桌面环境</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/linux/file/\">Linux 文件</a></p>\n<ul>\n<li>\n<p><a href=\"/linux/file/file.html\">Linux 文件</a></p>\n</li>\n<li>\n<p><a href=\"/linux/file/dir.html\">Linux 目录</a></p>\n</li>\n<li>\n<p><a href=\"/linux/file/mount.html\">挂载</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/linux/command/\">Linux 命令</a></p>\n<ul>\n<li>\n<p><a href=\"/linux/command/command.html\">命令格式简介</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/dir.html\">目录相关</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/file.html\">文件相关</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/other.html\">其他命令</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/add.html\">命令的自动补全</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/excu.html\">命令的执行</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/path.html\">环境变量</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/ln.html\">创建链接</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"ubuntu\" tabindex=\"-1\"> ubuntu</h2>\n<ul>\n<li><a href=\"/linux/ubuntu/\">点击前往</a></li>\n</ul>\n<h2 id=\"centos\" tabindex=\"-1\"> CentOS</h2>\n<ul>\n<li><a href=\"/linux/centos.html\">点击前往</a></li>\n</ul>\n<h2 id=\"wsl\" tabindex=\"-1\"> WSL</h2>\n<ul>\n<li><a href=\"/linux/WSL.html\">点击前往</a></li>\n</ul>\n",
      "date_published": "2019-11-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "Mr.Hope 的随笔",
      "url": "https://mrhope.site/note/",
      "id": "https://mrhope.site/note/",
      "content_html": "<p>这里是 Mr.Hope 的一些随笔，后续被整理进博客中。</p>\n<h2 id=\"四季\" tabindex=\"-1\"> 四季</h2>\n<div>\n<p>介绍</p>\n<p>这是我在高一写的散文诗集，最初发表在空间日志上。</p>\n<p>后续也写了一些诗补充了进去，其中以 “秋之思” 篇幅最多</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n<ul>\n<li>\n<p><a href=\"/note/fall/catalog.html\">秋之思</a></p>\n</li>\n<li>\n<p><a href=\"/note/winter/note.html\">冬之语</a></p>\n</li>\n<li>\n<p><a href=\"/note/spring/1.html\">春之诗</a></p>\n</li>\n<li>\n<p><a href=\"/note/summer/1.html\">夏之歌</a></p>\n</li>\n</ul>\n<div>\n<p>其他方式</p>\n<p>也可查看 <a href=\"https://user.qzone.qq.com/1178522294\" target=\"_blank\" rel=\"noopener noreferrer\">空间相册</a></p>\n</div>\n<h2 id=\"笑谈人生\" tabindex=\"-1\"> 笑谈人生</h2>\n<div>\n<p>介绍</p>\n<p>这是我在高一写的人生感悟，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n<ul>\n<li><a href=\"/note/life/\">点击前往</a></li>\n</ul>\n<h2 id=\"轻言细语\" tabindex=\"-1\"> 轻言细语</h2>\n<div>\n<p>介绍</p>\n<p>这是我在高一写的一些小的散文诗，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n<ul>\n<li><a href=\"/note/poem/\">点击前往</a></li>\n</ul>\n<h2 id=\"node-js-相关\" tabindex=\"-1\"> Node.js 相关</h2>\n<ul>\n<li><a href=\"/note/node-js/current-path.html\">current-path 相关</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "物理笔记",
      "url": "https://mrhope.site/physics/",
      "id": "https://mrhope.site/physics/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/physics/electromagnetism/\">电磁学</a></p>\n</li>\n<li>\n<p><a href=\"/physics/optism/\">光学</a></p>\n</li>\n<li>\n<p><a href=\"/physics/tsp/\">热力学与统计物理</a></p>\n</li>\n<li>\n<p><a href=\"/physics/quatum/\">量子力学</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "软件教程",
      "url": "https://mrhope.site/software/",
      "id": "https://mrhope.site/software/",
      "content_html": "<h2 id=\"代码编辑器\" tabindex=\"-1\"> 代码编辑器</h2>\n<ul>\n<li><a href=\"/software/editor.html\">编辑器介绍</a></li>\n</ul>\n<h2 id=\"团队协作\" tabindex=\"-1\"> 团队协作</h2>\n<p>开发项目的代码版本管理以及多人协作使用 Git 软件</p>\n<ul>\n<li>\n<p><a href=\"/software/git/\">Git 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/\">GitHub 介绍</a></p>\n</li>\n</ul>\n<h2 id=\"浏览器\" tabindex=\"-1\"> 浏览器</h2>\n<p>在开发中，调试网页推荐使用 Chrome。</p>\n<ul>\n<li><a href=\"/software/chrome.html\">Chrome 介绍</a></li>\n</ul>\n<h2 id=\"后端\" tabindex=\"-1\"> 后端</h2>\n<h3 id=\"http-server\" tabindex=\"-1\"> Http Server</h3>\n<p>网站已经停止使用 Apache Lounge 编译的 httpd Apache。目前迁移到更加轻量，并发性能更好的 Nginx 上。</p>\n<ul>\n<li>\n<p><a href=\"/software/apache.html\">Apache</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/software/nginx.html\">Nginx</a></p>\n</li>\n</ul>\n<h3 id=\"抓包与-api-调试\" tabindex=\"-1\"> 抓包与 API 调试</h3>\n<ul>\n<li><a href=\"/software/postman.html\">Postman</a></li>\n</ul>\n<h2 id=\"工具软件\" tabindex=\"-1\"> 工具软件</h2>\n<ul>\n<li><a href=\"/software/tool/\">查看详情</a></li>\n</ul>\n<h2 id=\"手机-app\" tabindex=\"-1\"> 手机 APP</h2>\n<h3 id=\"sololearn\" tabindex=\"-1\"> soloLearn</h3>\n<p>一个代码在线学习社区，只有英文版。由于代码语义贴近英文原生逻辑，十分建议在编辑代码时 “think in English”。</p>\n<p>软件中的 code playground 可以在线运行大部分代码，大家在手机上就可以进行练习与尝试。</p>\n<h2 id=\"adobe-软件\" tabindex=\"-1\"> Adobe 软件</h2>\n<p>Adobe 全系软件的获取，请见 <a href=\"https://www.weibo.com/vposy\" target=\"_blank\" rel=\"noopener noreferrer\">vposy 的微博</a> 的置顶帖。</p>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "基础介绍",
      "url": "https://mrhope.site/code/basic/",
      "id": "https://mrhope.site/code/basic/",
      "summary": "这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。\n",
      "content_html": "<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>\n\n<ul>\n<li>\n<p><a href=\"/code/basic/computer.html\">计算机</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/os.html\">操作系统</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/file-extension.html\">文件扩展名</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/encoding.html\">文件编码</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/path.html\">路径</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/glob.html\">Glob 模式介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/debug.html\">开发简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/ci.html\">持续集成</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/license.html\">许可介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/basic/open-source-and-free.html\">开源与免费</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-12-26T00:00:00.000Z",
      "date_modified": "2022-10-10T05:08:58.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "GitHub",
      "url": "https://mrhope.site/code/github/",
      "id": "https://mrhope.site/code/github/",
      "content_html": "<h2 id=\"快速上手\" tabindex=\"-1\"> 快速上手</h2>\n<ul>\n<li>\n<p><a href=\"/code/github/intro.html\">GitHub 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/pr.html\">Pull Request</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/semantic.html\">语义化提交</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/pages.html\">GitHub Pages</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/speedup.html\">利用 Gitee 加速 GitHub 克隆</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github\" target=\"_blank\" rel=\"noopener noreferrer\">全部文档</a></li>\n</ul>\n<h3 id=\"入门指南\" tabindex=\"-1\"> 入门指南</h3>\n<ul>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></li>\n</ul>\n<h3 id=\"快速入门\" tabindex=\"-1\"> 快速入门</h3>\n<ul>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/set-up-git\" target=\"_blank\" rel=\"noopener noreferrer\">设置 Git</a></li>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/create-a-repo\" target=\"_blank\" rel=\"noopener noreferrer\">创建仓库</a></li>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/fork-a-repo\" target=\"_blank\" rel=\"noopener noreferrer\">复刻仓库</a></li>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/be-social\" target=\"_blank\" rel=\"noopener noreferrer\">社交化</a></li>\n</ul>\n<h3 id=\"了解-github\" tabindex=\"-1\"> 了解 GitHub</h3>\n<ul>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/types-of-github-accounts\" target=\"_blank\" rel=\"noopener noreferrer\">账户类型</a></li>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/access-permissions-on-github#%E4%B8%AA%E4%BA%BA%E7%94%A8%E6%88%B7%E5%B8%90%E6%88%B7\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 上的访问权限</a></li>\n<li><a href=\"https://docs.github.com/cn/free-pro-team@latest/github/getting-started-with-github/github-glossary\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub 词汇表</a></li>\n</ul>\n<h2 id=\"生态系统\" tabindex=\"-1\"> 生态系统</h2>\n<h3 id=\"github-cli\" tabindex=\"-1\"> GitHub Cli</h3>\n<p>GitHub CLI 是用于在计算机上使用 GitHub 功能的命令行工具。</p>\n<p>GitHub CLI 是用于从计算机的命令行使用 GitHub 的开源工具。从命令行操作时，您可以使用 GitHub CLI 来节省时间并避免切换上下文。</p>\n<p>您可以将以下 GitHub 功能与 GitHub CLI 结合使用。</p>\n<ul>\n<li>查看、创建、克隆和复刻仓库</li>\n<li>创建、关闭和列出议题和拉取请求</li>\n<li>审查、差异和合并拉取请求</li>\n<li>创建、编辑、列出和查看 Gist</li>\n</ul>\n<p>有关 GitHub CLI 用途的更多信息，请参阅 <a href=\"https://cli.github.com/manual\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub CLI 手册</a>。</p>\n<h3 id=\"github-desktop\" tabindex=\"-1\"> GitHub Desktop</h3>\n<p>GitHub Desktop 使用可视界面扩展并简化您的 Git 和 GitHub 工作流程。</p>\n<p>GitHub Desktop 是一种开源工具，可帮助您提高工作效率。GitHub Desktop 鼓励您和您的团队使用最佳实践协作处理 Git 和 GitHub。</p>\n<p>您可以使用 GitHub Desktop 执行许多任务，包括:</p>\n<ul>\n<li>以交互方式将更改添加到提交中</li>\n<li>快速将合作作者提交到提交中</li>\n<li>检出具有拉取请求的分支并查看 CI 状态</li>\n<li>比较更改的图像</li>\n</ul>\n<p>有关 GitHub Desktop 的更多信息，请参阅 GitHub Desktop 文档中的 <a href=\"https://docs.github.com/cn/free-pro-team@latest/desktop/installing-and-configuring-github-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">安装和配置 GitHub Desktop</a>。</p>\n<h3 id=\"手机版-github\" tabindex=\"-1\"> 手机版 GitHub</h3>\n<p>从移动设备对 GitHub 上的工作进行分类、协作和管理。</p>\n<p>手机版 GitHub 目前作为 Android 和 iOS app 提供给 GitHub.com 用户。</p>\n<p>手机版 GitHub 为您提供随时随地快速高效使用 GitHub 的方式。手机版 GitHub 是通过可信的第一方客户端应用程序访问 GitHub 数据的安全可靠方式。</p>\n<p>通过 手机版 GitHub，您可以:</p>\n<ul>\n<li>管理、分类和清除通知</li>\n<li>阅读、审查及协作处理问题和拉取请求</li>\n<li>搜索、浏览用户、仓库和组织以及与之交互</li>\n<li>当有人提及您的用户名时收到推送通知</li>\n</ul>\n<h4 id=\"安装-手机版-github\" tabindex=\"-1\"> 安装 手机版 GitHub</h4>\n<p>要安装 Android 或 iOS 版 手机版 GitHub，请参阅 <a href=\"https://github.com/mobile\" target=\"_blank\" rel=\"noopener noreferrer\">手机版 GitHub</a>。</p>\n",
      "date_published": "2019-11-20T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "代码学习教程",
      "url": "https://mrhope.site/code/language/",
      "id": "https://mrhope.site/code/language/",
      "content_html": "<ul>\n<li><a href=\"/code/language/learning.html\">如何学习一门语言</a></li>\n</ul>\n<h2 id=\"教程目录\" tabindex=\"-1\"> 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/\">JavaScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/\">TypeScript 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/\">Python 教程</a> (编写中...)</p>\n</li>\n<li>\n<p><a href=\"https://www.liaoxuefeng.com/wiki/1252599548343744\" target=\"_blank\" rel=\"noopener noreferrer\">Java 教程</a>(廖雪峰的博客)</p>\n</li>\n<li>\n<p><a href=\"/code/language/markdown/\">Markdown 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/yaml/\">YAML 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/json/\">JSON 教程</a></p>\n</li>\n</ul>\n<h2 id=\"linter\" tabindex=\"-1\"> Linter</h2>\n<ul>\n<li><a href=\"/code/language/linter/\">Linter 介绍</a></li>\n</ul>\n<div>\n<p>提示</p>\n<p>C 、C++、Java、PHP 正在编写中...</p>\n</div>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "教程"
      ]
    },
    {
      "title": "小程序",
      "url": "https://mrhope.site/code/mini-app/",
      "id": "https://mrhope.site/code/mini-app/",
      "summary": "\n提示\n在开发小程序之前。应当掌握 HTML、CSS、JavaScript 基础 以及 ES6。\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>在开发小程序之前。应当掌握 <a href=\"/code/website/html/\">HTML</a>、<a href=\"/code/website/css/\">CSS</a>、<a href=\"/code/language/js/guide/\">JavaScript 基础</a> 以及 <a href=\"/code/language/js/es6/\">ES6</a>。</p>\n</div>\n\n<h2 id=\"小程序基础简介\" tabindex=\"-1\"> 小程序基础简介</h2>\n<p>在微信小程序中主要有四种文件结构: <code>wxml</code>、<code>wxss</code>、<code>js</code> 和 <code>json</code>。其中 <code>wxml</code> 对应带有 vue.js 特征的 html5，<code>wxss</code> 对应 css3，<code>js</code> 对应 ES6 标准的的 javaScript。</p>\n<p>对于 QQ 小程序，其文件结构为 <code>QML</code>、<code>qss</code>、<code>js</code> 和 <code>json</code>。</p>\n<div>\n<p>提示</p>\n<p>QQ 小程序本质还是换汤不换药的，且 QQ 开发者工具兼容 <code>wxml</code> 与 <code>wss</code>)</p>\n</div>\n<p>小程序开发与网页开发极其相似。所以必须有适当的网页开发基础。零基础的人可能很难直接上手小程序开发。</p>\n<h2 id=\"教程目录\" tabindex=\"-1\"> 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/file-structure.html\">文件结构</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/env.html\">运行环境</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/\">小程序配置</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/config/app-config.html\">全局配置</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/page-config.html\">页面配置</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/sitemap-config.html\">sitemap 配置</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/\">小程序框架</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/intro.html\">框架介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/scene.html\">场景值</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/env.html\">运行环境</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/mechanism.html\">运行机制</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/update.html\">更新机制</a> <i>Content not supported</i></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/\">逻辑层</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/service/lifetime.html\">生命周期</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/route.html\">路由</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/register.html\">注册</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/app.html\">App()</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/page.html\">Page()</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/run.html\">运行</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/module.html\">模块化</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/\">API</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/\">视图层</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxml.html\">WXML</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxss.html\">WXSS</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs.html\">WXS</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/event.html\">事件</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/component.html\">基础组件</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/animation.html\">动画</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs.html\">WXS</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs-event.html\">WXS 事件</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/model.html\">建议双向绑定</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/selector.html\">获取界面上的节点信息</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/selector.html\">相应显示区域变化</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/rendering-cache.html\">初始渲染缓存</a> <i>Content not supported</i></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/\">小程序能力</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/network.html\">网络请求</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/storage.html\">存储</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/file-system.html\">文件系统</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/debug.html\">调试</a></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开发者工具\" tabindex=\"-1\"> 开发者工具</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/tools/interface.html\">工具界面简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/debug.html\">调试</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/npm.html\">npm</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/audit.html\">体验评分</a></p>\n</li>\n</ul>\n<h2 id=\"官方教程\" tabindex=\"-1\"> 官方教程</h2>\n<ul>\n<li><a href=\"https://developers.weixin.qq.com/ebook?action=get_post_info&amp;docid=0008aeea9a8978ab0086a685851c0a\" target=\"_blank\" rel=\"noopener noreferrer\">点击前往</a></li>\n</ul>\n<h2 id=\"案例\" tabindex=\"-1\"> 案例</h2>\n<ul>\n<li><a href=\"https://github.com/Hope-Studio/wxminiappdemo\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub repository</a></li>\n</ul>\n<h2 id=\"mr-hope-框架说明\" tabindex=\"-1\"> Mr.Hope 框架说明</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/framework/\">小程序框架使用说明</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/framework/tag-list.html\">tag 值参数表</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/framework/page.html\">setPage 库使用说明</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/framework/simple-debug.html\">界面简单开发学习指南</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/qr-code.html\">分享相关</a></p>\n</li>\n</ul>\n<h2 id=\"学习视频\" tabindex=\"-1\"> 学习视频</h2>\n<ul>\n<li>\n<p><a href=\"https://www.bilibili.com/video/av22790583/\" target=\"_blank\" rel=\"noopener noreferrer\">零基础开发小程序</a>(比较新的视频，强调总体思想)</p>\n</li>\n<li>\n<p><a href=\"https://www.bilibili.com/video/av11938917\" target=\"_blank\" rel=\"noopener noreferrer\">小程序-从入门到入土</a>(比较老的视频，针对每个组件或者 API 进行了针对的讲解与示范，但部分内容已经与最新官方文档不符)</p>\n</li>\n</ul>\n<h2 id=\"示例代码\" tabindex=\"-1\"> 示例代码</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/wechat-miniprogram/miniprogram-demo\" target=\"_blank\" rel=\"noopener noreferrer\">小程序实例源码</a></p>\n<p><img src=\"https://res.wx.qq.com/wxdoc/dist/assets/img/demo.ef5c5bef.jpg\" alt=\"小程序示例二维码\"></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li><a href=\"https://q.qq.com/wiki/\" target=\"_blank\" rel=\"noopener noreferrer\">QQ 小程序</a></li>\n<li><a href=\"https://developers.weixin.qq.com/miniprogram/dev/framework/\" target=\"_blank\" rel=\"noopener noreferrer\">微信小程序</a></li>\n<li><a href=\"https://developers.weixin.qq.com/community/develop/question\" target=\"_blank\" rel=\"noopener noreferrer\">微信小程序社区</a>\n<ul>\n<li><a href=\"https://developers.weixin.qq.com/community/develop/list/2?id=\" target=\"_blank\" rel=\"noopener noreferrer\">官方公告</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"qq-开发者工具\" tabindex=\"-1\"> QQ 开发者工具</h3>\n<p>现在很多功能还处于缺失状态，bug 到没之前那么多了。</p>\n<ul>\n<li>\n<p><a href=\"https://q.qq.com/wiki/\" target=\"_blank\" rel=\"noopener noreferrer\">查看详情</a></p>\n</li>\n<li>\n<p><a href=\"https://q.qq.com/wiki/tools/devtool/\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a></p>\n</li>\n</ul>\n<h2 id=\"微信开发者工具\" tabindex=\"-1\"> 微信开发者工具</h2>\n<p>微信开发者工具用来开发与调试微信小程序和微信相关网页的官方工具。小程序使用该开发工具进行开发。</p>\n<ul>\n<li>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/\">开发者工具教程</a></p>\n</li>\n<li>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方使用指南</a></p>\n</li>\n</ul>\n",
      "image": "https://res.wx.qq.com/wxdoc/dist/assets/img/demo.ef5c5bef.jpg",
      "date_published": "2019-11-25T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "Node.js",
      "url": "https://mrhope.site/code/node-js/",
      "id": "https://mrhope.site/code/node-js/",
      "summary": "Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。\n",
      "content_html": "<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>\n\n<h2 id=\"教程目录\" tabindex=\"-1\"> 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/node-js/intro.html\">Node.js 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/install.html\">Node.js 与 npm 安装</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/environment.html\">Node.js 环境</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/program.html\">编程</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/cjs.html\">Node.js CJS 模块</a></p>\n</li>\n</ul>\n<p>以上，就是 Node.js 的简易介绍，系统学习可以查看下方的详细教程。</p>\n<h2 id=\"初学者教程\" tabindex=\"-1\"> 初学者教程</h2>\n<ul>\n<li>\n<p><a href=\"https://www.nodebeginner.org/index-zh-cn.html\" target=\"_blank\" rel=\"noopener noreferrer\">Node.js 入门</a></p>\n</li>\n<li>\n<p><a href=\"https://www.w3cschool.cn/nodejs/\" target=\"_blank\" rel=\"noopener noreferrer\">W3CSchool</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li><a href=\"https://nodejs.org/dist/latest-v14.x/docs/api/\" target=\"_blank\" rel=\"noopener noreferrer\">地址</a></li>\n</ul>\n<h2 id=\"yarn\" tabindex=\"-1\"> Yarn</h2>\n<p>快速、可靠、安全的依赖管理工具。</p>\n<ul>\n<li>\n<p>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装速度更快。</p>\n</li>\n<li>\n<p>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p>\n</li>\n<li>\n<p>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。</p>\n</li>\n<li>\n<p><a href=\"https://www.yarnpkg.com/zh-Hans/docs/install#windows-stable\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址</a></p>\n</li>\n<li>\n<p><a href=\"https://www.yarnpkg.com/zh-Hans/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"命令\" tabindex=\"-1\"> 命令</h3>\n<ul>\n<li>\n<p><code>yarn install</code>: 执行安装</p>\n</li>\n<li>\n<p><code>yarn upgrade</code>: 执行升级</p>\n</li>\n<li>\n<p><code>yarn add &lt;package&gt;</code>: 添加一个包</p>\n</li>\n<li>\n<p><code>yarn config set cache-folder &lt;path&gt;</code>: 更改缓存文件夹</p>\n</li>\n<li>\n<p><code>yarn config set registry &lt;registry&gt;</code>: 更改源</p>\n<div>\n<p>提示</p>\n<p>在国内，建议换成淘宝源 <a href=\"https://registry.npm.taobao.org\" target=\"_blank\" rel=\"noopener noreferrer\">https://registry.npm.taobao.org</a></p>\n<p>即执行</p>\n<div><pre><code><span>yarn</span> config <span>set</span> registry https://registry.npm.taobao.org\n</code></pre><div aria-hidden=\"true\"><div></div></div></div></div>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-06-14T04:47:46.000Z",
      "authors": [],
      "tags": [
        "Node.js"
      ]
    },
    {
      "title": "React",
      "url": "https://mrhope.site/code/react/",
      "id": "https://mrhope.site/code/react/",
      "content_html": "<h2 id=\"创建-react-项目\" tabindex=\"-1\"> 创建 React 项目</h2>\n<p>使用 <code>create-react-app</code> 工具。</p>\n<p>创建普通模板:</p>\n<div><pre><code>npx create-react-app xxx\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>创建 TS 模板:</p>\n<div><pre><code>npx create-react-app xxx <span>--template</span> typescript\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"react-文档\" tabindex=\"-1\"> React 文档</h2>\n<ul>\n<li><a href=\"https://reactjs.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n<li><a href=\"https://react.docschina.org/docs/getting-started.html\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n</ul>\n",
      "date_published": "2020-05-08T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "前端"
      ]
    },
    {
      "title": "Vue.js",
      "url": "https://mrhope.site/code/vue/",
      "id": "https://mrhope.site/code/vue/",
      "content_html": "<p>Vue.js 是世界上主流的前端框架。</p>\n<p>官方介绍为：渐近式 JavaScript 框架。一款用于构建 Web 界面，易学易用，性能出色且功能丰富的框架。</p>\n<h2 id=\"vue-js-教程目录\" tabindex=\"-1\"> Vue.js 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/vue/install.html\">开发环境安装</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/get-started.html\">起步上手</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/vue.html\">Vue 单文件组件说明</a></p>\n</li>\n</ul>\n<h2 id=\"vue-生态\" tabindex=\"-1\"> Vue 生态</h2>\n<h3 id=\"vue-router\" tabindex=\"-1\"> Vue Router</h3>\n<ul>\n<li>\n<p><a href=\"/code/vue/router/\">Vue Router 讲解</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/router/demo.html\">Vue Router Demo</a></p>\n</li>\n</ul>\n<h3 id=\"vuex\" tabindex=\"-1\"> Vuex</h3>\n<ul>\n<li>\n<p><a href=\"/code/vue/vuex/\">Vuex 讲解</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/vuex/demo.html\">Vuex Demo</a></p>\n</li>\n</ul>\n<h3 id=\"vue-cli\" tabindex=\"-1\"> Vue Cli</h3>\n<ul>\n<li>\n<p><a href=\"/code/vue/cli/intro.html\">Vue Cli 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/cli/quick-dev.html\">使用 Vue Cli 进行快速开发</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/cli/file.html\">Vue Cli 文件处理</a></p>\n</li>\n</ul>\n<h3 id=\"其他-vue-生态\" tabindex=\"-1\"> 其他 Vue 生态</h3>\n<ul>\n<li><a href=\"https://vuepress-theme-hope.github.io/basic/vuepress/\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress</a>: 静态站点生成器；</li>\n<li><a href=\"https://vue.ant.design/docs/vue/introduce-cn/\" target=\"_blank\" rel=\"noopener noreferrer\">Ant Design Vue</a>: 阿里的一套 UI 组件库；</li>\n<li><a href=\"https://bootstrap-vue.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">BootstrapVue</a></li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li>\n<p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js 介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue.js API</a></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p><a href=\"https://cli.vuejs.org/zh/guide/cli-service.html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue CLI 3 介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://cli.vuejs.org/zh/config/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue CLI 3 配置</a></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p><a href=\"https://router.vuejs.org/zh/guide/#html\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Router 介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://cli.vuejs.org/zh/config/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Router 配置</a></p>\n</li>\n</ul>\n<hr>\n<ul>\n<li>\n<p><a href=\"https://vuex.vuejs.org/zh/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://vuex.vuejs.org/zh/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 配置</a></p>\n</li>\n</ul>\n<h2 id=\"其他文档\" tabindex=\"-1\"> 其他文档</h2>\n<ul>\n<li>\n<p><a href=\"/code/vue/component.html\">各组件使用说明</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/compare.html\">Vue 与小程序的异同</a></p>\n</li>\n<li>\n<p>VueConf 视频</p>\n<ul>\n<li>\n<p><a href=\"https://www.yuque.com/vueconf/2019/qg1yms\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Beyond Vue Loader</a></p>\n</li>\n<li>\n<p><a href=\"https://www.yuque.com/vueconf/2019/gwn1z0\" target=\"_blank\" rel=\"noopener noreferrer\">尤雨溪演讲视频</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/VueConf2019SH_Evan.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">尤雨溪演讲 PPT</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/intro-to-vuepres-1.x.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">VuePress 介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/Vue%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 单元测试</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/%E4%BD%BF%E7%94%A8Vue%E5%AE%9E%E7%8E%B00%E4%BB%A3%E7%A0%81%E4%BA%A4%E4%BA%92-winter.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">使用 Vue 实现 0 代码交互</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/Vue%20%E5%BC%80%E5%8F%91%20ECharts%20%E8%B8%A9%E5%9D%91%E6%8C%87%E5%8D%97.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Echart 与 Vue</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/Vue%20Beyond%20Vue%20Loader.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Vue Loader</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/vue/Mars%E6%A1%86%E6%9E%B6%E5%88%86%E4%BA%AB-vueconf.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">基于 Vue 的多端框架</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-06-14T04:47:46.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "网页入门",
      "url": "https://mrhope.site/code/website/",
      "id": "https://mrhope.site/code/website/",
      "summary": "网页需要三件套: HTML、CSS 和 JavaScript。\n\nHTML 定义了网页的内容\nCSS 描述了网页的样式\nJavaScript 编写网页的行为\n\n",
      "content_html": "<p>网页需要三件套: <strong>HTML</strong>、<strong>CSS</strong> 和 <strong>JavaScript</strong>。</p>\n<ol>\n<li>HTML 定义了网页的内容</li>\n<li>CSS 描述了网页的样式</li>\n<li>JavaScript 编写网页的行为</li>\n</ol>\n\n<div>\n<p>提示</p>\n<p>一个大型的网站，很少是直接使用原生代码写的。</p>\n<p>最新的网站大多数都是用三大框架(、、)搭建，并引入 npm 上的 UI 库编写而成。</p>\n<p>稍微老的网站会使用其他框架作为辅助，比如、等。</p>\n</div>\n<div>\n<p>网页标准指定</p>\n<p>互联网网页标准由 W3C 组织制定，它的全称是万维网联盟组织。</p>\n</div>\n<h2 id=\"html\" tabindex=\"-1\"> HTML</h2>\n<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)，描述了网页的骨架(具体结构)。</p>\n<ul>\n<li><a href=\"/code/website/html/\">HTML 教程</a></li>\n</ul>\n<h2 id=\"css\" tabindex=\"-1\"> CSS</h2>\n<p>CSS 指层叠样式表 (Cascading Style Sheets)，声明了网页的样式(具体布局)。</p>\n<ul>\n<li><a href=\"/code/website/css/\">CSS 教程</a></li>\n</ul>\n<h2 id=\"emmet\" tabindex=\"-1\"> Emmet</h2>\n<p>Emmet 是一种快速输入 HTML 和 CSS 的语法。</p>\n<ul>\n<li><a href=\"/code/website/emmet/\">Emmet 用法介绍</a></li>\n</ul>\n<h2 id=\"javascript\" tabindex=\"-1\"> JavaScript</h2>\n<p>JavaScript 是一种编程语言，声明了网页的交互逻辑。</p>\n<p>JavaScript 是一种轻量级的编程语言，为可插入 HTML 页面的编程代码。所有现代的 HTML 页面都使用 JavaScript。</p>\n<ul>\n<li><a href=\"/code/website/js.html\">JS 教程</a></li>\n</ul>\n<h3 id=\"typescript\" tabindex=\"-1\"> TypeScript</h3>\n<p>TypeScript 是 JavaScript 的一个超集，使得 JS 变成了一种强定义语言。TypeScript 由于其诸多优良特性，目前在前端的份额越来越大。</p>\n<ul>\n<li><a href=\"/code/language/typescript/\">TypeScript 教程</a></li>\n</ul>\n<h2 id=\"node-js\" tabindex=\"-1\"> Node.js</h2>\n<p>在深入了解并进行前端开发后，就避不开 Node。</p>\n<p>Node.js 是一款全球使用广泛的框架，可以用在前端与后端上，拥有大量的模块。Node.js 主要以其丰富并及其容易导入的 Node.js package，以及其方便管理 npm (Node.js Package Manager)闻名。</p>\n<ul>\n<li><a href=\"/code/node-js/\">Node.js 教程</a></li>\n</ul>\n<h2 id=\"历史前端框架\" tabindex=\"-1\"> 历史前端框架</h2>\n<h3 id=\"jquery\" tabindex=\"-1\"> jQuery</h3>\n<p>jQuery 是一个 JavaScript 库，极大地简化了 JavaScript 编程，很容易学习。</p>\n<p>jQuery 的优势在于它能够在互联网发展早期兼容各式各样的浏览器，并轻松的选定与操作 DOM。</p>\n<p>由于 MVVM 的兴起，目前 jQuery 已逐步被前端三大框架所取代。</p>\n<ul>\n<li>\n<p><a href=\"/code/website/jQuery/\">jQuery 教程</a></p>\n</li>\n<li>\n<p><a href=\"http://www.w3school.com.cn/jquery/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School</a></p>\n</li>\n<li>\n<p><a href=\"https://www.runoob.com/jquery/jquery-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></p>\n</li>\n</ul>\n<h3 id=\"bootstrap4\" tabindex=\"-1\"> Bootstrap4</h3>\n<p>Bootstrap 是全球最受欢迎的前端组件库，用于开发响应式布局、移动设备优先的 WEB 项目。</p>\n<p>Bootstrap 是一套用于 HTML、CSS 和 JS 开发的开源工具集。利用提供的 Sass 变量和大量 mixin、响应式栅格系统、可扩展的预制组件、基于 jQuery 的强大的插件系统，能够快速为您的想法开发出原型或者构建整个 app 。</p>\n<ul>\n<li>\n<p><a href=\"https://getbootstrap.com/docs/4.1/getting-started/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap 官方文档</a></p>\n</li>\n<li>\n<p><a href=\"https://v4.bootcss.com/docs/4.0/getting-started/introduction/\" target=\"_blank\" rel=\"noopener noreferrer\">bootstrap 4.0 中文文档</a></p>\n</li>\n</ul>\n<h2 id=\"现代前端框架\" tabindex=\"-1\"> 现代前端框架</h2>\n<h3 id=\"vue\" tabindex=\"-1\"> Vue</h3>\n<p>Vue 是一套轻量化的前端渐进式框架框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。</p>\n<p>Vue 与 React、Angular 一起合称前端三大框架。</p>\n<ul>\n<li>\n<p><a href=\"/code/vue/\">Vue 学习教程</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.vuejs.org/v2/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue 官方文档</a></p>\n</li>\n</ul>\n<h3 id=\"react\" tabindex=\"-1\"> React</h3>\n<ul>\n<li><a href=\"/code/react/\">React 教程</a></li>\n</ul>\n<h3 id=\"angular\" tabindex=\"-1\"> Angular</h3>\n<ul>\n<li><a href=\"/code/angular/\">Angular 教程</a></li>\n</ul>\n<h2 id=\"其他文档\" tabindex=\"-1\"> 其他文档</h2>\n<ul>\n<li><a href=\"/code/website/https.html\">HTTPS 介绍</a></li>\n</ul>\n",
      "date_published": "2019-09-01T00:00:00.000Z",
      "date_modified": "2022-09-07T17:18:06.000Z",
      "authors": [],
      "tags": [
        "前端"
      ]
    },
    {
      "title": "基础知识",
      "url": "https://mrhope.site/code/windows/",
      "id": "https://mrhope.site/code/windows/",
      "summary": "以下是有关于 Windows 10 系统的一些基础知识。\n",
      "content_html": "<p>以下是有关于 Windows 10 系统的一些基础知识。</p>\n\n<ul>\n<li>\n<p><a href=\"/code/windows/add-path.html\">添加到 path</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/shortcut-key.html\">Windows 快捷键</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/hidden-file.html\">显示文件后缀名与隐藏文件</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/cmd.html\">快速打开 CMD</a></p>\n</li>\n<li>\n<p><a href=\"/code/windows/notepad.html\">记事本的遗留问题</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-09-07T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "基础"
      ]
    },
    {
      "title": "设计文章",
      "url": "https://mrhope.site/design/articles/",
      "id": "https://mrhope.site/design/articles/",
      "content_html": "<h2 id=\"文章列表\" tabindex=\"-1\"> 文章列表</h2>\n<ul>\n<li>\n<p><a href=\"/design/articles/gestalt-principle.html\">格式塔原则</a></p>\n</li>\n<li>\n<p><a href=\"/design/articles/left-or-right.html\">布局中的左和右</a></p>\n</li>\n<li>\n<p><a href=\"/design/articles/infomation-flow.html\">信息流介绍</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-09-26T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "设计"
      ]
    },
    {
      "title": "图标",
      "url": "https://mrhope.site/design/icon/",
      "id": "https://mrhope.site/design/icon/",
      "summary": "本文介绍了 UI 设计中图标的相关介绍与技巧。\n",
      "content_html": "<p>本文介绍了 UI 设计中图标的相关介绍与技巧。</p>\n\n<h2 id=\"图标网站\" tabindex=\"-1\"> 图标网站</h2>\n<ul>\n<li>\n<p><a href=\"https://www.iconfont.cn/\" target=\"_blank\" rel=\"noopener noreferrer\">iconfont</a></p>\n<p>阿里妈妈 MUX 倾力打造的矢量图标管理、交流平台。</p>\n<p>设计师将图标上传到 Iconfont 平台，用户可以自定义下载多种格式的 icon，平台也可将图标转换为字体，便于前端工程师自由调整与调用。</p>\n<p>强大的图标在线编辑与自定义下载</p>\n<p>图标项目的项目管理、协同、分享</p>\n</li>\n</ul>\n<h2 id=\"相关文档\" tabindex=\"-1\"> 相关文档</h2>\n<p>图标是 UI 的设计体系最重要的组成部分之一，是任何 UI 界面中都不可或缺的视觉元素。了解图标相关的概念，以及正确绘制的方法，是入门 UI 设计的必备条件。</p>\n<ul>\n<li>\n<p><a href=\"/design/icon/intro.html\">图标介绍</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/type.html\">图标种类</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/guide.html\">图标设计指南</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/software.html\">图标设计软件</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/draw.html\">图标绘制流程</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/rule.html\">图标设计准则</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/line.html\">线性图标设计演示</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/flour.html\">面性图标设计指南</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/decorative.html\">装饰性图标设计指南</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/start.html\">启动图标设计指南</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/skill.html\">图标设计技巧</a></p>\n</li>\n<li>\n<p><a href=\"/design/icon/apply.html\">图标实践注意事项</a></p>\n</li>\n</ul>\n<h2 id=\"相关要求\" tabindex=\"-1\"> 相关要求</h2>\n<ul>\n<li>\n<p>了解图标的常见设计准则</p>\n<ul>\n<li>\n<p>能够对一个图标的好坏做出评判。</p>\n</li>\n<li>\n<p>了解不同的图标风格</p>\n</li>\n<li>\n<p>能够从现有图表库中中选取合适的图标应用到项目中。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>简单了解图标的制作软件与制作方式</p>\n<ul>\n<li>\n<p>能够制作简单的图标</p>\n</li>\n<li>\n<p>在项目拥有一套完善图标风格，但部分图标存在缺失时能够自制图标补全。</p>\n</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2020-09-13T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "设计"
      ]
    },
    {
      "title": "交互设计",
      "url": "https://mrhope.site/design/interact/",
      "id": "https://mrhope.site/design/interact/",
      "content_html": "<h2 id=\"文章列表\" tabindex=\"-1\"> 文章列表</h2>\n<ul>\n<li>\n<p><a href=\"/design/interact/search.html\">搜索框</a></p>\n</li>\n<li>\n<p><a href=\"/design/interact/text-field.html\">文本框</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-09-26T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "设计"
      ]
    },
    {
      "title": "导航设计教程",
      "url": "https://mrhope.site/design/navigation/",
      "id": "https://mrhope.site/design/navigation/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/design/navigation/intro.html\">导航设计介绍</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/navbar.html\">导航栏概述与设计方式</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/navbar-design.html\">导航栏设计技巧</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/sidebar-navigate.html\">侧边导航设计</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/tabbar.html\">标签导航设计</a></p>\n</li>\n<li>\n<p><a href=\"/design/navigation/tabbar-design.html\">标签导航设计技巧</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-09-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "设计"
      ]
    },
    {
      "title": "Bash 教程",
      "url": "https://mrhope.site/linux/bash/",
      "id": "https://mrhope.site/linux/bash/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/linux/bash/intro.html\">简介</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/grammar.html\">基本语法</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/expansion.html\">模式扩展</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/quotation.html\">引号和转义</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/variable.html\">变量</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/string.html\">字符串操作</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/arithmetic.html\">算术运算</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/readline.html\">行操作</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/stack.html\">目录堆栈</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/script.html\">脚本入门</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/read.html\">read 命令</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/condition.html\">条件判断</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/loop.html\">循环</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/function.html\">函数</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/array.html\">数组</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/set.html\">set 命令</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/debug.html\">脚本除错</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/mktemp.html\">mktemp 命令，trap 命令</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/startup.html\">启动环境</a></p>\n</li>\n<li>\n<p><a href=\"/linux/bash/prompt.html\">命令提示符</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [
        {
          "name": "阮一峰"
        }
      ],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "Linux 命令格式",
      "url": "https://mrhope.site/linux/command/",
      "id": "https://mrhope.site/linux/command/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/linux/command/command.html\">命令格式简介</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/dir.html\">目录相关</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/file.html\">文件相关</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/other.html\">其他命令</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/add.html\">命令的自动补全</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/excu.html\">命令的执行</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/path.html\">环境变量</a></p>\n</li>\n<li>\n<p><a href=\"/linux/command/ln.html\">创建链接</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-18T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "文件",
      "url": "https://mrhope.site/linux/file/",
      "id": "https://mrhope.site/linux/file/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/linux/file/file.html\">Linux 文件</a></p>\n</li>\n<li>\n<p><a href=\"/linux/file/dir.html\">Linux 目录</a></p>\n</li>\n<li>\n<p><a href=\"/linux/file/mount.html\">挂载</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-17T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "Linux 简介",
      "url": "https://mrhope.site/linux/intro/",
      "id": "https://mrhope.site/linux/intro/",
      "content_html": "<h1 id=\"linux-简介\" tabindex=\"-1\"> Linux 简介</h1>\n<ul>\n<li>\n<p><a href=\"/linux/intro/intro.html\">Linux 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/history.html\">Linux 历史</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/language.html\">Linux 编写语言</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/advantage.html\">Linux 优势</a></p>\n</li>\n<li>\n<p><a href=\"/linux/intro/desktop.html\">Linux 桌面环境</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "ubuntu",
      "url": "https://mrhope.site/linux/ubuntu/",
      "id": "https://mrhope.site/linux/ubuntu/",
      "content_html": "<h1 id=\"ubuntu\" tabindex=\"-1\"> ubuntu</h1>\n<ul>\n<li>\n<p><a href=\"/linux/ubuntu/manage.html\">管理包</a></p>\n</li>\n<li>\n<p><a href=\"/linux/ubuntu/debug.html\">开发软件</a></p>\n</li>\n<li>\n<p><a href=\"/linux/ubuntu/webserver.html\">网络服务器相关</a></p>\n</li>\n<li>\n<p><a href=\"/linux/ubuntu/lang.html\">语言切换</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-21T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Linux"
      ]
    },
    {
      "title": "秋之思",
      "url": "https://mrhope.site/note/fall/",
      "id": "https://mrhope.site/note/fall/",
      "summary": "\n介绍\n这是我在高一写的一个散文诗集，最初发表在空间日志上。\n近日将其作为少年回忆，整理在博客中。\n\n",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的一个散文诗集，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n\n<ul>\n<li><a href=\"https://h5.qzone.qq.com/ugc/share/?sharetag=7C43C7A8C547ED48D9D15448BEECAF99&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT4Y23uM&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>空间相册链接</strong></a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "in东师小程序贡献指南",
      "url": "https://mrhope.site/note/innenu/",
      "id": "https://mrhope.site/note/innenu/",
      "content_html": "<h2 id=\"简介\" tabindex=\"-1\"> 简介</h2>\n<p>in 东师小程序的大部分页面都均由 YAML 文件生成。开发者只需要使用编辑器编辑 YAML，即可增添或修改小程序页面。</p>\n<div>\n<p>YAML</p>\n<p>YAML 是专门用来写配置文件的语言，非常简洁和强大，其设计目标，就是方便人类读写。</p>\n</div>\n<h2 id=\"快速上手\" tabindex=\"-1\"> 快速上手</h2>\n<ol>\n<li>为了编写小程序页面配置文件，您需要先学习 <a href=\"/note/innenu/yaml.html\">YAML 的规则</a>，同时简单浏览一下一款编辑器 <a href=\"/software/vscode/simple.html\">VSCode 的介绍</a></li>\n<li>掌握上述两个内容之后，您就可以尝试对照 <a href=\"/note/innenu/tag-list.html\">小程序简易参数表</a> 通过 VSCode 编写页面 YAML 文件了，如果您觉得直接上手太难，您可以参阅 <a href=\"/note/innenu/get-started.html\">交互式教程</a> 来体验一个示例。</li>\n</ol>\n<div>\n<p>更多参考</p>\n<p>所有的小程序页面都在 <a href=\"https://github.com/Hope-Studio/innenu-res/blob/main/res/\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Hope-Studio/innenu-res/blob/main/res/</a> 下，您可以尽情的进行参考。</p>\n</div>\n<h2 id=\"开发注意事项\" tabindex=\"-1\"> 开发注意事项</h2>\n<p>下面是开发中需要注意的一些问题。</p>\n<h3 id=\"文件命名\" tabindex=\"-1\"> 文件命名</h3>\n<p>由于小程序的访问是通过网址进行的，需要避免中文。页面 YAML 和媒体文件的文件名，请遵守以下命名规则:</p>\n<ol>\n<li>文件名只包含英文与数字和 <code>-</code>，不要包含特殊符号、空格或者中文字符。由多个单词组成的文件名建议使用 <code>-</code> 链接。如 <code>厚普公益学校</code> 可以表示为 <code>hope-good-school</code>。</li>\n<li>尽可能使用简短的单词，必要时可缩写，比如使用 <code>intro</code> <code>desc</code> <code>guide</code> 而不是 <code>introduction</code> <code>description</code>，<code>handbook</code>。</li>\n<li>表达相同或相近内容的多个媒体文件用 &quot;短词组+编号&quot; 的形式即可，不要试图用很长的文字命名。</li>\n</ol>\n<h3 id=\"文本排版\" tabindex=\"-1\"> 文本排版</h3>\n<ol>\n<li>中文和英文之间最好使用空格隔开</li>\n<li>尽量使用英文的括号</li>\n</ol>\n<h3 id=\"注意高亮\" tabindex=\"-1\"> 注意高亮</h3>\n<p>如果您在使用 VSCode 进行编辑，您可能会注意到，数字和布尔值、字符串、对象的键名使用三种不同的颜色进行高亮。</p>\n<p>如果您编写的文件出现“红色波浪线”，或您编写的内容的高亮颜色，和其类型不符，那么说明您编写的格式出现了错误。</p>\n<h3 id=\"图片压缩\" tabindex=\"-1\"> 图片压缩</h3>\n<p>图片在拍摄需使用 <a href=\"https://squoosh.app/\" target=\"_blank\" rel=\"noopener noreferrer\">Squoosh</a> 进行压缩。</p>\n<ul>\n<li>含有透明区域的图片需要压缩至 Brower PNG 格式</li>\n<li>Gif 无需压缩</li>\n<li>其他图片压缩到 MozJpeg</li>\n</ul>\n<p>不含有文字、不需要细节的图片保持 4 万左右分辨率即可，如果图片使用后置摄像机拍摄，即 12 万或 20 万像素，压缩时可酌情考虑 50%缩放。</p>\n<h3 id=\"文件转码\" tabindex=\"-1\"> 文件转码</h3>\n<p>由于 QQ 小程序对 2003 版本 Office 格式支持极差，即 <code>.doc</code> <code>.xls</code> <code>.ppt</code>。如遇到此类文件，请尝试用 Office 打开，并转换为最新版格式 (<code>docx</code>、<code>xlsx</code>、<code>pptx</code>)。具体方式为 “文件” - “信息” - “转换”。</p>\n<h3 id=\"媒体文件存放\" tabindex=\"-1\"> 媒体文件存放</h3>\n<p>由于 YAML 是纯文本文件，所有的图片、文件等需单独列出，并在对应的配置项处填入对应的网址。</p>\n<p>如:</p>\n<ul>\n<li><strong>img</strong> 组件的 <code>src</code></li>\n<li><strong>doc</strong> 组件的 <code>url</code></li>\n</ul>\n<p>in 东师服务器文件结构如下:</p>\n<ul>\n<li>文件存放在 <code>https://mp.innenu.com/file/</code> 下</li>\n<li>图片存放在 <code>https://mp.innenu.com/img/</code> 下</li>\n<li>页面 YAML 存放在 <code>https://mp.innenu.com/res/</code> 下</li>\n<li>图标存放在 <code>https://mp.innenu.com/res/icon/</code> 下</li>\n</ul>\n<div>\n<p>相关信息</p>\n<p>关于完整的服务器文件结构，请访问 <a href=\"https://github.com/Hope-Studio/innenu-res\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/Hope-Studio/innenu-res</a></p>\n</div>\n<h3 id=\"点位获取\" tabindex=\"-1\"> 点位获取</h3>\n<p>如需获取地理点位，请使用 <a href=\"https://lbs.qq.com/getPoint/\" target=\"_blank\" rel=\"noopener noreferrer\">腾讯地图选点工具</a>。</p>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-07-30T03:43:15.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "笑谈人生",
      "url": "https://mrhope.site/note/life/",
      "id": "https://mrhope.site/note/life/",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的人生感悟，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n<ul>\n<li><a href=\"https://h5.qzone.qq.com/ugc/share/?sharetag=126FDE98906EB067815B0EEA0F72BEC0&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT49u8Sd&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>空间相册链接</strong></a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "NodeJS",
      "url": "https://mrhope.site/note/node-js/",
      "id": "https://mrhope.site/note/node-js/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li><a href=\"/note/node-js/current-path.html\">current-path 相关</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "轻言细语",
      "url": "https://mrhope.site/note/poem/",
      "id": "https://mrhope.site/note/poem/",
      "summary": "\n介绍\n这是我在高一写的一些小的散文诗，最初发表在空间日志上。\n近日将其作为少年回忆，整理在博客中。\n\n",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的一些小的散文诗，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n\n<ul>\n<li><a href=\"https://h5.qzone.qq.com/ugc/share/?sharetag=38F7D93E6B85A1E5BE96A0C93F17652D&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT29nRn4&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>空间相册链接</strong></a></li>\n</ul>\n<blockquote>\n<p>由 赵婧一 摘抄</p>\n</blockquote>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "春之诗",
      "url": "https://mrhope.site/note/spring/",
      "id": "https://mrhope.site/note/spring/",
      "summary": "\n介绍\n这是我在高一写的第三篇散文诗集，最初发表在空间日志上。\n近日将其作为少年回忆，整理在博客中。\n\n",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的第三篇散文诗集，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "夏之歌",
      "url": "https://mrhope.site/note/summer/",
      "id": "https://mrhope.site/note/summer/",
      "summary": "\n介绍\n这是我在高一写的第四篇散文诗集，最初发表在空间日志上。\n近日将其作为少年回忆，整理在博客中。\n\n",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的第四篇散文诗集，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "冬之语",
      "url": "https://mrhope.site/note/winter/",
      "id": "https://mrhope.site/note/winter/",
      "summary": "\n介绍\n这是我在高一写的第二篇散文诗集，最初发表在空间日志上。\n近日将其作为少年回忆，整理在博客中。\n\n",
      "content_html": "<div>\n<p>介绍</p>\n<p>这是我在高一写的第二篇散文诗集，最初发表在空间日志上。</p>\n<p>近日将其作为少年回忆，整理在博客中。</p>\n</div>\n\n<ul>\n<li><a href=\"https://h5.qzone.qq.com/ugc/share/?sharetag=2AC65F349EEC4F95F047C3685529CF9E&amp;subtype=3&amp;ciphertext=&amp;sid=&amp;blog_photo=&amp;g=&amp;res_uin=1178522294&amp;cellid=V10JYlHT0dBJbe&amp;subid=&amp;bp1=&amp;bp2=&amp;bp7=&amp;appid=4&amp;g_f=2000000103\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>空间相册链接</strong></a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-28T17:19:37.000Z",
      "authors": [],
      "tags": [
        "随笔"
      ]
    },
    {
      "title": "电磁学笔记",
      "url": "https://mrhope.site/physics/electromagnetism/",
      "id": "https://mrhope.site/physics/electromagnetism/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/physics/electromagnetism/charpter1.html\">第一章</a></p>\n</li>\n<li>\n<p><a href=\"/physics/electromagnetism/charpter2.html\">第二章</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "光学笔记",
      "url": "https://mrhope.site/physics/optism/",
      "id": "https://mrhope.site/physics/optism/",
      "content_html": "<h1 id=\"光学笔记\" tabindex=\"-1\"> 光学笔记</h1>\n<ul>\n<li><a href=\"/physics/optism/charpter1.html\">第一章</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "量子力学笔记",
      "url": "https://mrhope.site/physics/quatum/",
      "id": "https://mrhope.site/physics/quatum/",
      "content_html": "<h1 id=\"量子力学笔记\" tabindex=\"-1\"> 量子力学笔记</h1>\n<ul>\n<li><a href=\"/physics/quatum/charpter1.html\">第一章</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "热力学与统计物理笔记",
      "url": "https://mrhope.site/physics/tsp/",
      "id": "https://mrhope.site/physics/tsp/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/physics/tsp/definition.html\">定义</a></p>\n</li>\n<li>\n<p><a href=\"/physics/tsp/charpter1.html\">第一章</a></p>\n</li>\n<li>\n<p><a href=\"/physics/tsp/charpter2.html\">第二章</a></p>\n</li>\n<li>\n<p><a href=\"/physics/tsp/charpter3.html\">第三章</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "物理"
      ]
    },
    {
      "title": "COMSOL",
      "url": "https://mrhope.site/software/comsol/",
      "id": "https://mrhope.site/software/comsol/",
      "summary": "这里是一些 Comsol 的学习资料整理与学习心得。\n",
      "content_html": "<p>这里是一些 Comsol 的学习资料整理与学习心得。</p>\n\n<div>\n<p>写在前面</p>\n<p>本教程只适用于从未接触过仿真的人员，内容比较基础。</p>\n<p>我本人主要活跃在计算机相关领域，本科专业是物理学，并没有学过系统的工程原理、数值分析、模型建构以及相关的误差分析。COMSOL 是我本科制作毕设的软件，在毕设前，我也使用 COMSOL 构建了几个模型，完成了一些装置的模拟与优化。</p>\n<p>本篇教程，是根据我对 COMSOL 以及有限元仿真的理解书写的，一定会有一些疏漏与理解错误之处，还望大家指出。另外我主要研究过的方向是传热与流体流动，在本教程的举例中，也大多以这两方面为主。对其他的方向与模块，我是不熟悉的。</p>\n</div>\n<ul>\n<li>\n<p><a href=\"/software/comsol/install.html\">软件下载与安装</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/intro.html\">有限元分析软件介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/get-started.html\">快速上手 COMSOL</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/geometry/\">几何</a></p>\n<ul>\n<li>\n<p><a href=\"/software/comsol/geometry/view.html\">浏览几何</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/geometry/build.html\">构建几何</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/software/comsol/select.html\">选择</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/material.html\">材料</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/physic-field.html\">物理场</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/mesh/\">网格</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/study.html\">研究</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/result.html\">结果</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/app.html\">APP</a></p>\n</li>\n</ul>\n<h2 id=\"文档\" tabindex=\"-1\"> 文档</h2>\n<ul>\n<li>\n<p><a href=\"https://mrhope.site/file/comsol/IntroductionToCOMSOLMultiphysics.zh_CN.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL 新手指南</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/comsol/App%E5%BC%80%E5%8F%91%E5%99%A8%E7%AE%80%E4%BB%8B.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL App 开发器简介</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/comsol/ApplicationProgrammingGuide.zh_CN.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL Multiphysics 应用程序编程指南</a></p>\n</li>\n<li>\n<p><a href=\"http://cn.comsol.com/multiphysics/\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL 多物理场仿真百科</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/videos\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL 视频中心</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video-training\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL 在线课程回放</a> (应该是在疫情期间限时开放)</p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/papers-presentations\" target=\"_blank\" rel=\"noopener noreferrer\">基于 COMSOL 的论文</a></p>\n</li>\n</ul>\n<h2 id=\"其他杂项\" tabindex=\"-1\"> 其他杂项</h2>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/how-to-make-boundary-conditions-conditional-in-your-simulation/\" target=\"_blank\" rel=\"noopener noreferrer\">如何设置特殊边界条件</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/how-to-customize-the-comsol-desktop-and-use-keyboard-shortcuts/\" target=\"_blank\" rel=\"noopener noreferrer\">如何定制 COMSOL Desktop<sup>®</sup> 和使用键盘快捷键</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/how-to-use-the-find-and-auto-completion-tools-for-faster-model-setup/\" target=\"_blank\" rel=\"noopener noreferrer\">使用查找工具和自动完成工具加快建模过程</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-29T00:00:00.000Z",
      "date_modified": "2022-02-07T16:53:33.000Z",
      "authors": [],
      "tags": [
        "软件"
      ]
    },
    {
      "title": "Git",
      "url": "https://mrhope.site/software/git/",
      "id": "https://mrhope.site/software/git/",
      "summary": "Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。\n\n交互式学习\n如果您觉得本文太枯燥，这里有一个 交互式的分支演示与学习网站。您可以在这里领略 Git 的魅力。\n但 Mr.Hope 仍建议您操作完再系统的学习并阅读以下内容。\n\n",
      "content_html": "<p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。在开发中分布式文件管理系统，可以便于多人协作开发。</p>\n<div>\n<p>交互式学习</p>\n<p>如果您觉得本文太枯燥，这里有一个 <a href=\"http://learngitbranching.js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">交互式的分支演示与学习网站</a>。您可以在这里领略 Git 的魅力。</p>\n<p>但 Mr.Hope 仍建议您操作完再系统的学习并阅读以下内容。</p>\n</div>\n\n<h2 id=\"git-安装\" tabindex=\"-1\"> Git 安装</h2>\n<ul>\n<li><a href=\"/software/git/install.html\">安装教程</a></li>\n</ul>\n<h2 id=\"git-教程\" tabindex=\"-1\"> Git 教程</h2>\n<ul>\n<li>\n<p><a href=\"/software/git/intro.html\">Git 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/create-repo.html\">创建版本库</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/status.html\">纵向查看</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/recall.html\">撤销操作</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/reset.html\">版本回退</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/working-directory.html\">工作区和暂存区</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/change.html\">修改管理</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/remote.html\">远程仓库</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/branch.html\">分支管理</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/tag.html\">标签管理</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/ignore.html\">忽略特殊文件</a></p>\n</li>\n</ul>\n<h2 id=\"深入-git\" tabindex=\"-1\"> 深入 Git</h2>\n<ul>\n<li>\n<p><a href=\"/software/git/working.html\">Git 原理</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/custom.html\">自定义 Git</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/gitLFS.html\">大文件管理存储</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/server.html\">搭建 Git 服务器</a></p>\n</li>\n<li>\n<p><a href=\"/software/git/merge.html\">高级合并</a></p>\n</li>\n</ul>\n<h2 id=\"扩展阅读\" tabindex=\"-1\"> 扩展阅读</h2>\n<ul>\n<li>\n<p><a href=\"https://git-scm.com/doc\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/git/gitCheatSheet.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Git-cheatSheet</a> (PDF)</p>\n</li>\n<li>\n<p><a href=\"https://mrhope.site/file/git/progit_v2.1.45.pdf\" target=\"_blank\" rel=\"noopener noreferrer\">Pro Git</a> (PDF)</p>\n</li>\n</ul>\n<div>\n<p>TODO</p>\n<ol>\n<li>完善分支合并部分，加入更多命令介绍。如 <code>cherry-pick</code> <code>squash-merge</code>。</li>\n<li>介绍 Git Hook</li>\n</ol>\n</div>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-09-07T17:18:06.000Z",
      "authors": [],
      "tags": [
        "Git"
      ]
    },
    {
      "title": "工具软件",
      "url": "https://mrhope.site/software/tool/",
      "id": "https://mrhope.site/software/tool/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/software/tool/power-toys.html\">PowerToys</a>: Windows 实用工具合集</p>\n</li>\n<li>\n<p><a href=\"https://github.com/huiyadanli/PasteEx\" target=\"_blank\" rel=\"noopener noreferrer\">PasteEx</a>: Paste As File 把剪贴板的内容直接粘贴为文件</p>\n</li>\n<li>\n<p><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener noreferrer\">typora</a>: 一个页面很漂亮的 Markdown 编辑器</p>\n</li>\n<li>\n<p><a href=\"https://potplayer.daum.net/?lang=zh_CN\" target=\"_blank\" rel=\"noopener noreferrer\">Potplayer</a>: 心目中最 NB 的视频播放器，没有之一</p>\n</li>\n<li>\n<p><a href=\"/software/tool/terminal/\">Terminal</a>: Windows 终端</p>\n</li>\n<li>\n<p><a href=\"/software/tool/powershell.html\">PowerShell</a>: Windows 的命令行外壳程序和脚本环境</p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "VS Code",
      "url": "https://mrhope.site/software/vscode/",
      "id": "https://mrhope.site/software/vscode/",
      "content_html": "<p>Visual Studio Code 是一个轻量级但功能强大的源代码编辑器，可在您的桌面上运行，并且可用于 Windows，macOS 和 Linux。它具有对 JavaScript，TypeScript 和 Node.js 的内置支持，并具有丰富的其他语言 (例如 C ++，C＃，Java，Python，PHP，Go) 和运行时 (例如 .NET 和 Unity) 扩展的生态系统。由微软出品，因其开源，可扩展和众多插件成为全球最受欢迎的代码编辑器。</p>\n<h2 id=\"特点\" tabindex=\"-1\"> 特点</h2>\n<ul>\n<li>\n<p>智能代码补全</p>\n<p>使用 IntelliSense 可以更智能地编写代码、变量，方法和导入模块的完成。</p>\n</li>\n<li>\n<p>热门扩展</p>\n<p>启用其他语言，主题，调试器，命令等。</p>\n</li>\n</ul>\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/software/vscode/install.html\">安装</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/get-started.html\">快速上手</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/\">指南</a></p>\n<ul>\n<li>\n<p><a href=\"/software/vscode/guide/basic.html\">基础介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/customization.html\">个性化介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/extension.html\">扩展介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/file.html\">文件介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/edit.html\">编辑技巧</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/intellisense.html\">智能补全</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/git.html\">Git 支持</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/debug.html\">调试介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/task.html\">任务介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/command.html\">命令行介绍</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/software/vscode/ui.html\">VS Code 用户界面</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/shortcut-key.html\">VS Code 快捷键</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/settings.html\">VS Code 设置</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/extension.html\">VS Code 推荐扩展</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li>\n<p><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer\">VS Code 官网</a></p>\n</li>\n<li>\n<p><a href=\"https://code.visualstudio.com/docs\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></p>\n</li>\n<li>\n<p><a href=\"https://code.visualstudio.com/docs/getstarted/introvideos\" target=\"_blank\" rel=\"noopener noreferrer\">官方视频</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "VS Code"
      ]
    },
    {
      "title": "GitHub Actions",
      "url": "https://mrhope.site/code/github/actions/",
      "id": "https://mrhope.site/code/github/actions/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/github/actions/intro.html\">GitHub Actions 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/config.html\">Workflow 配置</a></p>\n</li>\n</ul>\n<h2 id=\"常用-github-action\" tabindex=\"-1\"> 常用 GitHub Action</h2>\n<ul>\n<li>\n<p><a href=\"/code/github/actions/checkout.html\">checkout</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/cache.html\">cache</a></p>\n</li>\n<li>\n<p><a href=\"/code/github/actions/gh-pages-deploy.html\">GitHub Pages 部署</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.github.com/cn/actions\" target=\"_blank\" rel=\"noopener noreferrer\">文档地址</a></p>\n</li>\n<li>\n<p><a href=\"https://help.github.com/en/actions/reference/events-that-trigger-workflows\" target=\"_blank\" rel=\"noopener noreferrer\">Workflow 触发事件</a></p>\n</li>\n<li>\n<p><a href=\"https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions\" target=\"_blank\" rel=\"noopener noreferrer\">Workflow 配置</a></p>\n</li>\n</ul>\n",
      "date_published": "2021-02-18T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "GitHub"
      ]
    },
    {
      "title": "C 语言教程",
      "url": "https://mrhope.site/code/language/C/",
      "id": "https://mrhope.site/code/language/C/",
      "summary": "\n提示\n正在完善中...\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>正在完善中...</p>\n</div>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "C"
      ]
    },
    {
      "title": "C++ 教程",
      "url": "https://mrhope.site/code/language/C++/",
      "id": "https://mrhope.site/code/language/C++/",
      "summary": "\n提示\n正在完善中...\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>正在完善中...</p>\n</div>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "C++"
      ]
    },
    {
      "title": "Dart 教程",
      "url": "https://mrhope.site/code/language/dart/",
      "id": "https://mrhope.site/code/language/dart/",
      "summary": "\n提示\n正在完善中...\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>正在完善中...</p>\n</div>\n\n<h2 id=\"dart-快速入门\" tabindex=\"-1\"> dart 快速入门</h2>\n<ul>\n<li><a href=\"/code/language/dart/samples/samples.html\">案例</a></li>\n<li><a href=\"/code/language/dart/samples/cheatsheet.html\">概要介绍</a></li>\n<li><a href=\"/code/language/dart/samples/iterable.html\">遍历</a></li>\n</ul>\n<h2 id=\"官网\" tabindex=\"-1\"> 官网</h2>\n<ul>\n<li><a href=\"https://dart.dev/\" target=\"_blank\" rel=\"noopener noreferrer\">英文官网</a></li>\n<li><a href=\"https://www.dartcn.com/\" target=\"_blank\" rel=\"noopener noreferrer\">中文官网</a> (不推荐，已有一年多未更新)</li>\n</ul>\n",
      "date_published": "2020-05-30T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "dart"
      ]
    },
    {
      "title": "Java 教程",
      "url": "https://mrhope.site/code/language/java/",
      "id": "https://mrhope.site/code/language/java/",
      "summary": "\n提示\n正在完善中...\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>正在完善中...</p>\n</div>\n\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "Java"
      ]
    },
    {
      "title": "JavaScript 教程",
      "url": "https://mrhope.site/code/language/js/",
      "id": "https://mrhope.site/code/language/js/",
      "summary": "\n注\n部分内容参考/来自廖雪峰、阮一峰书籍与博客\n\n",
      "content_html": "<div>\n<p>注</p>\n<p>部分内容参考/来自廖雪峰、阮一峰书籍与博客</p>\n</div>\n\n<h2 id=\"javascript-是什么\" tabindex=\"-1\"> JavaScript 是什么</h2>\n<ul>\n<li><a href=\"/code/language/js/intro/\">导论</a></li>\n</ul>\n<div>\n<p>有趣的历史</p>\n<p>1995 年网景公司正凭借其 Navigator 浏览器成为 Web 时代开启时最著名的第一代互联网公司。由于网景公司希望能在静态 HTML 页面上添加一些动态效果，于是叫 Brendan Eich 这哥们在两周之内设计出了 JavaScript 语言。您没看错，这哥们只用了 10 天时间 (这也是为什么至今也有人也在吐槽 JavaScript 垃圾的原因)。</p>\n<p>为什么起名叫 JavaScript? 原因是当时 Java 语言非常红火，所以网景公司就来碰瓷了，实际上两者没任何关系。</p>\n<ul>\n<li><a href=\"/code/language/js/intro/history.html\">更多历史介绍</a></li>\n</ul>\n</div>\n<h2 id=\"入门教程\" tabindex=\"-1\"> 入门教程</h2>\n<ul>\n<li><a href=\"/code/language/js/guide/\">快速上手</a></li>\n</ul>\n<h2 id=\"更多教程\" tabindex=\"-1\"> 更多教程</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/types/\">数据类型</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/operators/\">运算符</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/\">函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/\">对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/\">浏览器</a></p>\n</li>\n</ul>\n<h2 id=\"进阶\" tabindex=\"-1\"> 进阶</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/es6/\">ES6 教程</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/\">JQuery</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/error.html\">错误处理</a></p>\n</li>\n<li>\n<p><a href=\"/code/node-js/\">node.js</a></p>\n</li>\n</ul>\n<h2 id=\"在线教程\" tabindex=\"-1\"> 在线教程</h2>\n<ul>\n<li>\n<p><a href=\"https://wangdoc.com/javascript/\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript 在线教程</a></p>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\" target=\"_blank\" rel=\"noopener noreferrer\">JavaScript MDN 教程</a></p>\n</li>\n</ul>\n<h2 id=\"许可协议\" tabindex=\"-1\"> 许可协议</h2>\n<p>此部分博客采用 <a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.zh\" target=\"_blank\" rel=\"noopener noreferrer\">知识共享 署名-相同方式共享 3.0 协议</a></p>\n",
      "date_published": "2019-09-12T00:00:00.000Z",
      "date_modified": "2022-06-14T04:47:46.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "JSON 教程",
      "url": "https://mrhope.site/code/language/json/",
      "id": "https://mrhope.site/code/language/json/",
      "summary": "JSON: JavaScript Object Notation(JavaScript 对象表示法)\n\n\nJSON 是存储和交换文本信息的语法。类似 XML。\n\n\nJSON 比 XML 更小、更快，更易解析。\n\n\nJSON 是轻量级的文本数据交换格式\n\n\nJSON 独立于语言: JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态(PHP，JSP，.NET)编程语言都支持 JSON。\n\n\nJSON 具有自我描述性，更易理解\n\n\n",
      "content_html": "<p>JSON: JavaScript Object Notation(JavaScript 对象表示法)</p>\n<ul>\n<li>\n<p>JSON 是存储和交换文本信息的语法。类似 XML。</p>\n</li>\n<li>\n<p>JSON 比 XML 更小、更快，更易解析。</p>\n</li>\n<li>\n<p>JSON 是轻量级的文本数据交换格式</p>\n</li>\n<li>\n<p>JSON 独立于语言: JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。目前非常多的动态(PHP，JSP，.NET)编程语言都支持 JSON。</p>\n</li>\n<li>\n<p>JSON 具有自我描述性，更易理解</p>\n</li>\n</ul>\n\n<h2 id=\"json-值\" tabindex=\"-1\"> JSON 值</h2>\n<p>JSON 值可以是:</p>\n<ul>\n<li>数字(整数或浮点数)</li>\n<li>字符串(在双引号中)</li>\n<li>逻辑值(<code>true</code> 或 <code>false</code>)</li>\n<li>数组(在中括号中)</li>\n<li>对象(在大括号中)</li>\n<li>null</li>\n</ul>\n<h2 id=\"json-数字\" tabindex=\"-1\"> JSON 数字</h2>\n<p>JSON 数字可以是整型或者浮点型:</p>\n<p><strong>例:</strong></p>\n<ul>\n<li><code>5201314</code></li>\n<li><code>-1</code></li>\n<li><code>3.141592654</code></li>\n</ul>\n<h2 id=\"json-布尔值\" tabindex=\"-1\"> JSON 布尔值</h2>\n<p>JSON 布尔值可以是 <code>true</code> 或者 <code>false</code></p>\n<h2 id=\"json-字符串\" tabindex=\"-1\"> JSON 字符串</h2>\n<p>JSON 字符串需要用双括号 <code>&quot;</code> 包含，如果内部含有英文引号 <code>&quot;</code>，需要使用 <code>\\</code> 转义。</p>\n<p><strong>例:</strong></p>\n<ul>\n<li><code>&quot;Mr.Hope is handsome&quot;</code></li>\n<li><code>&quot;春眠不觉晓，处处闻啼鸟&quot;</code></li>\n<li><code>&quot;A saying goes: \\&quot;Great hopes make great man.\\&quot;&quot;</code></li>\n</ul>\n<h2 id=\"json-对象\" tabindex=\"-1\"> JSON 对象</h2>\n<p>JSON 对象在大括号 <code>{}</code> 中书写以 <code>键: 值</code> 对的方式书写，不同键值对之间用 <code>,</code> 分隔。</p>\n<p><strong>例:</strong></p>\n<div><pre><code><span>{</span>\n  <span>\"tag\"</span><span>:</span> <span>\"text\"</span><span>,</span>\n  <span>\"heading\"</span><span>:</span> <span>\"校园卡说明\"</span><span>,</span>\n  <span>\"text\"</span><span>:</span> <span>\"校园卡是东师的金融消费卡\"</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><h2 id=\"json-数组\" tabindex=\"-1\"> JSON 数组</h2>\n<p>JSON 数组在中括号 <code>[]</code> 中书写，不同元素间用 <code>,</code> 隔开。</p>\n<h2 id=\"json-null\" tabindex=\"-1\"> JSON null</h2>\n<p>JSON 可以设置 <code>null</code> 值</p>\n",
      "date_published": "2020-07-25T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JSON"
      ]
    },
    {
      "title": "linter 介绍",
      "url": "https://mrhope.site/code/language/linter/",
      "id": "https://mrhope.site/code/language/linter/",
      "summary": "linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。\n在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 linter，能够确保相同的使用不同换行方式、缩进、标记代码会最终格式化为相同的输出。\n",
      "content_html": "<p>linter 用来检查程序的语法错误，并即时标注和指出来 (例如，把声明了但没使用的多余变量指出来，向错误语句添加红色波浪线)，是程序开发的辅助工具。同时，linter 也有统一规范代码书写方式的功能。</p>\n<p>在大型项目中，编码需要统一的风格，比如在 JavaScript 中使用单引号还是双引号包裹字符串，在何时进行折行等。目前各种语言基本都有自己的出色 linter，能够确保相同的使用不同换行方式、缩进、标记代码会最终格式化为相同的输出。</p>\n\n<h2 id=\"prettier\" tabindex=\"-1\"> Prettier</h2>\n<p>Prettier 是一个前端知名的 linter，它可以代码规范根据设置为唯一的排列格式。它支持 markdown, html, css, js, ts, jsx, tsx, json, vue 等多种文件格式。</p>\n<h2 id=\"eslint\" tabindex=\"-1\"> ESlint</h2>\n<p>ESlint 是一个知名的 JavaScript linter，借助插件它也可以提供其他扩展语言的支持，如 jsx, ts, tsx, vue 等。</p>\n<h2 id=\"clang-format\" tabindex=\"-1\"> clang-format</h2>\n<p>clang-format 是 C/ C++ / Object-C 最流行的代码格式化工具，提供多种预设的代码风格。</p>\n<ul>\n<li><a href=\"/code/language/linter/clang-format.html\">查看详情</a></li>\n</ul>\n<h2 id=\"checkstyle\" tabindex=\"-1\"> checkStyle</h2>\n<p>checkStyle 是比较流行的 Java linter</p>\n",
      "date_published": "2020-10-21T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "Markdown",
      "url": "https://mrhope.site/code/language/markdown/",
      "id": "https://mrhope.site/code/language/markdown/",
      "summary": "Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。\nMarkdown 的目标是实现「易读易写」。\nMarkdown 的主要目的是用来作为一种网络内容的写作用语言。\n",
      "content_html": "<p>Markdown 是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p>\n<p>Markdown 的目标是实现「易读易写」。</p>\n<p>Markdown 的主要目的是用来作为一种网络内容的<strong>写作用语言</strong>。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li><a href=\"/code/language/markdown/intro.html\">简介</a></li>\n<li><a href=\"/code/language/markdown/block.html\">块元素</a></li>\n<li><a href=\"/code/language/markdown/inline.html\">行内元素</a></li>\n<li><a href=\"/code/language/markdown/extend.html\">扩展与其他内容</a></li>\n</ul>\n<h2 id=\"markdown-效果演示\" tabindex=\"-1\"> Markdown 效果演示</h2>\n<ul>\n<li><a href=\"/code/language/markdown/demo.html\">查看详情</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "PHP 语言教程",
      "url": "https://mrhope.site/code/language/php/",
      "id": "https://mrhope.site/code/language/php/",
      "content_html": "<div>\n<p>提示</p>\n<p>正在完善中...</p>\n</div>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "PHP"
      ]
    },
    {
      "title": "Python 语言教程",
      "url": "https://mrhope.site/code/language/python/",
      "id": "https://mrhope.site/code/language/python/",
      "summary": "\n优点: Python 是一种高级语言，它可以用更少的代码量完成相同工作。\n缺点: Python 是一种脚本语言，它的执行效率不是很高。\n\n",
      "content_html": "<ul>\n<li>优点: Python 是一种高级语言，它可以用更少的代码量完成相同工作。</li>\n<li>缺点: Python 是一种脚本语言，它的执行效率不是很高。</li>\n</ul>\n\n<div>\n<p>注意</p>\n<p>本教程基于 Python3, Python2 已经过时停止维护多年，请不要使用学习。</p>\n</div>\n<h2 id=\"python-简介\" tabindex=\"-1\"> Python 简介</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/intro/intro.html\">Python 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/intro/install.html\">Python 安装</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/intro/interpreter.html\">Python 解释器</a></p>\n</li>\n</ul>\n<h2 id=\"python-快速入门\" tabindex=\"-1\"> Python 快速入门</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/guide/write.html\">第一个 Python 程序</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/io.html\">输入与输出</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/basic.html\">基础语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/string.html\">字符串</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/list-and-tuple.html\">List 和 Tuple</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/condition.html\">条件判断</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/loop.html\">循环</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/dict-and-set.html\">Dictionary 和 Set</a></p>\n</li>\n</ul>\n<h2 id=\"python-函数\" tabindex=\"-1\"> Python 函数</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/function/intro.html\">函数介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/define.html\">函数定义</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/call.html\">函数调用</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/argument.html\">函数参数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/recursive.html\">递归调用</a></p>\n</li>\n</ul>\n<h2 id=\"python-高级语法\" tabindex=\"-1\"> Python 高级语法</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/advance/slice.html\">切片</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/iteration.html\">迭代</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/list-comprehensions.html\">列表生成式</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/generator.html\">生成器</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/iterator.html\">迭代器</a></p>\n</li>\n</ul>\n<h2 id=\"函数式编程\" tabindex=\"-1\"> 函数式编程</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/intro.html\">高阶函数介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/map-and-reduce.html\">map / reduce</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/filter.html\">filter</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/sorted.html\">sorted</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/return-function.html\">返回函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/anonymous-function.html\">匿名函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/decorator.html\">装饰器</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/parital-function.html\">偏函数</a></p>\n</li>\n</ul>\n<h2 id=\"相关工具\" tabindex=\"-1\"> 相关工具</h2>\n<ul>\n<li><a href=\"https://c.runoob.com/compile/9\" target=\"_blank\" rel=\"noopener noreferrer\">Python 在线运行器</a></li>\n</ul>\n",
      "date_published": "2020-05-18T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "TypeScript 教程",
      "url": "https://mrhope.site/code/language/typescript/",
      "id": "https://mrhope.site/code/language/typescript/",
      "summary": "TypeScript 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法。\n",
      "content_html": "<p>TypeScript 是一种由微软开发的自由和开源的编程语言，它是 JavaScript 的一个超集，扩展了 JavaScript 的语法。</p>\n\n<h2 id=\"语法特性\" tabindex=\"-1\"> 语法特性</h2>\n<ul>\n<li>类 Classes</li>\n<li>接口 Interfaces</li>\n<li>模块 Modules</li>\n<li>类型注解 Type annotations</li>\n<li>编译时类型检查 Compile time type checking</li>\n<li>Arrow 函数 (类似 C# 的 Lambda 表达式)</li>\n</ul>\n<blockquote>\n<p>更多内容可以参考: 下方目录。</p>\n</blockquote>\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/typescript/intro/\">简介</a></p>\n<ul>\n<li><a href=\"/code/language/typescript/intro/what-is-typescript.html\">什么是 TypeScript</a></li>\n<li><a href=\"/code/language/typescript/intro/get-typescript.html\">安装 TypeScript</a></li>\n<li><a href=\"/code/language/typescript/intro/hello-typescript.html\">Hello TypeScript</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/basics/\">基础</a></p>\n<ul>\n<li><a href=\"/code/language/typescript/basics/primitive-data-types.html\">原始数据类型</a></li>\n<li><a href=\"/code/language/typescript/basics/any.html\">任意值</a></li>\n<li><a href=\"/code/language/typescript/basics/type-inference.html\">类型推论</a></li>\n<li><a href=\"/code/language/typescript/basics/union-types.html\">联合类型</a></li>\n<li><a href=\"/code/language/typescript/basics/type-of-object-interfaces.html\">对象的类型——接口</a></li>\n<li><a href=\"/code/language/typescript/basics/type-of-array.html\">数组的类型</a></li>\n<li><a href=\"/code/language/typescript/basics/type-of-function.html\">函数的类型</a></li>\n<li><a href=\"/code/language/typescript/basics/type-assertion.html\">类型断言</a></li>\n<li><a href=\"/code/language/typescript/basics/declaration-files.html\">声明文件</a></li>\n<li><a href=\"/code/language/typescript/basics/built-in-objects.html\">内置对象</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/advanced/\">进阶</a></p>\n<ul>\n<li><a href=\"/code/language/typescript/advanced/type-aliases.html\">类型别名</a></li>\n<li><a href=\"/code/language/typescript/advanced/string-literal-types.html\">字符串字面量类型</a></li>\n<li><a href=\"/code/language/typescript/advanced/tuple.html\">元组</a></li>\n<li><a href=\"/code/language/typescript/advanced/enum.html\">枚举</a></li>\n<li><a href=\"/code/language/typescript/advanced/class.html\">类</a></li>\n<li><a href=\"/code/language/typescript/advanced/class-and-interfaces.html\">类与接口</a></li>\n<li><a href=\"/code/language/typescript/advanced/generics.html\">泛型</a></li>\n<li><a href=\"/code/language/typescript/advanced/declaration-merging.html\">声明合并</a></li>\n<li><a href=\"/code/language/typescript/advanced/further-reading.html\">扩展阅读</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/language/typescript/engineering/\">工程</a></p>\n<ul>\n<li><a href=\"/code/language/typescript/engineering/lint.html\">代码检查</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"javascript-与-typescript-的区别\" tabindex=\"-1\"> JavaScript 与 TypeScript 的区别</h2>\n<p>TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。</p>\n<p>TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。</p>\n<h2 id=\"typescript-官网文档\" tabindex=\"-1\"> TypeScript 官网文档</h2>\n<ul>\n<li><a href=\"http://www.typescriptlang.org/docs/home.html\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看官网</a></li>\n<li><a href=\"https://www.tslang.cn/docs/home.html\" target=\"_blank\" rel=\"noopener noreferrer\">点击查看第三方中文文档</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "TypeScript"
      ]
    },
    {
      "title": "YAML 教程",
      "url": "https://mrhope.site/code/language/yaml/",
      "id": "https://mrhope.site/code/language/yaml/",
      "content_html": "<p>编程免不了要写配置文件，怎么写配置也是一门学问。</p>\n<p>YAML 是专门用来写配置文件的语言，非常简洁和强大。</p>\n<h2 id=\"yaml-介绍\" tabindex=\"-1\"> yaml 介绍</h2>\n<p>YAML 语言(发音 /ˈjæməl/ )的设计目标，就是方便人类读写。它实质上是一种通用的数据串行化格式。</p>\n<p>YAML 的全称是 YAML Ain’t Markup Language。</p>\n<p>它的基本语法规则如下。</p>\n<ul>\n<li>大小写敏感</li>\n<li>使用缩进表示层级关系</li>\n<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>\n<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>\n</ul>\n<p><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略。</p>\n<p>YAML 支持的数据结构有三种。</p>\n<ul>\n<li>对象: 键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</li>\n<li>数组: 一组按次序排列的值，又称为序列(sequence) / 列表(list)</li>\n<li>纯量(scalars): 单个的、不可再分的值</li>\n</ul>\n<h2 id=\"如何打开或编辑-yaml\" tabindex=\"-1\"> 如何打开或编辑 yaml</h2>\n<p>推荐使用 VS Code，具体详见<a href=\"/software/vscode/simple.html\">VS Code 简单介绍</a>。</p>\n<h2 id=\"数据结构介绍\" tabindex=\"-1\"> 数据结构介绍</h2>\n<h3 id=\"对象\" tabindex=\"-1\"> 对象</h3>\n<p>对象的一组键值对，使用冒号结构表示。</p>\n<div><pre><code><span>animal</span><span>:</span> pets\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>animal</span><span>:</span> <span>\"pets\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</p>\n<div><pre><code><span>hash</span><span>:</span> <span>{</span> <span>name</span><span>:</span> Steve<span>,</span> <span>foo</span><span>:</span> bar <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span> <span>hash</span><span>:</span> <span>{</span> <span>name</span><span>:</span> <span>'Steve'</span><span>,</span> <span>foo</span><span>:</span> <span>'bar'</span> <span>}</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"数组\" tabindex=\"-1\"> 数组</h3>\n<p>一组连词线开头的行，构成一个数组。</p>\n<div><pre><code><span>-</span> Cat\n<span>-</span> Dog\n<span>-</span> Goldfish\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>[</span><span>\"Cat\"</span><span>,</span> <span>\"Dog\"</span><span>,</span> <span>\"Goldfish\"</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p>\n<div><pre><code><span>-</span> <span>-</span> Cat\n  <span>-</span> Dog\n  <span>-</span> Goldfish\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>[</span><span>[</span><span>\"Cat\"</span><span>,</span> <span>\"Dog\"</span><span>,</span> <span>\"Goldfish\"</span><span>]</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>数组也可以采用行内表示法。</p>\n<div><pre><code><span>animal</span><span>:</span> <span>[</span>Cat<span>,</span> Dog<span>]</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>animal</span><span>:</span> <span>[</span><span>\"Cat\"</span><span>,</span> <span>\"Dog\"</span><span>]</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><h3 id=\"复合结构\" tabindex=\"-1\"> 复合结构</h3>\n<p>对象和数组可以结合使用，形成复合结构。</p>\n<div><pre><code><span>languages</span><span>:</span>\n  <span>-</span> Ruby\n  <span>-</span> Perl\n  <span>-</span> Python\n\n<span>websites</span><span>:</span>\n  <span>YAML</span><span>:</span> yaml.org\n  <span>Ruby</span><span>:</span> ruby<span>-</span>lang.org\n  <span>Python</span><span>:</span> python.org\n  <span>Perl</span><span>:</span> use.perl.org\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>languages</span><span>:</span> <span>[</span><span>\"Ruby\"</span><span>,</span> <span>\"Perl\"</span><span>,</span> <span>\"Python\"</span><span>]</span><span>,</span>\n  <span>websites</span><span>:</span>\n    <span>{</span>\n      <span>YAML</span><span>:</span> <span>\"yaml.org\"</span><span>,</span>\n      <span>Ruby</span><span>:</span> <span>\"ruby-lang.org\"</span><span>,</span>\n      <span>Python</span><span>:</span> <span>\"python.org\"</span><span>,</span>\n      <span>Perl</span><span>:</span> <span>\"use.perl.org\"</span><span>,</span>\n    <span>}</span><span>,</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id=\"纯量\" tabindex=\"-1\"> 纯量</h3>\n<p>纯量是最基本的、不可再分的值。以下数据类型都属于 JavaScript 的纯量。</p>\n<ul>\n<li>字符串</li>\n<li>布尔值</li>\n<li>整数</li>\n<li>浮点数</li>\n<li>Null</li>\n<li>时间</li>\n<li>日期</li>\n</ul>\n<p>数值直接以字面量的形式表示。</p>\n<div><pre><code><span>number</span><span>:</span> <span>12.30</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>number</span><span>:</span> <span>12.3</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>布尔值用 <code>true</code> 和 <code>false</code> 表示。</p>\n<div><pre><code><span>isSet</span><span>:</span> <span>true</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>isSet</span><span>:</span> <span>true</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p><code>null</code> 用 <code>~</code> 表示。</p>\n<div><pre><code><span>parent</span><span>:</span> <span>~</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>parent</span><span>:</span> <span>null</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>时间采用 ISO8601 格式。</p>\n<div><pre><code><span>iso8601</span><span>:</span> <span>2001-12-14t21:59:43.10-05:00</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>iso8601</span><span>:</span> <span>new</span> <span>Date</span><span>(</span><span>\"2001-12-14t21:59:43.10-05:00\"</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>日期采用复合 iso8601 格式的年、月、日表示。</p>\n<div><pre><code><span>date</span><span>:</span> <span>1976-07-31</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>date</span><span>:</span> <span>new</span> <span>Date</span><span>(</span><span>\"1976-07-31\"</span><span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>YAML 允许使用两个感叹号，强制转换数据类型。</p>\n<div><pre><code><span>e</span><span>:</span> <span>!!str</span> <span>123</span>\n<span>f</span><span>:</span> <span>!!str</span> <span>true</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span> <span>e</span><span>:</span> <span>'123'</span><span>,</span> <span>f</span><span>:</span> <span>'true'</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h3 id=\"字符串\" tabindex=\"-1\"> 字符串</h3>\n<p>字符串是最常见，也是最复杂的一种数据类型。</p>\n<p>字符串默认不使用引号表示。</p>\n<div><pre><code><span>str</span><span>:</span> 这是一行字符串\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>str</span><span>:</span> <span>\"这是一行字符串\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>如果字符串之中包含空格或特殊字符，需要放在引号之中。</p>\n<div><pre><code><span>str</span><span>:</span> <span>\"内容: 字符串\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>str</span><span>:</span> <span>\"内容: 字符串\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>单引号和双引号都可以使用，双引号不会对特殊字符转义。</p>\n<div><pre><code><span>s1</span><span>:</span> <span>'内容\\n字符串'</span>\n<span>s2</span><span>:</span> <span>\"内容\\n字符串\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span> <span>s1</span><span>:</span> <span>'内容\\\\n字符串'</span><span>,</span> <span>s2</span><span>:</span> <span>'内容\\n字符串'</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>单引号之中如果还有单引号，必须连续使用两个单引号转义。</p>\n<div><pre><code><span>str</span><span>:</span> <span>\"labor's day\"</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>str</span><span>:</span> <span>\"labor's day\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>字符串可以写成多行，从第二行开始，必须有一个单空格缩进。换行符会被转为空格。</p>\n<div><pre><code><span>str</span><span>:</span> 这是一段\n  多行\n  字符串\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>转为 JavaScript 如下。</p>\n<div><pre><code><span>{</span>\n  <span>str</span><span>:</span> <span>\"这是一段 多行 字符串\"</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div></div></div><p>多行字符串可以使用 <code>|</code> 保留换行符，也可以使用 <code>&gt;</code> 折叠换行。</p>\n<div><pre><code><span>this</span><span>:</span> <span>|</span><span>\n  Foo\n  Bar</span>\n<span>that</span><span>:</span> <span>></span><span>\n  Foo\n  Bar</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>转为 JavaScript 代码如下。</p>\n<div><pre><code><span>{</span> <span>this</span><span>:</span> <span>'Foo\\nBar\\n'</span><span>,</span> <span>that</span><span>:</span> <span>'Foo Bar\\n'</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><p><code>+</code> 表示保留文字块末尾的换行，<code>-</code> 表示删除字符串末尾的换行。</p>\n<div><pre><code><span>s1</span><span>:</span> <span>|</span><span>\n  Foo</span>\n\n<span>s2</span><span>:</span> <span>|</span>+\n  Foo\n\n<span>s3</span><span>:</span> <span>|</span><span>-</span>\n  Foo\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>转为 JavaScript 代码如下。</p>\n<div><pre><code><span>{</span> <span>s1</span><span>:</span> <span>'Foo\\n'</span><span>,</span> <span>s2</span><span>:</span> <span>'Foo\\n\\n\\n'</span><span>,</span> <span>s3</span><span>:</span> <span>'Foo'</span> <span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"引用\" tabindex=\"-1\"> 引用</h2>\n<p>锚点 <code>&amp;</code> 和别名 <code>*</code>，可以用来引用。</p>\n<div><pre><code><span>defaults</span><span>:</span> <span>&amp;defaults</span>\n  <span>adapter</span><span>:</span> postgres\n  <span>host</span><span>:</span> localhost\n\n<span>development</span><span>:</span>\n  <span>database</span><span>:</span> myapp_development\n  <span>&lt;&lt;</span><span>:</span> <span>*defaults</span>\n\n<span>test</span><span>:</span>\n  <span>database</span><span>:</span> myapp_test\n  <span>&lt;&lt;</span><span>:</span> <span>*defaults</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>等同于下面的代码。</p>\n<div><pre><code><span>defaults</span><span>:</span>\n  <span>adapter</span><span>:</span> postgres\n  <span>host</span><span>:</span> localhost\n\n<span>development</span><span>:</span>\n  <span>database</span><span>:</span> myapp_development\n  <span>adapter</span><span>:</span> postgres\n  <span>host</span><span>:</span> localhost\n\n<span>test</span><span>:</span>\n  <span>database</span><span>:</span> myapp_test\n  <span>adapter</span><span>:</span> postgres\n  <span>host</span><span>:</span> localhost\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>&amp;</code> 用来建立锚点(defaults)，<code>&lt;&lt;</code> 表示合并到当前数据，<code>*</code> 用来引用锚点。</p>\n<p>下面是另一个例子。</p>\n<div><pre><code><span>-</span> <span>&amp;showell</span> Steve\n<span>-</span> Clark\n<span>-</span> Brian\n<span>-</span> Oren\n<span>-</span> <span>*showell</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div></div></div><p>转为 JavaScript 代码如下。</p>\n<div><pre><code><span>[</span><span>\"Steve\"</span><span>,</span> <span>\"Clark\"</span><span>,</span> <span>\"Brian\"</span><span>,</span> <span>\"Oren\"</span><span>,</span> <span>\"Steve\"</span><span>]</span><span>;</span>\n</code></pre><div aria-hidden=\"true\"><div></div></div></div><h2 id=\"函数和正则表达式的转换\" tabindex=\"-1\"> 函数和正则表达式的转换</h2>\n<p>这是 JS-YAML 库特有的功能，可以把函数和正则表达式转为字符串。(官方 yaml 标准里不包含这个部分)</p>\n<div><pre><code><span># example.yml</span>\n\n<span>fn</span><span>:</span> function () <span>{</span> return 1 <span>}</span>\n<span>reg</span><span>:</span> /test/\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div></div></div><p>解析上面的 yml 文件的代码如下。</p>\n<div><pre><code><span>var</span> yaml <span>=</span> <span>require</span><span>(</span><span>\"js-yaml\"</span><span>)</span><span>;</span>\n<span>var</span> fs <span>=</span> <span>require</span><span>(</span><span>\"fs\"</span><span>)</span><span>;</span>\n\n<span>try</span> <span>{</span>\n  <span>var</span> doc <span>=</span> yaml<span>.</span><span>load</span><span>(</span>fs<span>.</span><span>readFileSync</span><span>(</span><span>\"./example.yml\"</span><span>,</span> <span>\"utf8\"</span><span>)</span><span>)</span><span>;</span>\n  console<span>.</span><span>log</span><span>(</span>doc<span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>e<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>从 JavaScript 对象还原到 yaml 文件的代码如下。</p>\n<div><pre><code><span>var</span> yaml <span>=</span> <span>require</span><span>(</span><span>\"js-yaml\"</span><span>)</span><span>;</span>\n<span>var</span> fs <span>=</span> <span>require</span><span>(</span><span>\"fs\"</span><span>)</span><span>;</span>\n\n<span>var</span> obj <span>=</span> <span>{</span>\n  <span>fn</span><span>:</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>\n    <span>return</span> <span>1</span><span>;</span>\n  <span>}</span><span>,</span>\n  <span>reg</span><span>:</span> <span><span>/</span><span>test</span><span>/</span></span><span>,</span>\n<span>}</span><span>;</span>\n\n<span>try</span> <span>{</span>\n  fs<span>.</span><span>writeFileSync</span><span>(</span><span>\"./example.yml\"</span><span>,</span> yaml<span>.</span><span>dump</span><span>(</span>obj<span>)</span><span>,</span> <span>\"utf8\"</span><span>)</span><span>;</span>\n<span>}</span> <span>catch</span> <span>(</span>e<span>)</span> <span>{</span>\n  console<span>.</span><span>log</span><span>(</span>e<span>)</span><span>;</span>\n<span>}</span>\n</code></pre><div aria-hidden=\"true\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>",
      "date_published": "2020-07-26T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "YAML"
      ]
    },
    {
      "title": "小程序框架说明",
      "url": "https://mrhope.site/code/mini-app/framework/",
      "id": "https://mrhope.site/code/mini-app/framework/",
      "content_html": "<h2 id=\"开发框架优点\" tabindex=\"-1\"> 开发框架优点</h2>\n<ol>\n<li>\n<p>将界面开发的复杂过程转换为编写简单的 yaml 文件。开发门槛低，</p>\n</li>\n<li>\n<p>拥有详细的开发文档说明，简单易懂，页面文件自述性高，没有开发基础的人也可以经过简单阅读后看懂页面文件大体描述内容。<a href=\"/code/mini-app/framework/demo.html\">查看例子点这里</a></p>\n</li>\n<li>\n<p>开发者无需着眼于界面样式或是功能的实现，只需着眼于在 yaml 文件中添加渲染界面所需参数并赋值，即可完成界面编写。开发者只需在开发过程中按照开发说明录入参数，并注意格式即可。</p>\n</li>\n</ol>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "小程序指南",
      "url": "https://mrhope.site/code/mini-app/guide/",
      "id": "https://mrhope.site/code/mini-app/guide/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/file-structure.html\">文件结构</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/env.html\">运行环境</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/\">小程序配置</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/config/app-config.html\">全局配置</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/page-config.html\">页面配置</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/config/sitemap-config.html\">sitemap 配置</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/\">小程序框架</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/intro.html\">框架介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/scene.html\">场景值</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/env.html\">运行环境</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/mechanism.html\">运行机制</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/frame/update.html\">更新机制</a> <i>Content not supported</i></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/\">逻辑层</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/service/lifetime.html\">生命周期</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/route.html\">路由</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/register.html\">注册</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/app.html\">App()</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/page.html\">Page()</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/run.html\">运行</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/module.html\">模块化</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/service/api/\">API</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/\">视图层</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxml.html\">WXML</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/view/data-bind.html\">数据绑定</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/condition-render.html\">条件渲染</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/list-render.html\">列表渲染</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/template.html\">模板</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxss.html\">WXSS</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs.html\">WXS</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/event.html\">事件</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/component.html\">基础组件</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/animation.html\">动画</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs.html\">WXS</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/wxs-event.html\">WXS 事件</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/model.html\">建议双向绑定</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/selector.html\">获取界面上的节点信息</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/selector.html\">相应显示区域变化</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/view/rendering-cache.html\">初始渲染缓存</a> <i>Content not supported</i></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/\">小程序能力</a></p>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/network.html\">网络请求</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/storage.html\">存储</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/file-system.html\">文件系统</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/guide/ability/debug.html\">调试</a></p>\n</li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2019-11-25T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "工具使用",
      "url": "https://mrhope.site/code/mini-app/tools/",
      "id": "https://mrhope.site/code/mini-app/tools/",
      "content_html": "<h2 id=\"工具\" tabindex=\"-1\"> 工具</h2>\n<ul>\n<li>\n<p><a href=\"/code/mini-app/tools/interface.html\">工具页面简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/debug.html\">调试</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/npm.html\">npm</a></p>\n</li>\n<li>\n<p><a href=\"/code/mini-app/tools/audit.html\">体验评分</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:01:38.000Z",
      "authors": [],
      "tags": [
        "小程序"
      ]
    },
    {
      "title": "Vue-cli",
      "url": "https://mrhope.site/code/vue/cli/",
      "id": "https://mrhope.site/code/vue/cli/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/vue/cli/intro.html\">Vue Cli 介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/cli/quick-dev.html\">快速简单开发</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/cli/create.html\">创建项目</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/cli/file.html\">文件处理</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vue Router",
      "url": "https://mrhope.site/code/vue/router/",
      "id": "https://mrhope.site/code/vue/router/",
      "summary": "Vue Router 是 Vue 官方出品的路由组件，托管整个 Vue 项目路由。\n",
      "content_html": "<p>Vue Router 是 Vue 官方出品的路由组件，托管整个 Vue 项目路由。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/vue/router/get-started.html\">快速上手 Vue Router</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/router/demo.html\">Router DEMO</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li>\n<p><a href=\"https://router.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue-Router 指南</a></p>\n</li>\n<li>\n<p><a href=\"https://router.vuejs.org/zh/api/\" target=\"_blank\" rel=\"noopener noreferrer\">Vue-Router API 参考</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/vuejs/vue-router\" target=\"_blank\" rel=\"noopener noreferrer\">官方仓库</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "Vuex",
      "url": "https://mrhope.site/code/vue/vuex/",
      "id": "https://mrhope.site/code/vue/vuex/",
      "summary": "Vuex 是 Vue 官方出品的状态管理组件，是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n",
      "content_html": "<p>Vuex 是 Vue 官方出品的状态管理组件，是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/vue/vuex/get-started.html\">快速上手 Vuex</a></p>\n</li>\n<li>\n<p><a href=\"/code/vue/vuex/demo.html\">Vuex 案例</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li><a href=\"https://v1.vuepress.vuejs.org/zh/guide/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 教程</a></li>\n<li><a href=\"https://v1.vuepress.vuejs.org/zh/config/\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex 配置</a></li>\n<li><a href=\"https://github.com/vuejs/vuepress\" target=\"_blank\" rel=\"noopener noreferrer\">Vuex repository</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Vue"
      ]
    },
    {
      "title": "CSS",
      "url": "https://mrhope.site/code/website/css/",
      "id": "https://mrhope.site/code/website/css/",
      "summary": "CSS 指层叠样式表 (Cascading Style Sheets)，它负责描述网页元素的具体样式。\nCSS3 是最新的 CSS 标准，被拆分为&quot;模块&quot;。模块包括: 选择器、盒模型、背景和边框、文字特效、2D/3D 转换、动画、多列布局、用户界面。\n",
      "content_html": "<p>CSS 指层叠样式表 (<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets)，它负责描述网页元素的具体样式。</p>\n<p>CSS3 是最新的 CSS 标准，被拆分为&quot;模块&quot;。模块包括: 选择器、盒模型、背景和边框、文字特效、2D/3D 转换、动画、多列布局、用户界面。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/website/css/guide/\">快速上手</a></p>\n<ul>\n<li><a href=\"/code/website/css/guide/selector.html\">CSS 选择器</a></li>\n<li><a href=\"/code/website/css/guide/declaration.html\">CSS 声明</a></li>\n<li><a href=\"/code/website/css/guide/import.html\">CSS 引入</a></li>\n<li><a href=\"/code/website/css/guide/common.html\">CSS 常用属性介绍</a></li>\n<li><a href=\"/code/website/css/guide/box.html\">CSS 盒模型</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/code/website/css/layout/\">CSS 布局介绍</a></p>\n<ul>\n<li><a href=\"/code/website/css/layout/flex.html\">CSS 弹性模型</a></li>\n<li><a href=\"/code/website/css/layout/exercise.html\">CSS 布局实战</a></li>\n<li><a href=\"/code/website/css/layout/grid.html\">CSS 网格模型</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS/First_steps/CSS%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C\" target=\"_blank\" rel=\"noopener noreferrer\">CSS 工作原理</a></p>\n</li>\n</ul>\n<h2 id=\"css-参考\" tabindex=\"-1\"> CSS 参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 教程</a></li>\n</ul>\n<h2 id=\"其他文档\" tabindex=\"-1\"> 其他文档 <i>Content not supported</i></h2>\n<ul>\n<li>\n<p>CSS</p>\n<ul>\n<li><a href=\"https://www.w3cschool.cn/css/\" target=\"_blank\" rel=\"noopener noreferrer\">W3CSchool 教程</a></li>\n<li><a href=\"http://www.w3school.com.cn/css/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></li>\n<li><a href=\"https://www.runoob.com/css/css-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></li>\n</ul>\n</li>\n<li>\n<p>CSS3</p>\n<ul>\n<li><a href=\"https://www.w3cschool.cn/css3/\" target=\"_blank\" rel=\"noopener noreferrer\">W3CSchool 教程</a></li>\n<li><a href=\"http://www.w3school.com.cn/css3/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></li>\n<li><a href=\"https://www.runoob.com/css3/css3-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"在线练习网址\" tabindex=\"-1\"> 在线练习网址</h2>\n<ul>\n<li><a href=\"https://c.runoob.com/front-end/61\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程在线工具</a></li>\n<li><a href=\"https://jsfiddle.net/\" target=\"_blank\" rel=\"noopener noreferrer\">jsfiddle</a></li>\n</ul>\n<h2 id=\"css-的超集\" tabindex=\"-1\"> CSS 的超集</h2>\n<ul>\n<li>\n<p>Stylus</p>\n<p>带来更简单的写法，支持变量、函数等功能。</p>\n<ul>\n<li><a href=\"https://www.zhangxinxu.com/jq/stylus/\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n<li><a href=\"http://stylus-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n</ul>\n</li>\n<li>\n<p>Sass</p>\n<p>Sass 是世界上最成熟、稳定、强大的专业级 CSS 扩展语言。</p>\n<blockquote>\n<p>注: 官网说的，不是我说的 😂</p>\n</blockquote>\n<div>\n<p>提示</p>\n<p>SCSS 是 Sass3 版本当中引入的新语法特性,完全兼容 CSS3 的同时继承了 Sass 强大的动态功能。</p>\n</div>\n<ul>\n<li><a href=\"https://sass.bootcss.com/\" target=\"_blank\" rel=\"noopener noreferrer\">中文文档</a></li>\n<li><a href=\"https://sass-lang.com/\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2019-09-05T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "CSS"
      ]
    },
    {
      "title": "Emmet 语法",
      "url": "https://mrhope.site/code/website/emmet/",
      "id": "https://mrhope.site/code/website/emmet/",
      "summary": "\n简介\n所有操作按下 “tab” 键即可瞬间完成\n\nEmmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。\n",
      "content_html": "<div>\n<p>简介</p>\n<p>所有操作按下 “tab” 键即可瞬间完成</p>\n</div>\n<p>Emmet 是一个快速创建 HTML 和 CSS 的方式，如果您想要成为一个高级 Web 开发者，为了工作效率，您应该掌握 Emmet 语法。</p>\n\n<h2 id=\"html\" tabindex=\"-1\"> HTML</h2>\n<ul>\n<li><a href=\"/code/website/emmet/html.html\">HTML Emmet 语法</a></li>\n</ul>\n<h2 id=\"css\" tabindex=\"-1\"> CSS</h2>\n<ul>\n<li><a href=\"/code/website/emmet/css.html\">CSS Emmet 语法</a></li>\n</ul>\n<h2 id=\"其他功能\" tabindex=\"-1\"> 其他功能</h2>\n<p>Emmet 还提供了很多内置功能，在 VS Code 中，您可以按下 <code>F1</code> 并输入 <code>emmet</code> 来查看功能列表。详细的功能列表说明请见 <a href=\"https://docs.emmet.io/actions/\" target=\"_blank\" rel=\"noopener noreferrer\">Emmet 文档</a></p>\n",
      "date_published": "2019-09-03T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "Emmet"
      ]
    },
    {
      "title": "HTML",
      "url": "https://mrhope.site/code/website/html/",
      "id": "https://mrhope.site/code/website/html/",
      "summary": "HTML 指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标记语言 (markup language)，它使用标记标签来描述网页。HTML5 是 HTML 最新的修订版本。\n",
      "content_html": "<p>HTML 指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标记语言 (markup language)，它使用标记标签来描述网页。HTML5 是 HTML 最新的修订版本。</p>\n\n<div>\n<p>提示</p>\n<p>在网页的前端开发中，它描绘了视图层的具体结构。</p>\n</div>\n<h2 id=\"初学者教程\" tabindex=\"-1\"> 初学者教程</h2>\n<ul>\n<li><a href=\"/code/website/html/guide/\">HTML 快速入门</a></li>\n<li><a href=\"/code/website/html/guide/tag.html\">HTML 常用标签</a></li>\n</ul>\n<h2 id=\"html-教程\" tabindex=\"-1\"> HTML 教程</h2>\n<ul>\n<li><a href=\"/code/website/html/intro/history.html\">历史</a></li>\n<li><a href=\"/code/website/html/intro/head.html\">Head 标签</a></li>\n<li><a href=\"/code/website/html/intro/basic.html\">基本标签</a></li>\n<li><a href=\"/code/website/html/intro/link.html\">链接</a></li>\n<li><a href=\"/code/website/html/intro/image.html\">图片</a></li>\n<li><a href=\"/code/website/html/intro/svg.html\">矢量图形</a></li>\n<li><a href=\"/code/website/html/intro/media.html\">视频与音频</a></li>\n<li><a href=\"/code/website/html/intro/table.html\">表格</a></li>\n<li><a href=\"/code/website/html/intro/embed.html\">嵌入</a></li>\n<li><a href=\"/code/website/html/intro/format.html\">格式化文档</a></li>\n<li><a href=\"/code/website/html/intro/layout.html\">网站布局</a></li>\n</ul>\n<h2 id=\"定义列表\" tabindex=\"-1\"> 定义列表</h2>\n<ul>\n<li><a href=\"/code/website/html/definition/uri.html\">URI 统一资源标识符</a></li>\n<li><a href=\"/code/website/html/definition/url.html\">URL 统一资源定位符</a></li>\n<li><a href=\"/code/website/html/definition/seo.html\">SEO 搜索引擎优化</a></li>\n<li><a href=\"/code/website/html/definition/mime.html\">MIME Type 媒体类型</a></li>\n</ul>\n<h2 id=\"html-参考\" tabindex=\"-1\"> HTML 参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 教程</a></li>\n</ul>\n<h2 id=\"html5\" tabindex=\"-1\"> HTML5</h2>\n<p>HTML5 是 HTML 现行的最新修订版本，主要的新特性包括:</p>\n<ul>\n<li>用于绘画的 <code>&lt;canvas /&gt;</code> 元素</li>\n<li>用于媒体播放的 <code>&lt;video /&gt;</code> 和 <code>&lt;audio /&gt;</code> 元素</li>\n<li>更好地支持本地离线存储</li>\n<li>新的特殊内容元素，比如 <code>&lt;article /&gt;</code>、<code>&lt;footer /&gt;</code>、<code>&lt;header /&gt;</code>、<code>&lt;nav /&gt;</code>、<code>&lt;section /&gt;</code></li>\n<li>新的表单控件，比如 calendar、date、time、email、url、search</li>\n</ul>\n<h2 id=\"其他文档\" tabindex=\"-1\"> 其他文档 <i>Content not supported</i></h2>\n<ul>\n<li>\n<p>HTML</p>\n<ul>\n<li><a href=\"https://www.w3cschool.cn/html/\" target=\"_blank\" rel=\"noopener noreferrer\">W3CSchool 教程</a></li>\n<li><a href=\"https://www.runoob.com/html/html-tutorial.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></li>\n<li><a href=\"http://www.w3school.com.cn/html/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></li>\n</ul>\n</li>\n<li>\n<p>HTML5</p>\n<ul>\n<li><a href=\"https://www.w3cschool.cn/html5/\" target=\"_blank\" rel=\"noopener noreferrer\">W3CSchool 教程</a></li>\n<li><a href=\"https://www.runoob.com/html/html5-intro.html\" target=\"_blank\" rel=\"noopener noreferrer\">菜鸟教程</a></li>\n<li><a href=\"http://www.w3school.com.cn/html5/index.asp\" target=\"_blank\" rel=\"noopener noreferrer\">W3School 教程</a></li>\n</ul>\n</li>\n</ul>\n",
      "date_published": "2019-09-01T00:00:00.000Z",
      "date_modified": "2022-04-06T07:44:02.000Z",
      "authors": [],
      "tags": [
        "HTML"
      ]
    },
    {
      "title": "jQuery",
      "url": "https://mrhope.site/code/website/jQuery/",
      "id": "https://mrhope.site/code/website/jQuery/",
      "summary": "jQuery 是一款能够方便快捷的操作 DOM，并兼容所有主流浏览器的框架，目前最新版本是 3.5.1。\n\n提示\n由于目前前端应用的愈加复杂，前端开发者大多数转向 MVVM 框架，目前世界比较流行的三大 MVVM 框架是 Vue React Angular。可以说，在 2020 年，jQuery 已经过时了!\n不过 jQuery 无论说从代码实现还是从写法上，到今天都是值得借鉴的。\n所以如果您只想简单了解并掌握前端开发，而不是深入地从事相关行业，您可以直接 跳过本章节。\n本章节应以理解写法与思路为主，无需刻意记忆。\n\n",
      "content_html": "<p>jQuery 是一款能够方便快捷的操作 DOM，并兼容所有主流浏览器的框架，目前最新版本是 3.5.1。</p>\n<div>\n<p>提示</p>\n<p>由于目前前端应用的愈加复杂，前端开发者大多数转向 MVVM 框架，目前世界比较流行的三大 MVVM 框架是 Vue React Angular。可以说，在 2020 年，<strong>jQuery 已经过时了</strong>!</p>\n<p>不过 jQuery 无论说从代码实现还是从写法上，到今天都是值得借鉴的。</p>\n<p>所以如果您只想简单了解并掌握前端开发，而不是深入地从事相关行业，您可以直接 <a href=\"/code/vue/\">跳过本章节</a>。</p>\n<p>本章节应以理解写法与思路为主，无需刻意记忆。</p>\n</div>\n\n<h2 id=\"教程目录\" tabindex=\"-1\"> 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/website/jQuery/intro.html\">jQuery 简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/selector.html\">选择器</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/operate-dom.html\">操作 DOM</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/modify-dom.html\">修改 DOM 结构</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/event.html\">事件</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/animation.html\">动画</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/ajax.html\">Ajax</a></p>\n</li>\n<li>\n<p><a href=\"/code/website/jQuery/extend.html\">扩展</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-11-02T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [],
      "tags": [
        "jQuery"
      ]
    },
    {
      "title": "几何",
      "url": "https://mrhope.site/software/comsol/geometry/",
      "id": "https://mrhope.site/software/comsol/geometry/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/software/comsol/geometry/view.html\">浏览几何</a></p>\n</li>\n<li>\n<p><a href=\"/software/comsol/geometry/build.html\">构建几何</a></p>\n</li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<p>视频教程:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/video/introductory-video-series-on-how-to-build-geometries-in-comsol\" target=\"_blank\" rel=\"noopener noreferrer\">入门视频合集: 如何在 COMSOL® 中创建几何结构</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/importing-geometry-files-comsol-multiphysics\" target=\"_blank\" rel=\"noopener noreferrer\">在 COMSOL Multiphysics 中导入几何文件</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/identify-geometric-entities-model-selection-list\" target=\"_blank\" rel=\"noopener noreferrer\">使用“选择列表”对模型几何实体进行标识</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/form-union-form-assembly-geometry-finalization-methods\" target=\"_blank\" rel=\"noopener noreferrer\">几何定型方法: “形成联合体”与“形成装配”</a></p>\n</li>\n</ul>\n<p>博客:</p>\n<ul>\n<li><a href=\"https://cn.comsol.com/blogs/navigating-the-intuitive-comsol-multiphysics-modeling-environment/\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL Multiphysics<sup>®</sup> 直观的建模环境</a></li>\n</ul>\n<h2 id=\"几何进阶\" tabindex=\"-1\"> 几何进阶</h2>\n<p>视频:</p>\n<ul>\n<li><a href=\"https://cn.comsol.com/video/create-geometry-imported-mesh\" target=\"_blank\" rel=\"noopener noreferrer\">基于导入的网格创建几何</a></li>\n</ul>\n<p>博客:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/how-to-compute-distances-between-objects-in-comsol-multiphysics/\" target=\"_blank\" rel=\"noopener noreferrer\">如何在 COMSOL Multiphysics<sup>®</sup> 中计算几何对象间的距离</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/shell-tube-heat-exchanger-model-tutorial\" target=\"_blank\" rel=\"noopener noreferrer\">管壳式换热器模型教程</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-29T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "软件"
      ]
    },
    {
      "title": "网格",
      "url": "https://mrhope.site/software/comsol/mesh/",
      "id": "https://mrhope.site/software/comsol/mesh/",
      "content_html": "<h2 id=\"网格基础\" tabindex=\"-1\"> 网格基础</h2>\n<ul>\n<li><a href=\"/software/comsol/mesh/intro.html\">网格划分和细化介绍</a></li>\n</ul>\n<h3 id=\"内容\" tabindex=\"-1\"> 内容</h3>\n<h4 id=\"剖分方法\" tabindex=\"-1\"> 剖分方法</h4>\n<ul>\n<li>物理场控制</li>\n<li>用户控制</li>\n</ul>\n<h4 id=\"剖分程度\" tabindex=\"-1\"> 剖分程度</h4>\n<p>从极粗化到极细化一共九个级别。</p>\n<h4 id=\"其他\" tabindex=\"-1\"> 其他</h4>\n<p>可以进行定制。</p>\n<h3 id=\"基础\" tabindex=\"-1\"> 基础</h3>\n<p>教程视频:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/video/building-the-mesh-for-a-model-geometry-in-comsol-multiphysics\" target=\"_blank\" rel=\"noopener noreferrer\">在 COMSOL Multiphysics<sup>®</sup> 中为几何模型构建网格</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/meshing-in-comsol-multiphysics-tutorial-cn\" target=\"_blank\" rel=\"noopener noreferrer\">在 COMSOL Multiphysics<sup>®</sup> 中剖分网格</a></p>\n</li>\n</ul>\n<p>博客:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/improved-capabilities-for-meshing-with-tetrahedral-elements/\" target=\"_blank\" rel=\"noopener noreferrer\">网格剖分原理介绍</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/how-to-inspect-your-mesh-in-comsol-multiphysics/\" target=\"_blank\" rel=\"noopener noreferrer\">如何检查 COMSOL Multiphysics<sup>®</sup> 中的网格</a></p>\n</li>\n</ul>\n<p>案例:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/model/using-meshing-sequences-13869\" target=\"_blank\" rel=\"noopener noreferrer\">使用网格划分序列</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/blogs/efficiently-mesh-your-model-geometry-with-meshing-sequences/\" target=\"_blank\" rel=\"noopener noreferrer\">借助网格剖分序列提升几何模型的网格剖分效率</a></p>\n</li>\n</ul>\n<h4 id=\"进阶\" tabindex=\"-1\"> 进阶</h4>\n<p>视频教程:</p>\n<ul>\n<li>\n<p><a href=\"https://cn.comsol.com/video/meshing-techniques-in-comsol-multiphysics-webinar-cn\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL® 网格剖分技巧</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/meshing-tips-comsol-multiphysics\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL® 网格剖分技巧</a></p>\n</li>\n<li>\n<p><a href=\"https://cn.comsol.com/video/automated-meshing-infinite-element-domains\" target=\"_blank\" rel=\"noopener noreferrer\">对无限元域自动划分网格</a></p>\n</li>\n</ul>\n<p>其他文档:</p>\n<ul>\n<li><a href=\"https://wenku.baidu.com/view/8d2eebe4eff9aef8941e06fe.html\" target=\"_blank\" rel=\"noopener noreferrer\">COMSOL Multiphysics 网格剖分 变形几何</a></li>\n</ul>\n",
      "date_published": "2020-06-02T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "软件"
      ]
    },
    {
      "title": "Windows Terminal",
      "url": "https://mrhope.site/software/tool/terminal/",
      "id": "https://mrhope.site/software/tool/terminal/",
      "summary": "Windows Terminal 是一个面向命令行工具和 shell(如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL))用户的新式终端应用程序。\n",
      "content_html": "<p>Windows Terminal 是一个面向命令行工具和 shell(如命令提示符、PowerShell 和适用于 Linux 的 Windows 子系统 (WSL))用户的新式终端应用程序。</p>\n\n<p><img src=\"@source/software/tool/assets/terminal-overview.png\" alt=\"Windows Terminal\"></p>\n<h2 id=\"特点\" tabindex=\"-1\"> 特点</h2>\n<ul>\n<li>\n<p>多选项卡与窗格</p>\n<p>可以同时运行多个终端并自由布局与切换</p>\n</li>\n<li>\n<p>自定义方案和配置</p>\n<p>可在 Windows Terminal 中使用多种自定义命令，获得更加自然的体验。 如果不喜欢特定的键盘快捷方式，可以将其更改为您喜欢的方式。</p>\n</li>\n<li>\n<p>强大的可配置主题</p>\n<p>可以自由配置 Windows Terminal 的配色方案</p>\n<p>可以在 Windows Terminal 窗口中显示背景图像和 GIF</p>\n</li>\n<li>\n<p>扩展性，支持连接众多平台</p>\n<p>任何具有命令行接口的应用程序都可以在 Windows Terminal 中运行。 这包括从 PowerShell 和命令提示符到 Azure Cloud Shell 和任何 WSL 分发 (如 Ubuntu 或 Oh-My-Zsh) 的所有应用程序。</p>\n</li>\n<li>\n<p>Unicode 和 UTF-8 字符支持</p>\n<p>Windows Terminal 可以显示 Unicode 和 UTF-8 字符，如各种语言的表情符号和字符。</p>\n</li>\n<li>\n<p>GPU 加速文本呈现引擎</p>\n<p>Windows Terminal 使用 GPU 来呈现其文本，从而提供比默认 Windows 命令行体验更好的性能。</p>\n</li>\n<li>\n<p>开源</p>\n</li>\n</ul>\n<h2 id=\"教程\" tabindex=\"-1\"> 教程</h2>\n<ul>\n<li><a href=\"/software/tool/terminal/get-started.html\">快速上手</a></li>\n<li><a href=\"/software/tool/terminal/settings.html\">自定义设置</a></li>\n</ul>\n<h2 id=\"官方文档\" tabindex=\"-1\"> 官方文档</h2>\n<ul>\n<li><a href=\"https://aka.ms/terminal-documentation\" target=\"_blank\" rel=\"noopener noreferrer\">官方文档</a></li>\n</ul>\n",
      "date_published": "2021-01-27T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": []
    },
    {
      "title": "VS Code 指南",
      "url": "https://mrhope.site/software/vscode/guide/",
      "id": "https://mrhope.site/software/vscode/guide/",
      "content_html": "<ul>\n<li>\n<p><a href=\"/software/vscode/guide/basic.html\">基础介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/customization.html\">个性化介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/extension.html\">扩展介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/file.html\">文件介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/edit.html\">编辑技巧</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/intellisense.html\">智能补全</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/git.html\">Git 支持</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/debug.html\">调试介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/task.html\">任务介绍</a></p>\n</li>\n<li>\n<p><a href=\"/software/vscode/guide/command.html\">命令行介绍</a></p>\n</li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "VS Code"
      ]
    },
    {
      "title": "dart 快速入门",
      "url": "https://mrhope.site/code/language/dart/samples/",
      "id": "https://mrhope.site/code/language/dart/samples/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/dart/samples/samples.html\">案例</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/dart/samples/cheatsheet.html\">概要介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/dart/samples/iterable.html\">遍历</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-30T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "dart"
      ]
    },
    {
      "title": "浏览器",
      "url": "https://mrhope.site/code/language/js/browser/",
      "id": "https://mrhope.site/code/language/js/browser/",
      "content_html": "<h2 id=\"相关文档\" tabindex=\"-1\"> 相关文档</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/browser/intro.html\">浏览器介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/browser-object.html\">浏览器对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/dom.html\">操作 DOM</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/form.html\">操作表单</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/file.html\">操作文件</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/ajax.html\">Ajax</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/promise.html\">Promise</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/browser/canvas.html\">Canvas</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-10-15T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "es6 入门",
      "url": "https://mrhope.site/code/language/js/es6/",
      "id": "https://mrhope.site/code/language/js/es6/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/es6/intro.html\">ECMAScript 6 简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/let.html\">let 和 const 命令</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/destructuring.html\">变量的解构赋值</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/string.html\">字符串的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/regex.html\">正则的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/number.html\">数值的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/function.html\">函数的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/array.html\">数组的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/object.html\">对象的扩展</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/symbol.html\">Symbol</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/set-map.html\">Set 和 Map 数据结构</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/proxy.html\">Proxy</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/reflect.html\">Reflect</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/promise.html\">Promise 对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/iterator.html\">Iterator 和 for...of 循</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/generator.html\">Generator 函数的语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/generator-async.html\">Generator 函数的异步应用</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/async.html\">async 函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/class.html\">Class 的基本语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/class-extends.html\">Class 的继承</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/decorator.html\">Decorator</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/module.html\">Module 的语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/module-loader.html\">Module 的加载实现</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/style.html\">编程风格</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/spec.html\">读懂规格</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/arraybuffer.html\">ArrayBuffer</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/proposals.html\">最新提案</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/es6/reference.html\">参考链接</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-10-20T00:00:00.000Z",
      "date_modified": "2022-02-12T05:50:30.000Z",
      "authors": [
        {
          "name": "阮一峰"
        }
      ],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "函数",
      "url": "https://mrhope.site/code/language/js/function/",
      "id": "https://mrhope.site/code/language/js/function/",
      "content_html": "<h2 id=\"基础部分\" tabindex=\"-1\"> 基础部分</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/function/intro.html\">函数介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/declare.html\">函数声明</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/call.html\">函数调用</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/scope.html\">函数作用域</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/destructuring.html\">解构赋值</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/this.html\">this 的指向</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/arrow-function.html\">箭头函数</a></p>\n</li>\n</ul>\n<h2 id=\"进阶\" tabindex=\"-1\"> 进阶</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/function/higher-order-function.html\">高阶函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/map-and-reduce.html\">map reduce 与 sort</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/closure.html\">闭包</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/function/generator.html\">generator</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-10-01T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "快速上手",
      "url": "https://mrhope.site/code/language/js/guide/",
      "id": "https://mrhope.site/code/language/js/guide/",
      "summary": "\n提示\n本部分将带您尽快进入 JavaScript 的世界。\n\n",
      "content_html": "<div>\n<p>提示</p>\n<p>本部分将带您尽快进入 JavaScript 的世界。</p>\n</div>\n\n<h2 id=\"教程目录\" tabindex=\"-1\"> 教程目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/guide/get-started.html\">上手 JavaScript</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/grammar.html\">基本语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/data-structure.html\">数据类型</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/variable.html\">变量</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/boolean.html\">布尔值简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/condition.html\">条件判断</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/loop.html\">循环</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/string.html\">字符串简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/array.html\">数组简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/object.html\">对象简介</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/function.html\">函数简介</a></p>\n</li>\n</ul>\n<h2 id=\"练习\" tabindex=\"-1\"> 练习</h2>\n<ul>\n<li><a href=\"/code/language/js/guide/exercise.html\">练手</a></li>\n</ul>\n<h2 id=\"初步进阶\" tabindex=\"-1\"> 初步进阶</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/guide/map-and-set.html\">Map&amp;Set</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/guide/iterable.html\">Iterable</a></p>\n</li>\n</ul>\n<h2 id=\"参考链接\" tabindex=\"-1\"> 参考链接</h2>\n<ul>\n<li>Axel Rauschmayer, <a href=\"http://www.2ality.com/2011/10/javascript-overview.html\" target=\"_blank\" rel=\"noopener noreferrer\">A quick overview of JavaScript</a></li>\n</ul>\n",
      "date_published": "2019-09-14T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "JavaScript 简介",
      "url": "https://mrhope.site/code/language/js/intro/",
      "id": "https://mrhope.site/code/language/js/intro/",
      "summary": "\nJavaScript 语言是什么\nJavaScript 是一种轻量级的脚本语言。所谓“脚本语言” (script language)，指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序(比如浏览器)的“脚本”。\nJavaScript 也是一种嵌入式 (embedded) 语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O (输入/输出)相关的 API，都要靠宿主环境(host)提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。\n\n",
      "content_html": "<div>\n<p>JavaScript 语言是什么</p>\n<p>JavaScript 是一种轻量级的脚本语言。所谓“脚本语言” (script language)，指的是它不具备开发操作系统的能力，而是只用来编写控制其他大型应用程序(比如浏览器)的“脚本”。</p>\n<p>JavaScript 也是一种嵌入式 (embedded) 语言。它本身提供的核心语法不算很多，只能用来做一些数学和逻辑运算。JavaScript 本身不提供任何与 I/O (输入/输出)相关的 API，都要靠宿主环境(host)提供，所以 JavaScript 只合适嵌入更大型的应用程序环境，去调用宿主环境提供的底层 API。</p>\n</div>\n\n<h2 id=\"javascript-简介\" tabindex=\"-1\"> JavaScript 简介</h2>\n<p>目前，已经嵌入 JavaScript 的宿主环境有多种，最常见的环境就是浏览器，另外还有服务器环境，也就是 Node.js 项目。</p>\n<p>从语法角度看，JavaScript 语言是一种“对象模型”语言。各种宿主环境通过这个模型，描述自己的功能和操作接口，从而通过 JavaScript 控制这些功能。但是，JavaScript 并不是纯粹的“面向对象语言”，还支持其他编程范式(比如函数式编程)。这导致几乎任何一个问题，JavaScript 都有多种解决方法。在根据本博客学习 JavaScript 的过程中，您会诧异于 JavaScript 语法的灵活性。</p>\n<p>JavaScript 的核心语法部分相当精简，只包括两个部分: 基本的语法构造(比如操作符、控制结构、语句)和标准库(就是一系列具有各种功能的对象比如 <code>Array</code>、<code>Date</code>、<code>Math</code> 等)。除此之外，各种宿主环境提供额外的 API(即只能在该环境使用的接口)，以便 JavaScript 调用。以浏览器为例，它提供的额外 API 可以分成三大类。</p>\n<ul>\n<li>浏览器控制类: 操作浏览器</li>\n<li>DOM 类: 操作网页的各种元素</li>\n<li>Web 类: 实现互联网的各种功能</li>\n</ul>\n<p>如果宿主环境是服务器，则会提供各种操作系统的 API，比如文件操作 API、网络通信 API 等等。这些您都可以在 Node.js 环境中找到。</p>\n<h2 id=\"学习-javascript-的原因\" tabindex=\"-1\"> 学习 JavaScript 的原因</h2>\n<p>JavaScript 语言有一些显著特点，使得它非常值得学习。它既适合作为学习编程的入门语言，也适合当作日常开发的工作语言。它是目前最有希望、前途最光明的计算机语言之一。</p>\n<h3 id=\"操控浏览器的能力\" tabindex=\"-1\"> 操控浏览器的能力</h3>\n<p>JavaScript 的发明目的，就是作为浏览器的内置脚本语言，为网页开发者提供操控浏览器的能力。它是目前唯一一种通用的浏览器脚本语言，所有浏览器都支持。它可以让网页呈现各种特殊效果，为用户提供良好的互动体验。</p>\n<p>目前，全世界几乎所有网页都使用 JavaScript。如果不用，网站的易用性和使用效率将大打折扣，无法成为操作便利、对用户友好的网站。</p>\n<p>对于一个互联网开发者来说，如果您想提供漂亮的网页、令用户满意的上网体验、各种基于浏览器的便捷功能、前后端之间紧密高效的联系，JavaScript 是必不可少的工具。</p>\n<h3 id=\"广泛的使用领域\" tabindex=\"-1\"> 广泛的使用领域</h3>\n<p>近年来，JavaScript 的使用范围，慢慢超越了浏览器，正在向通用的系统语言发展。</p>\n<ol>\n<li>\n<p>浏览器的平台化</p>\n<p>随着 HTML5 的出现，浏览器本身的功能越来越强，不再仅仅能浏览网页，而是越来越像一个平台，JavaScript 因此得以调用许多系统功能，比如操作本地文件、操作图片、调用摄像头和麦克风等等。这使得 JavaScript 可以完成许多以前无法想象的事情。</p>\n</li>\n<li>\n<p>Node.js</p>\n<p>Node.js 项目使得 JavaScript 可以用于开发服务器端的大型项目，网站的前后端都用 JavaScript 开发已经成为了现实。有些嵌入式平台 (Raspberry Pi) 能够安装 Node，于是 JavaScript 就能为这些平台开发应用程序。</p>\n</li>\n<li>\n<p>数据库操作</p>\n<p>JavaScript 甚至也可以用来操作数据库。NoSQL 数据库这个概念，本身就是在 JSON(JavaScript Object Notation)格式的基础上诞生的，大部分 NoSQL 数据库允许 JavaScript 直接操作。基于 SQL 语言的开源数据库 PostgreSQL 支持 JavaScript 作为操作语言，可以部分取代 SQL 查询语言。</p>\n</li>\n<li>\n<p>移动平台开发</p>\n<p>JavaScript 也正在成为手机应用的开发语言。一般来说，安卓平台使用 Java 语言开发，iOS 平台使用 Objective-C 或 Swift 语言开发。许多人正在努力，让 JavaScript 成为各个平台的通用开发语言。</p>\n<p>PhoneGap 项目就是将 JavaScript 和 HTML5 打包在一个容器之中，使得它能同时在 iOS 和安卓上运行。Facebook 公司的 React Native 项目则是将 JavaScript 写的组件，编译成原生组件，从而使它们具备优秀的性能。</p>\n<p>Mozilla 基金会的手机操作系统 Firefox OS，更是直接将 JavaScript 作为操作系统的平台语言，但是很可惜这个项目没有成功。</p>\n</li>\n<li>\n<p>内嵌脚本语言</p>\n<p>越来越多的应用程序，将 JavaScript 作为内嵌的脚本语言，比如 Adobe 公司的著名 PDF 阅读器 Acrobat、Linux 桌面环境 GNOME 3。</p>\n</li>\n<li>\n<p>跨平台的桌面应用程序</p>\n<p>Chromium OS、Windows 8 等操作系统直接支持 JavaScript 编写应用程序。Mozilla 的 Open Web Apps 项目、Google 的 <a href=\"http://developer.chrome.com/apps/about_apps\" target=\"_blank\" rel=\"noopener noreferrer\">Chrome App 项目</a>、GitHub 的 <a href=\"http://electron.atom.io/\" target=\"_blank\" rel=\"noopener noreferrer\">Electron 项目</a>、以及 <a href=\"http://tidesdk.multipart.net/docs/user-dev/generated/\" target=\"_blank\" rel=\"noopener noreferrer\">TideSDK 项目</a>，都可以用来编写运行于 Windows、macOS 和 Android 等多个桌面平台的程序，不依赖浏览器。</p>\n</li>\n<li>\n<p>小结</p>\n<p>可以预期，JavaScript 最终将能让您只用一种语言，就开发出适应不同平台(包括桌面端、服务器端、手机端)的程序。早在 2013 年 9 月的<a href=\"http://adambard.com/blog/top-github-languages-for-2013-so-far/\" target=\"_blank\" rel=\"noopener noreferrer\">统计</a>之中，JavaScript 就是当年 GitHub 上使用量排名第一的语言。</p>\n<p>著名程序员 Jeff Atwood 甚至提出了一条 <a href=\"http://www.codinghorror.com/blog/2007/07/the-principle-of-least-power.html\" target=\"_blank\" rel=\"noopener noreferrer\">“Atwood 定律”</a>:</p>\n</li>\n</ol>\n<blockquote>\n<p>“所有可以用 JavaScript 编写的程序，最终都会出现 JavaScript 的版本。”(Any application that can be written in JavaScript will eventually be written in JavaScript.)</p>\n</blockquote>\n<h3 id=\"易学性\" tabindex=\"-1\"> 易学性</h3>\n<p>相比学习其他语言，学习 JavaScript 有一些有利条件。</p>\n<ol>\n<li>\n<p>学习环境无处不在</p>\n<p>只要有浏览器，就能运行 JavaScript 程序；只要有文本编辑器，就能编写 JavaScript 程序。这意味着，几乎所有电脑都原生提供 JavaScript 学习环境，不用另行安装复杂的 IDE(集成开发环境)和编译器。</p>\n</li>\n<li>\n<p>简单性</p>\n<p>相比其他脚本语言(比如 Python 或 Ruby)，JavaScript 的语法相对简单一些，本身的语法特性并不是特别多。而且，那些语法中的复杂部分，也不是必需要学会。您完全可以只用简单命令，完成大部分的操作。</p>\n</li>\n<li>\n<p>与主流语言的相似性</p>\n<p>JavaScript 的语法很类似 C/C++ 和 Java，如果学过这些语言(事实上大多数学校都教)，JavaScript 的入门会非常容易。</p>\n</li>\n</ol>\n<p>必须说明的是，虽然核心语法不难，但是 JavaScript 的复杂性体现在另外两个方面。</p>\n<p>首先，它涉及大量的外部 API。JavaScript 要发挥作用，必须与其他组件配合，这些外部组件五花八门，数量极其庞大，几乎涉及网络应用的各个方面，掌握它们绝非易事。</p>\n<p>其次，JavaScript 语言有一些设计缺陷。某些地方相当不合理，另一些地方则会出现怪异的运行结果。学习 JavaScript，很大一部分时间是用来搞清楚哪些地方有陷阱。Douglas Crockford 写过一本有名的书，名字就叫<a href=\"http://javascript.crockford.com/\" target=\"_blank\" rel=\"noopener noreferrer\">《JavaScript: The Good Parts》</a>，言下之意就是这门语言不好的地方很多，必须写一本书才能讲清楚。另外一些程序员则感到，为了更合理地编写 JavaScript 程序，就不能用 JavaScript 来写，而必须发明新的语言，比如 CoffeeScript、TypeScript、Dart 这些新语言的发明目的，多多少少都有这个因素。</p>\n<p>尽管如此，目前看来，JavaScript 的地位还是无法动摇。加之，语言标准的快速进化，使得 JavaScript 功能日益增强，而语法缺陷和怪异之处得到了弥补。所以，JavaScript 还是值得学习，况且它的入门真的不难。</p>\n<h3 id=\"强大的性能\" tabindex=\"-1\"> 强大的性能</h3>\n<p>JavaScript 的性能优势体现在以下方面。</p>\n<ul>\n<li>\n<p>灵活的语法，表达力强</p>\n<p>JavaScript 既支持类似 C 语言清晰的过程式编程，也支持灵活的函数式编程，可以用来写并发处理(concurrent)。这些语法特性已经被证明非常强大，可以用于许多场合，尤其适用异步编程。</p>\n<p>JavaScript 的所有值都是对象，这为程序员提供了灵活性和便利性。因为您可以很方便地、按照需要随时创造数据结构，不用进行麻烦的预定义。</p>\n<p>JavaScript 的标准还在快速进化中，并不断合理化，添加更适用的语法特性。</p>\n</li>\n<li>\n<p>支持编译运行。</p>\n<p>JavaScript 语言本身，虽然是一种解释型语言，但是在现代浏览器中，JavaScript 都是编译后运行。程序会被高度优化，运行效率接近二进制程序。而且，JavaScript 引擎正在快速发展，性能将越来越好。</p>\n<p>此外，还有一种 WebAssembly 格式，它是 JavaScript 引擎的中间码格式，全部都是二进制代码。由于跳过了编译步骤，可以达到接近原生二进制代码的运行速度。各种语言(主要是 C 和 C++)通过编译成 WebAssembly，就可以在浏览器里面运行。</p>\n</li>\n<li>\n<p>事件驱动和非阻塞式设计。</p>\n<p>JavaScript 程序可以采用事件驱动 (event-driven) 和非阻塞式 (non-blocking) 设计，在服务器端适合高并发环境，普通的硬件就可以承受很大的访问量。</p>\n</li>\n</ul>\n<h3 id=\"开放性\" tabindex=\"-1\"> 开放性</h3>\n<p>JavaScript 是一种开放的语言。它的标准 ECMA-262 是 ISO 国际标准，写得非常详尽明确；该标准的主要实现(比如 V8 和 SpiderMonkey 引擎)都是开放的，而且质量很高。这保证了这门语言不属于任何公司或个人，不存在版权和专利的问题。</p>\n<p>语言标准由 TC39 委员会负责制定，该委员会的运作是透明的，所有讨论都是开放的，会议记录都会对外公布。</p>\n<p>不同公司的 JavaScript 运行环境，兼容性很好，程序不做调整或只做很小的调整，就能在所有浏览器上运行。</p>\n<h3 id=\"社区支持和就业机会\" tabindex=\"-1\"> 社区支持和就业机会</h3>\n<p>全世界程序员都在使用 JavaScript，它有着极大的社区、广泛的文献和图书、丰富的代码资源。绝大部分您需要用到的功能，都有多个开源函数库可供选用。</p>\n",
      "date_published": "2019-09-13T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "对象",
      "url": "https://mrhope.site/code/language/js/object/",
      "id": "https://mrhope.site/code/language/js/object/",
      "summary": "在 JavaScript 的世界里，一切都是对象。\n",
      "content_html": "<p>在 JavaScript 的世界里，一切都是对象。</p>\n\n<h2 id=\"面向对象编程\" tabindex=\"-1\"> 面向对象编程</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/object/intro.html\">对象及原型介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/create.html\">创建对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/extend.html\">原型继承</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/class.html\">class 继承</a></p>\n</li>\n</ul>\n<h2 id=\"其他标准对象\" tabindex=\"-1\"> 其他标准对象</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/object/wrap.html\">包装对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/date.html\">Date 对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/regExp.html\">正则表达</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/object/JSON.html\">JSON</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-10-08T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "运算符",
      "url": "https://mrhope.site/code/language/js/operators/",
      "id": "https://mrhope.site/code/language/js/operators/",
      "content_html": "<div>\n<p>提示</p>\n<p>二进制位运算符章节使用较少，无需阅读。</p>\n</div>\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/operators/arithmetic.html\">算术运算符</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/operators/comparison.html\">比较运算符</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/operators/boolean.html\">布尔运算符</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/operators/bit.html\">二进制位运算符</a> <i>Content not supported</i></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/operators/priority.html\">其他运算符，运算顺序</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-09-26T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "数据类型",
      "url": "https://mrhope.site/code/language/js/types/",
      "id": "https://mrhope.site/code/language/js/types/",
      "summary": "本章节是对数据类型的系统介绍。由于此章节的部分内容已经在 快速上手 涉及，部分内容有重复。\n",
      "content_html": "<p>本章节是对数据类型的系统介绍。由于此章节的部分内容已经在 <a href=\"/code/language/js/guide/\">快速上手</a> 涉及，部分内容有重复。</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/js/types/general.html\">概述</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/boolean.html\">布尔值</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/number.html\">数值</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/string.html\">字符串</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/null-undefined.html\">null 和 undefined</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/object.html\">对象</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/function.html\">函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/js/types/array.html\">数组</a></p>\n</li>\n</ul>\n",
      "date_published": "2019-09-20T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "JavaScript"
      ]
    },
    {
      "title": "Emoji 列表",
      "url": "https://mrhope.site/code/language/markdown/emoji/",
      "id": "https://mrhope.site/code/language/markdown/emoji/",
      "content_html": "<h2 id=\"人物\" tabindex=\"-1\"> 人物</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/people.html\">点击前往</a></li>\n</ul>\n<h2 id=\"自然\" tabindex=\"-1\"> 自然</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/nature.html\">点击前往</a></li>\n</ul>\n<h2 id=\"对象\" tabindex=\"-1\"> 对象</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/object.html\">点击前往</a></li>\n</ul>\n<h2 id=\"地点\" tabindex=\"-1\"> 地点</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/place.html\">点击前往</a></li>\n</ul>\n<h2 id=\"符号\" tabindex=\"-1\"> 符号</h2>\n<ul>\n<li><a href=\"/code/language/markdown/emoji/symbol.html\">点击前往</a></li>\n</ul>\n",
      "date_published": "2022-02-06T16:01:38.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [],
      "tags": [
        "Markdown"
      ]
    },
    {
      "title": "Python 高级语法",
      "url": "https://mrhope.site/code/language/python/advance/",
      "id": "https://mrhope.site/code/language/python/advance/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/advance/slice.html\">切片</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/iteration.html\">迭代</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/list-comprehensions.html\">列表生成式</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/generator.html\">生成器</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/advance/iterator.html\">迭代器</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-28T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "函数",
      "url": "https://mrhope.site/code/language/python/function/",
      "id": "https://mrhope.site/code/language/python/function/",
      "content_html": "<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/function/intro.html\">函数介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/define.html\">函数定义</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/call.html\">函数调用</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/argument.html\">函数参数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/function/recursive.html\">递归调用</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-25T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "函数式编程",
      "url": "https://mrhope.site/code/language/python/functional-programming/",
      "id": "https://mrhope.site/code/language/python/functional-programming/",
      "content_html": "<p>函数是 Python 内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。</p>\n<p>而函数式编程(请注意多了一个“式”字)——Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学计算。</p>\n<p>我们首先要搞明白计算机(Computer)和计算(Compute)的概念。</p>\n<p>在计算机的层次上，CPU 执行的是加减乘除的指令代码，以及各种条件判断和跳转指令，所以，汇编语言是最贴近计算机的语言。</p>\n<p>而计算则指数学意义上的计算，越是抽象的计算，离计算机硬件越远。</p>\n<p>对应到编程语言，就是越低级的语言，越贴近计算机，抽象程度低，执行效率高，比如 C 语言；越高级的语言，越贴近计算，抽象程度高，执行效率低，比如 Lisp 语言。</p>\n<p>函数式编程就是一种抽象程度很高的编程范式，纯粹的函数式编程语言编写的函数没有变量，因此，任意一个函数，只要输入是确定的，输出就是确定的，这种纯函数我们称之为没有副作用。而允许使用变量的程序设计语言，由于函数内部的变量状态不确定，同样的输入，可能得到不同的输出，因此，这种函数是有副作用的。</p>\n<p>函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数!</p>\n<p>Python 对函数式编程提供部分支持。由于 Python 允许使用变量，因此，Python 不是纯函数式编程语言。</p>\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/intro.html\">高阶函数介绍</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/map-and-reduce.html\">map / reduce</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/filter.html\">filter</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/high-order-function/sorted.html\">sorted</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/return-function.html\">返回函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/anonymous-function.html\">匿名函数</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/decorator.html\">装饰器</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/functional-programming/parital-function.html\">偏函数</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-31T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    },
    {
      "title": "快速上手",
      "url": "https://mrhope.site/code/language/python/guide/",
      "id": "https://mrhope.site/code/language/python/guide/",
      "summary": "本章节介绍 Python 的基础语法，帮助您尽快了解 Python 的基础内容\n",
      "content_html": "<p>本章节介绍 Python 的基础语法，帮助您尽快了解 Python 的基础内容</p>\n\n<h2 id=\"目录\" tabindex=\"-1\"> 目录</h2>\n<ul>\n<li>\n<p><a href=\"/code/language/python/guide/write.html\">第一个 Python 程序</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/io.html\">输入与输出</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/basic.html\">基础语法</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/string.html\">字符串</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/list-and-tuple.html\">List 和 Tuple</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/condition.html\">条件判断</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/loop.html\">循环</a></p>\n</li>\n<li>\n<p><a href=\"/code/language/python/guide/dict-and-set.html\">Dictionary 和 Set</a></p>\n</li>\n</ul>\n",
      "date_published": "2020-05-19T00:00:00.000Z",
      "date_modified": "2022-02-06T16:46:58.000Z",
      "authors": [
        {
          "name": "廖雪峰"
        }
      ],
      "tags": [
        "Python"
      ]
    }
  ]
}